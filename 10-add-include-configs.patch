From 281afc18b1bcec447bf10d9961a3c2496dbfea56 Mon Sep 17 00:00:00 2001
From: Mike Banon <mikebdp2@gmail.com>
Date: Fri, 29 Nov 2019 17:53:16 +0000
Subject: [PATCH] Add ./include/configs/ Atheros files from WR841N(D)v9 u-boot

---
 include/configs/ap101-2.6.31.h   | 243 +++++++++++++++
 include/configs/ap101-small.h    | 243 +++++++++++++++
 include/configs/ap101.h          | 243 +++++++++++++++
 include/configs/ap111-2.6.31.h   | 244 +++++++++++++++
 include/configs/ap111.h          | 243 +++++++++++++++
 include/configs/ap120.h          | 476 +++++++++++++++++++++++++++++
 include/configs/ap121.h          | 335 +++++++++++++++++++++
 include/configs/ap123.h          | 474 +++++++++++++++++++++++++++++
 include/configs/ap81.h           | 191 ++++++++++++
 include/configs/ap83.h           | 190 ++++++++++++
 include/configs/ap91-2MB.h       | 214 +++++++++++++
 include/configs/ap91-2x8.h       | 214 +++++++++++++
 include/configs/ap91-router.h    | 195 ++++++++++++
 include/configs/ap91.h           | 240 +++++++++++++++
 include/configs/ap93-hgw.h       | 172 +++++++++++
 include/configs/ap93.h           | 166 +++++++++++
 include/configs/ap94.h           | 182 ++++++++++++
 include/configs/ap94min.h        | 167 +++++++++++
 include/configs/ap96.h           | 177 +++++++++++
 include/configs/ap98.h           | 278 +++++++++++++++++
 include/configs/ap99-2.6.31.h    | 259 ++++++++++++++++
 include/configs/ap99-hgw.h       | 274 +++++++++++++++++
 include/configs/ap99-ivi.h       | 272 +++++++++++++++++
 include/configs/ap99-small.h     | 247 +++++++++++++++
 include/configs/ap99.h           | 278 +++++++++++++++++
 include/configs/aph126.h         | 421 ++++++++++++++++++++++++++
 include/configs/aph128.h         | 421 ++++++++++++++++++++++++++
 include/configs/aph131.h         | 321 ++++++++++++++++++++
 include/configs/ar7100.h         | 100 +++++++
 include/configs/ar7240.h         | 153 ++++++++++
 include/configs/ar7240_emu.h     | 177 +++++++++++
 include/configs/board953x.h      | 359 ++++++++++++++++++++++
 include/configs/board955x.h      | 310 +++++++++++++++++++
 include/configs/cus136.h         | 201 +++++++++++++
 include/configs/cus97.h          | 147 +++++++++
 include/configs/db12x-extender.h | 419 ++++++++++++++++++++++++++
 include/configs/db12x-hybrid.h   | 495 +++++++++++++++++++++++++++++++
 include/configs/db12x.h          | 484 ++++++++++++++++++++++++++++++
 include/configs/dhp1565.h        | 420 ++++++++++++++++++++++++++
 include/configs/hornet_emu.h     | 255 ++++++++++++++++
 include/configs/mi93.h           | 247 +++++++++++++++
 include/configs/pb42.h           | 115 +++++++
 include/configs/pb44.h           | 230 ++++++++++++++
 include/configs/pb45.h           | 162 ++++++++++
 include/configs/pb47.h           | 160 ++++++++++
 include/configs/pb90.h           | 167 +++++++++++
 include/configs/pb92.h           | 330 +++++++++++++++++++++
 include/configs/pb93.h           | 229 ++++++++++++++
 include/configs/pb9x-2.6.31.h    | 286 ++++++++++++++++++
 include/configs/pb9x-2x8.h       | 212 +++++++++++++
 include/configs/pb9x.h           | 282 ++++++++++++++++++
 include/configs/reh132.h         | 424 ++++++++++++++++++++++++++
 include/configs/scoemu.h         | 439 +++++++++++++++++++++++++++
 include/configs/tb225.h          |  84 ++++++
 include/configs/tb243.h          | 124 ++++++++
 include/configs/tb327.h          | 156 ++++++++++
 include/configs/tb6xx.h          | 342 +++++++++++++++++++++
 include/configs/wah132.h         | 422 ++++++++++++++++++++++++++
 include/configs/wasp_emu.h       | 179 +++++++++++
 include/configs/wrt54g.h         | 173 +++++++++++
 60 files changed, 15663 insertions(+)
 create mode 100644 include/configs/ap101-2.6.31.h
 create mode 100644 include/configs/ap101-small.h
 create mode 100644 include/configs/ap101.h
 create mode 100644 include/configs/ap111-2.6.31.h
 create mode 100644 include/configs/ap111.h
 create mode 100644 include/configs/ap120.h
 create mode 100644 include/configs/ap121.h
 create mode 100644 include/configs/ap123.h
 create mode 100644 include/configs/ap81.h
 create mode 100644 include/configs/ap83.h
 create mode 100644 include/configs/ap91-2MB.h
 create mode 100644 include/configs/ap91-2x8.h
 create mode 100644 include/configs/ap91-router.h
 create mode 100644 include/configs/ap91.h
 create mode 100644 include/configs/ap93-hgw.h
 create mode 100644 include/configs/ap93.h
 create mode 100644 include/configs/ap94.h
 create mode 100644 include/configs/ap94min.h
 create mode 100644 include/configs/ap96.h
 create mode 100644 include/configs/ap98.h
 create mode 100644 include/configs/ap99-2.6.31.h
 create mode 100644 include/configs/ap99-hgw.h
 create mode 100644 include/configs/ap99-ivi.h
 create mode 100644 include/configs/ap99-small.h
 create mode 100644 include/configs/ap99.h
 create mode 100644 include/configs/aph126.h
 create mode 100644 include/configs/aph128.h
 create mode 100644 include/configs/aph131.h
 create mode 100644 include/configs/ar7100.h
 create mode 100644 include/configs/ar7240.h
 create mode 100644 include/configs/ar7240_emu.h
 create mode 100755 include/configs/board953x.h
 create mode 100644 include/configs/board955x.h
 create mode 100644 include/configs/cus136.h
 create mode 100644 include/configs/cus97.h
 create mode 100644 include/configs/db12x-extender.h
 create mode 100644 include/configs/db12x-hybrid.h
 create mode 100644 include/configs/db12x.h
 create mode 100644 include/configs/dhp1565.h
 create mode 100644 include/configs/hornet_emu.h
 create mode 100644 include/configs/mi93.h
 create mode 100644 include/configs/pb42.h
 create mode 100644 include/configs/pb44.h
 create mode 100644 include/configs/pb45.h
 create mode 100644 include/configs/pb47.h
 create mode 100644 include/configs/pb90.h
 create mode 100644 include/configs/pb92.h
 create mode 100644 include/configs/pb93.h
 create mode 100644 include/configs/pb9x-2.6.31.h
 create mode 100644 include/configs/pb9x-2x8.h
 create mode 100644 include/configs/pb9x.h
 create mode 100644 include/configs/reh132.h
 create mode 100644 include/configs/scoemu.h
 create mode 100644 include/configs/tb225.h
 create mode 100644 include/configs/tb243.h
 create mode 100644 include/configs/tb327.h
 create mode 100644 include/configs/tb6xx.h
 create mode 100644 include/configs/wah132.h
 create mode 100644 include/configs/wasp_emu.h
 create mode 100644 include/configs/wrt54g.h

diff --git a/include/configs/ap101-2.6.31.h b/include/configs/ap101-2.6.31.h
new file mode 100644
index 0000000..bdfb6dd
--- /dev/null
+++ b/include/configs/ap101-2.6.31.h
@@ -0,0 +1,243 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+
+#define ENABLE_DYNAMIC_CONF 1
+#define CONFIG_SUPPORT_AR7241 1
+
+#define CONFIG_AR7242_S16_PHY
+#define CONFIG_AG7240_GE0_IS_CONNECTED
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#ifndef ROOTFS
+#define ROOTFS 1
+#endif
+
+#if (ROOTFS == 2) /* make squashfs as rootfs type */
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+#else
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+
+#endif /* #if (ROOTFS == 2) */
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_200_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR values to support AR7241 */
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+//#define CFG_7241_DDR1_CONFIG_VAL      0x6fbc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+//#define CFG_7241_DDR1_MODE_VAL        0x23
+#define CFG_7241_DDR1_CONFIG2_VAL	0x9dd0e6a8
+
+
+#define CFG_7241_DDR2_CONFIG_VAL	0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT	0x133
+#define CFG_7241_DDR2_EXT_MODE_VAL	0x402
+#define CFG_7241_DDR2_MODE_VAL		0x33
+#define CFG_7241_DDR2_CONFIG2_VAL	0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR settings for AR7240 */
+
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#       define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#       define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL      0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada  
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.27
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0x9f7f1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap101-small.h b/include/configs/ap101-small.h
new file mode 100644
index 0000000..a2e4e26
--- /dev/null
+++ b/include/configs/ap101-small.h
@@ -0,0 +1,243 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+
+#define ENABLE_DYNAMIC_CONF 1
+#define CONFIG_SUPPORT_AR7241 1
+
+#define CONFIG_AR7242_S16_PHY
+#define CONFIG_AG7240_GE0_IS_CONNECTED
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#ifndef ROOTFS
+#define ROOTFS 1
+#endif
+
+#if (ROOTFS == 2) /* make squashfs as rootfs type */
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+#else
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+
+#endif /* #if (ROOTFS == 2) */
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_200_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR values to support AR7241 */
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+//#define CFG_7241_DDR1_CONFIG_VAL      0x6fbc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+//#define CFG_7241_DDR1_MODE_VAL        0x23
+#define CFG_7241_DDR1_CONFIG2_VAL	0x9dd0e6a8
+
+
+#define CFG_7241_DDR2_CONFIG_VAL	0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT	0x133
+#define CFG_7241_DDR2_EXT_MODE_VAL	0x402
+#define CFG_7241_DDR2_MODE_VAL		0x33
+#define CFG_7241_DDR2_CONFIG2_VAL	0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR settings for AR7240 */
+
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#       define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#       define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL      0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada  
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+
+
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.1
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0x9f7f1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap101.h b/include/configs/ap101.h
new file mode 100644
index 0000000..a2e4e26
--- /dev/null
+++ b/include/configs/ap101.h
@@ -0,0 +1,243 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+
+#define ENABLE_DYNAMIC_CONF 1
+#define CONFIG_SUPPORT_AR7241 1
+
+#define CONFIG_AR7242_S16_PHY
+#define CONFIG_AG7240_GE0_IS_CONNECTED
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#ifndef ROOTFS
+#define ROOTFS 1
+#endif
+
+#if (ROOTFS == 2) /* make squashfs as rootfs type */
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+#else
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+
+#endif /* #if (ROOTFS == 2) */
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_200_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR values to support AR7241 */
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+//#define CFG_7241_DDR1_CONFIG_VAL      0x6fbc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+//#define CFG_7241_DDR1_MODE_VAL        0x23
+#define CFG_7241_DDR1_CONFIG2_VAL	0x9dd0e6a8
+
+
+#define CFG_7241_DDR2_CONFIG_VAL	0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT	0x133
+#define CFG_7241_DDR2_EXT_MODE_VAL	0x402
+#define CFG_7241_DDR2_MODE_VAL		0x33
+#define CFG_7241_DDR2_CONFIG2_VAL	0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR settings for AR7240 */
+
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#       define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#       define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL      0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada  
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+
+
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.1
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0x9f7f1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap111-2.6.31.h b/include/configs/ap111-2.6.31.h
new file mode 100644
index 0000000..b49d96b
--- /dev/null
+++ b/include/configs/ap111-2.6.31.h
@@ -0,0 +1,244 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+
+#define ENABLE_DYNAMIC_CONF 1
+#define CONFIG_SUPPORT_AR7241 1
+
+#define CONFIG_AR7242_S16_PHY
+#define CONFIG_AG7240_GE0_IS_CONNECTED
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#ifndef ROOTFS
+#define ROOTFS 1
+#endif
+
+#if (ROOTFS == 2) /* make squashfs as rootfs type */
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+#else
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+
+#endif /* #if (ROOTFS == 2) */
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_200_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+
+#define CONFIG_BOOTCOMMAND "bootm 0x9f680000"
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR values to support AR7241 */
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+//#define CFG_7241_DDR1_CONFIG_VAL      0x6fbc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+//#define CFG_7241_DDR1_MODE_VAL        0x23
+#define CFG_7241_DDR1_CONFIG2_VAL	0x9dd0e6a8
+
+
+#define CFG_7241_DDR2_CONFIG_VAL	0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT	0x133
+#define CFG_7241_DDR2_EXT_MODE_VAL	0x402
+#define CFG_7241_DDR2_MODE_VAL		0x33
+#define CFG_7241_DDR2_CONFIG2_VAL	0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR settings for AR7240 */
+
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#       define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#       define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL      0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada  
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+#define CONFIG_PCI_CONFIG_DATA_IN_OTP
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+
+
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.1
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0x9f7f0000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        3
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap111.h b/include/configs/ap111.h
new file mode 100644
index 0000000..6a27741
--- /dev/null
+++ b/include/configs/ap111.h
@@ -0,0 +1,243 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+
+#define ENABLE_DYNAMIC_CONF 1
+#define CONFIG_SUPPORT_AR7241 1
+
+#define CONFIG_AR7242_S16_PHY
+#define CONFIG_AG7240_GE0_IS_CONNECTED
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#ifndef ROOTFS
+#define ROOTFS 1
+#endif
+
+#if (ROOTFS == 2) /* make squashfs as rootfs type */
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+#else
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+
+#endif /* #if (ROOTFS == 2) */
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_200_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR values to support AR7241 */
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+//#define CFG_7241_DDR1_CONFIG_VAL      0x6fbc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+//#define CFG_7241_DDR1_MODE_VAL        0x23
+#define CFG_7241_DDR1_CONFIG2_VAL	0x9dd0e6a8
+
+
+#define CFG_7241_DDR2_CONFIG_VAL	0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT	0x133
+#define CFG_7241_DDR2_EXT_MODE_VAL	0x402
+#define CFG_7241_DDR2_MODE_VAL		0x33
+#define CFG_7241_DDR2_CONFIG2_VAL	0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR settings for AR7240 */
+
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#       define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#       define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL      0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada  
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+
+
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.1
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0x9f3f0000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        3
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap120.h b/include/configs/ap120.h
new file mode 100644
index 0000000..b7ae77d
--- /dev/null
+++ b/include/configs/ap120.h
@@ -0,0 +1,476 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#ifndef FLASH_SIZE
+#define FLASH_SIZE		16
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000    /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_WASP_SUPPORT 1
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+// Set this to zero, for 16bit ddr2
+#define DDR2_32BIT_SUPPORT 	1
+
+/* S16 specific defines */
+
+#define CONFIG_AG7240_GE0_IS_CONNECTED 1
+
+/* NOR Flash start address */
+#define CFG_FLASH_BASE			0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#if CONFIG_MI124
+#define BC "bc=mi124_f1e\0"
+#endif
+#if CONFIG_AP123
+#define BC "bc=ap123\0"
+#endif
+
+#define __gen_cmd(n, a, f, ec, cc, el)		\
+	#n "=tftp 0x80060000 ${dir}" #f "&&"	\
+	#ec " " #a " " #el "&&"			\
+	#cc " $fileaddr " #a " $filesize\0"
+
+#define gen_cmd(n, a, f)			\
+	__gen_cmd(n, a, f, erase, cp.b, +$filesize)
+
+#define gen_cmd_el(n, a, f, el)			\
+	__gen_cmd(n, a, f, erase, cp.b, +el)
+
+#define nand_gen_cmd(n, a, f, s)		\
+	__gen_cmd(n, a, f, nand erase, nand write, s)
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR	// nand boot rom
+#		define ATH_U_CMD	nand_gen_cmd(lu, 0x0, 2fw.bin, 0x40000)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		define ATH_ROOT_DEV	"31:03"
+#		define CFG_ENV_ADDR	0x00040000
+#	else	//dual flash
+#		define ATH_U_CMD	gen_cmd(lu, 0x9f000000, u-boot.bin)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nor0:320k(u-boot-and-env),6336k(free);ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		define ATH_ROOT_DEV	"31:05"
+#		define CFG_ENV_ADDR	0x9f040000
+#	endif
+#	define ATH_F_FILE		db12x${bc}-nand-jffs2
+#	define ATH_F_LEN		0x700000
+#	define ATH_F_ADDR		0x1c0000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x80000
+#	define ATH_F_CMD		nand_gen_cmd(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#	define ATH_K_CMD		nand_gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE, 0x140000)
+#	define ATH_EXTRA_ENV		"bootdevice=0\0"
+#	define CONFIG_BOOTCOMMAND	"nboot 0x81000000 0 0x80000"
+#elif defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#	ifdef COMPRESSED_UBOOT
+#		define ATH_U_FILE	tuboot.bin
+#		define ATH_F_FILE	${bc}-jffs2
+#		define ATH_F_LEN	$filesize
+#		define ATH_F_ADDR	0x9f010000
+#		define ATH_K_FILE	vmlinux_${bc}.lzma.uImage
+#		define ATH_K_ADDR	0x9f300000
+		/*
+		 * For compressed uboot, environment sector is not used.
+		 * Hence the mtd partition indices get reduced by 1.
+		 * This conflicts with
+		 *	- minor no. for /dev/caldata in
+		 *		build/scripts/{board}/dev.txt
+		 *	- root=<rooot dev> kernel cmdline parameter
+		 * Hence, doing a dummy split of the u-boot partition
+		 * to maintain the same minor no. as in the normal u-boot.
+		 */
+#		define MTDPARTS_DEFAULT	"mtdparts=ath-nor0:32k(u-boot1),32k(u-boot2),3008k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#	else /* COMPRESSED_UBOOT */
+#		define ATH_U_FILE	u-boot.bin
+#		define ATH_F_FILE	${bc}-jffs2
+#		define ATH_F_LEN	$filesize
+#		define ATH_F_ADDR	0x9f050000
+#		define ATH_K_FILE	vmlinux_${bc}.lzma.uImage
+#		define ATH_K_ADDR	0x9f300000
+#		define MTDPARTS_DEFAULT	"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#	endif /* COMPRESSED_UBOOT */
+#elif defined(CONFIG_DB12X_P2P)
+#	define ATH_U_FILE		u-boot.bin
+#	define ATH_F_FILE		db12x-p2p${bc}-jffs2
+#	define ATH_F_LEN		0x630000
+#	define ATH_F_ADDR		0x9f050000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x9f680000
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#else
+#	define ATH_U_FILE		u-boot.bin
+#	define ATH_F_FILE		ap120-jffs2
+#	define ATH_F_LEN		0x630000
+#	define ATH_F_ADDR		0x9f050000
+#	define ATH_K_FILE		vmlinux.lzma.uImage
+#	define ATH_K_ADDR		0x9f680000
+#if (FLASH_SIZE == 16) 
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k@0xff0000(ART)"
+#else/* 8M */
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#endif
+#endif /*CONFIG_MI124*/
+#ifndef ATH_ROOT_DEV
+#	define ATH_ROOT_DEV	"31:02"
+#endif
+
+#ifndef ATH_EXTRA_ENV
+#	define ATH_EXTRA_ENV
+#endif
+
+#ifndef ATH_U_CMD
+#	define ATH_U_CMD	gen_cmd(lu, 0x9f000000, ATH_U_FILE)
+#endif
+
+#ifndef ATH_F_CMD
+#	define ATH_F_CMD	gen_cmd_el(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#endif
+
+#ifndef ATH_K_CMD
+#	define ATH_K_CMD	gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE)
+#endif
+
+#define CONFIG_EXTRA_ENV_SETTINGS	\
+	"dir=\0" ATH_U_CMD ATH_F_CMD ATH_K_CMD ""
+
+#define	CONFIG_BOOTARGS		"console=ttyS0,115200 root=" ATH_ROOT_DEV " rootfstype=jffs2 init=/sbin/init " MTDPARTS_DEFAULT
+
+#undef CFG_PLL_FREQ
+
+//#define CFG_PLL_FREQ	CFG_PLL_600_266_133
+//#define CFG_PLL_FREQ	CFG_PLL_600_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_566_550_275
+//#define CFG_PLL_FREQ	CFG_PLL_566_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_600_332_166
+//#define CFG_PLL_FREQ	CFG_PLL_566_475_237
+//#define CFG_PLL_FREQ	CFG_PLL_600_575_287
+//#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_533_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_450_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_500_1G_250
+//#define CFG_PLL_FREQ	CFG_PLL_600_550_1_1G_275
+//#define CFG_PLL_FREQ	CFG_PLL_600_350_175
+//#define CFG_PLL_FREQ	CFG_PLL_600_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_600_1_2G_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_300_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_500_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_400_200_200
+#if !defined(CONFIG_AP123) && !defined(CONFIG_MI124)
+#define CFG_PLL_FREQ    CFG_PLL_560_480_240
+#else
+#define CFG_PLL_FREQ    CFG_PLL_533_400_200
+#endif
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_500_400_200)
+#   define CFG_HZ          (500000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_400_200) || (CFG_PLL_FREQ == CFG_PLL_600_450_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_600_300) || (CFG_PLL_FREQ == CFG_PLL_600_550_275) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_332_166) || (CFG_PLL_FREQ == CFG_PLL_600_575_287) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_525_262) || (CFG_PLL_FREQ == CFG_PLL_600_332_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_266_133) || (CFG_PLL_FREQ == CFG_PLL_600_266_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_650_325) ||  (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_1G_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_550_1_1G_275)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_350_175)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_300_150)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_533_400_200) || (CFG_PLL_FREQ == CFG_PLL_533_500_250)
+#   define CFG_HZ          (533000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_700_400_200)
+#   define CFG_HZ          (700000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_650_600_300)
+#   define CFG_HZ          (650000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_560_480_240)
+#   define CFG_HZ          (560000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_566_475_237) || (CFG_PLL_FREQ == CFG_PLL_566_450_225) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_550_275) || (CFG_PLL_FREQ == CFG_PLL_566_525_262) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_400_200) || (CFG_PLL_FREQ == CFG_PLL_566_500_250)
+#   define CFG_HZ          (566000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef CONFIG_ATH_NAND_SUPPORT
+#	define CFG_ENV_ADDR		0x9f040000
+#	if (FLASH_SIZE == 16)
+#		define CONFIG_BOOTCOMMAND "bootm 0x9f680000"
+#	else  /* FLASH_SIZE == 16 */
+#		ifdef COMPRESSED_UBOOT
+#			if (FLASH_SIZE == 4)
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#			else  /* FLASH_SIZE == 4 */
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#			endif  /* FLASH_SIZE == 4 */
+#		else /* COMPRESSED_UBOOT */
+#			if defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#			else
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f680000"
+#			endif
+#		endif  /* COMPRESSED_UBOOT */
+#	endif  /* FLASH_SIZE == 16 */
+#endif
+
+
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR settings for WASP */
+
+#define CFG_DDR_REFRESH_VAL     0x4270
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL     0x9dd0e6a8
+
+
+
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32	0xff
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16	0xffff
+
+#if DDR2_32BIT_SUPPORT
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32
+#else
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16
+#endif
+
+#define CFG_DDR1_RD_DATA_THIS_CYCLE_VAL		0xffff
+#define CFG_SDRAM_RD_DATA_THIS_CYCLE_VAL	0xffffffff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define ATH_CFG_COMMANDS	((			\
+				CONFIG_CMD_DFL	|	\
+				CFG_CMD_DHCP	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_PCI	|	\
+				CFG_CMD_FLS	|	\
+				CFG_CMD_MII	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET	|	\
+				CFG_CMD_ENV	|	\
+				CFG_CMD_PLL	|	\
+				CFG_CMD_FLASH	|	\
+				CFG_CMD_RUN	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_DDR	|	\
+				CFG_CMD_ETHREG		\
+				) & ~(			\
+				CFG_CMD_IMLS	|	\
+				CFG_CMD_FLASH		\
+				))
+#else
+#define ATH_CFG_COMMANDS	(CONFIG_CMD_DFL	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET)
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR
+#		define CFG_ENV_IS_IN_NAND	1
+#		define CFG_ENV_OFFSET		0x40000u
+#		define CFG_ENV_SIZE		0x40000u
+#		define ATH_EXTRA_CMD		CFG_CMD_NAND
+#	else
+#		define CFG_ENV_IS_IN_FLASH	1
+#		define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+#		define ATH_EXTRA_CMD		(CFG_CMD_NAND | CFG_CMD_FLASH)
+#	endif
+#	define NAND_MAX_CHIPS			1
+#	define CFG_MAX_NAND_DEVICE		1
+#else
+#	define ATH_EXTRA_CMD			CFG_CMD_FLASH
+#	define CFG_ENV_IS_IN_FLASH		1
+#	define CFG_ENV_SIZE			CFG_FLASH_SECTOR_SIZE
+#endif
+
+#define DEBUG
+
+#ifdef COMPRESSED_UBOOT
+#undef  CFG_ENV_IS_IN_FLASH
+#undef  CFG_ENV_IS_IN_NAND
+#define CFG_ENV_IS_NOWHERE		1
+#endif
+
+#define CONFIG_COMMANDS			(ATH_CFG_COMMANDS | ATH_EXTRA_CMD)
+
+#define CONFIG_IPADDR			192.168.1.1
+#define CONFIG_SERVERIP			192.168.1.10
+#define CONFIG_ETHADDR			0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN	1
+
+
+#define CFG_PHY_ADDR			0
+#define CFG_GMII			0
+#define CFG_MII0_RMII			1
+#define CFG_AG7100_GE0_RMII		1
+
+#define CFG_BOOTM_LEN			(16 << 20) /* 16 MB */
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2		"hush>"
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define BOARDCAL                         (CFG_FLASH_BASE + CFG_FLASH_SIZE -0x10000)
+#define WLANCAL                         (BOARDCAL +0x1000)
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap121.h b/include/configs/ap121.h
new file mode 100644
index 0000000..1401e30
--- /dev/null
+++ b/include/configs/ap121.h
@@ -0,0 +1,335 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+#include <config.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ *-----------------------------------------------------------------------
+ */
+ 
+#if (FLASH_SIZE == 4)
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+
+#define ENABLE_DYNAMIC_CONF 1
+
+#else
+/* For 2 MB flash */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      32     /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00200000 /* Total flash size */
+#endif
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+
+#if (FLASH_SIZE == 4)
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),1216k(rootfs),640k(uImage),64k(NVRAM),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),1152k(rootfs),704k(uImage),64k(NVRAM),64k(ART)"
+#endif
+
+#if (BOARD_STRING == 1)
+#undef CONFIG_BOOTARGS
+#undef MTDPARTS_DEFAULT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),3008k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),3008k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#endif
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_HORNET_EMU
+    #ifdef CONFIG_HORNET_EMU_HARDI_WLAN
+    #define CFG_PLL_FREQ	CFG_PLL_48_48_24
+    #else
+    #define CFG_PLL_FREQ	CFG_PLL_80_80_40
+    #endif
+#else
+//#define CFG_PLL_FREQ	CFG_PLL_300_300_150
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+#endif
+
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#define CPU_PLL_DITHER_FRAC_VAL 0x001003e8
+#define CPU_CLK_CONTROL_VAL2 0x00008000
+
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (300000000/2)
+    #if CONFIG_40MHZ_XTAL_SUPPORT
+        #define CPU_PLL_CONFIG_VAL1 0x40813C00
+        #define CPU_PLL_CONFIG_VAL2 0x00813C00    
+    #else
+        #define CPU_PLL_CONFIG_VAL1 0x40816000
+        #define CPU_PLL_CONFIG_VAL2 0x00816000
+    #endif
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#	define CFG_HZ          (350000000/2)
+    #if CONFIG_40MHZ_XTAL_SUPPORT
+        #undef CPU_PLL_DITHER_FRAC_VAL
+        #define CPU_PLL_DITHER_FRAC_VAL 0x001803E8
+        #define CPU_PLL_CONFIG_VAL1 0x40814600
+        #define CPU_PLL_CONFIG_VAL2 0x00814600    
+    #else
+        #define CPU_PLL_CONFIG_VAL1 0x40817000
+        #define CPU_PLL_CONFIG_VAL2 0x00817000
+    #endif
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+    #if CONFIG_40MHZ_XTAL_SUPPORT
+        #define CPU_PLL_CONFIG_VAL1 0x40815000
+        #define CPU_PLL_CONFIG_VAL2 0x00815000    
+    #else
+        #define CPU_PLL_CONFIG_VAL1 0x40818000
+        #define CPU_PLL_CONFIG_VAL2 0x00818000
+    #endif
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#	define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#	define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#	define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_362_362_181)
+#	define CFG_HZ          (326500000/2)
+    #define CPU_PLL_CONFIG_VAL1 0x40817400
+    #define CPU_PLL_CONFIG_VAL2 0x00817400
+#elif (CFG_PLL_FREQ == CFG_PLL_80_80_40)
+#	define CFG_HZ          (80000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_64_64_32)
+#	define CFG_HZ          (64000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_48_48_24)
+#	define CFG_HZ          (48000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_32_32_16)
+#	define CFG_HZ          (32000000/2)
+#endif
+
+#if CONFIG_40MHZ_XTAL_SUPPORT
+    #define CPU_PLL_SETTLE_TIME_VAL    0x00000550
+#else
+    #define CPU_PLL_SETTLE_TIME_VAL    0x00000352
+#endif
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		0x10000
+
+#if (FLASH_SIZE == 4)
+    #define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else
+    #ifdef VXWORKS_UBOOT
+       #define CONFIG_BOOTCOMMAND "bootm 0x9f050000"
+    #else
+       #define CONFIG_BOOTCOMMAND "bootm 0x9f140000"
+    #endif
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#if CONFIG_40MHZ_XTAL_SUPPORT
+#define CFG_DDR_REFRESH_VAL     0x4270
+#else
+#define CFG_DDR_REFRESH_VAL     0x4186
+#endif
+#define CFG_DDR_CONFIG_VAL      0x7fbc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#	define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#	define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+//#define CFG_DDR_CONFIG2_VAL	 0x99d0e6a8     // HORNET 1.0
+#define CFG_DDR_CONFIG2_VAL	 0x9dd0e6a8         // HORNET 1.1
+
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+#ifndef CONFIG_HORNET_EMU
+#define CFG_DDR_TAP0_VAL        0x8
+#define CFG_DDR_TAP1_VAL        0x9
+#else
+#define CFG_DDR_TAP0_VAL        0x8
+#define CFG_DDR_TAP1_VAL        0x9
+#endif
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+/* DDR value from Flash */
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+#ifndef COMPRESSED_UBOOT
+#	ifndef CONFIG_MACH_HORNET
+#		define CONFIG_PCI 1
+#	endif
+#else
+#	define ATH_NO_PCI_INIT
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV |	\
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_ETHREG ))
+#elif defined(VXWORKS_UBOOT)
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_MII | CFG_CMD_ELF))
+#else
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_MII))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CFG_ATHRS26_PHY  1
+
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.10
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+
+#ifdef CONFIG_HORNET_EMU
+#define CFG_AG7240_NMACS 1
+#else
+#define CFG_AG7240_NMACS 2
+#endif
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#if (FLASH_SIZE == 4)
+#define WLANCAL                        0xbf3f1000
+#define BOARDCAL                       0xbf3f0000
+#else
+#define WLANCAL                        0xbf1f1000
+#define BOARDCAL                       0xbf1f0000
+#endif
+
+#define ATHEROS_PRODUCT_ID             138
+#define CAL_SECTOR                     (CFG_MAX_FLASH_SECT - 1)
+
+/* For Kite, only PCI-e interface is valid */
+#define AR7240_ART_PCICFG_OFFSET        3
+
+
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap123.h b/include/configs/ap123.h
new file mode 100644
index 0000000..49d187f
--- /dev/null
+++ b/include/configs/ap123.h
@@ -0,0 +1,474 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#ifndef FLASH_SIZE
+#define FLASH_SIZE		8
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000    /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_WASP_SUPPORT 1
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+// Set this to zero, for 16bit ddr2
+#define DDR2_32BIT_SUPPORT 	1
+
+/* S16 specific defines */
+
+#define CONFIG_AG7240_GE0_IS_CONNECTED 1
+
+/* NOR Flash start address */
+#define CFG_FLASH_BASE			0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#if CONFIG_MI124
+#define BC "bc=mi124_f1e\0"
+#endif
+#if CONFIG_AP123
+#define BC "bc=ap123\0"
+#endif
+
+#define __gen_cmd(n, a, f, ec, cc, el)		\
+	#n "=tftp 0x80060000 ${dir}" #f "&&"	\
+	#ec " " #a " " #el "&&"			\
+	#cc " $fileaddr " #a " $filesize\0"
+
+#define gen_cmd(n, a, f)			\
+	__gen_cmd(n, a, f, erase, cp.b, +$filesize)
+
+#define gen_cmd_el(n, a, f, el)			\
+	__gen_cmd(n, a, f, erase, cp.b, +el)
+
+#define nand_gen_cmd(n, a, f, s)		\
+	__gen_cmd(n, a, f, nand erase, nand write, s)
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR	// nand boot rom
+#		define ATH_U_CMD	nand_gen_cmd(lu, 0x0, 2fw.bin, 0x40000)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		define ATH_ROOT_DEV	"31:03"
+#		define CFG_ENV_ADDR	0x00040000
+#	else	//dual flash
+#		define ATH_U_CMD	gen_cmd(lu, 0x9f000000, u-boot.bin)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nor0:320k(u-boot-and-env),6336k(free);ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		define ATH_ROOT_DEV	"31:05"
+#		define CFG_ENV_ADDR	0x9f040000
+#	endif
+#	define ATH_F_FILE		db12x${bc}-nand-jffs2
+#	define ATH_F_LEN		0x700000
+#	define ATH_F_ADDR		0x1c0000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x80000
+#	define ATH_F_CMD		nand_gen_cmd(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#	define ATH_K_CMD		nand_gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE, 0x140000)
+#	define ATH_EXTRA_ENV		"bootdevice=0\0"
+#	define CONFIG_BOOTCOMMAND	"nboot 0x81000000 0 0x80000"
+#elif defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#	ifdef COMPRESSED_UBOOT
+#		define ATH_U_FILE	tuboot.bin
+#		define ATH_F_FILE	${bc}-jffs2
+#		define ATH_F_LEN	$filesize
+#		define ATH_F_ADDR	0x9f010000
+#		define ATH_K_FILE	vmlinux_${bc}.lzma.uImage
+#		define ATH_K_ADDR	0x9f300000
+		/*
+		 * For compressed uboot, environment sector is not used.
+		 * Hence the mtd partition indices get reduced by 1.
+		 * This conflicts with
+		 *	- minor no. for /dev/caldata in
+		 *		build/scripts/{board}/dev.txt
+		 *	- root=<rooot dev> kernel cmdline parameter
+		 * Hence, doing a dummy split of the u-boot partition
+		 * to maintain the same minor no. as in the normal u-boot.
+		 */
+#		define MTDPARTS_DEFAULT	"mtdparts=ath-nor0:32k(u-boot1),32k(u-boot2),3008k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#	else /* COMPRESSED_UBOOT */
+#		define ATH_U_FILE	u-boot.bin
+#		define ATH_F_FILE	${bc}-jffs2
+#		define ATH_F_LEN	$filesize
+#		define ATH_F_ADDR	0x9f050000
+#		define ATH_K_FILE	vmlinux_${bc}.lzma.uImage
+#		define ATH_K_ADDR	0x9f300000
+#		define MTDPARTS_DEFAULT	"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#	endif /* COMPRESSED_UBOOT */
+#elif defined(CONFIG_DB12X_P2P)
+#	define ATH_U_FILE		u-boot.bin
+#	define ATH_F_FILE		db12x-p2p${bc}-jffs2
+#	define ATH_F_LEN		0x630000
+#	define ATH_F_ADDR		0x9f050000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x9f680000
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#else
+#	define ATH_U_FILE		u-boot.bin
+#	define ATH_F_FILE		db12x${bc}-jffs2
+#	define ATH_F_LEN		0x630000
+#	define ATH_F_ADDR		0x9f050000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x9f680000
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#endif /*CONFIG_MI124*/
+
+#ifndef ATH_ROOT_DEV
+#	define ATH_ROOT_DEV	"31:02"
+#endif
+
+#ifndef ATH_EXTRA_ENV
+#	define ATH_EXTRA_ENV
+#endif
+
+#ifndef ATH_U_CMD
+#	define ATH_U_CMD	gen_cmd(lu, 0x9f000000, ATH_U_FILE)
+#endif
+
+#ifndef ATH_F_CMD
+#	define ATH_F_CMD	gen_cmd_el(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#endif
+
+#ifndef ATH_K_CMD
+#	define ATH_K_CMD	gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE)
+#endif
+
+#define CONFIG_EXTRA_ENV_SETTINGS	\
+	"dir=\0" ATH_U_CMD ATH_F_CMD ATH_K_CMD ""
+
+#define	CONFIG_BOOTARGS		"console=ttyS0,115200 root=" ATH_ROOT_DEV " rootfstype=squashfs init=/sbin/init " MTDPARTS_DEFAULT
+
+#undef CFG_PLL_FREQ
+
+//#define CFG_PLL_FREQ	CFG_PLL_600_266_133
+//#define CFG_PLL_FREQ	CFG_PLL_600_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_566_550_275
+//#define CFG_PLL_FREQ	CFG_PLL_566_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_600_332_166
+//#define CFG_PLL_FREQ	CFG_PLL_566_475_237
+//#define CFG_PLL_FREQ	CFG_PLL_600_575_287
+//#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_533_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_450_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_500_1G_250
+//#define CFG_PLL_FREQ	CFG_PLL_600_550_1_1G_275
+//#define CFG_PLL_FREQ	CFG_PLL_600_350_175
+//#define CFG_PLL_FREQ	CFG_PLL_600_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_600_1_2G_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_300_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_500_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_400_200_200
+#if !defined(CONFIG_AP123) && !defined(CONFIG_MI124)
+#define CFG_PLL_FREQ    CFG_PLL_560_480_240
+#else
+#define CFG_PLL_FREQ    CFG_PLL_533_400_200
+#endif
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_500_400_200)
+#   define CFG_HZ          (500000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_400_200) || (CFG_PLL_FREQ == CFG_PLL_600_450_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_600_300) || (CFG_PLL_FREQ == CFG_PLL_600_550_275) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_332_166) || (CFG_PLL_FREQ == CFG_PLL_600_575_287) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_525_262) || (CFG_PLL_FREQ == CFG_PLL_600_332_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_266_133) || (CFG_PLL_FREQ == CFG_PLL_600_266_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_650_325) ||  (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_1G_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_550_1_1G_275)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_350_175)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_300_150)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_533_400_200) || (CFG_PLL_FREQ == CFG_PLL_533_500_250)
+#   define CFG_HZ          (533000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_700_400_200)
+#   define CFG_HZ          (700000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_650_600_300)
+#   define CFG_HZ          (650000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_560_480_240)
+#   define CFG_HZ          (560000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_566_475_237) || (CFG_PLL_FREQ == CFG_PLL_566_450_225) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_550_275) || (CFG_PLL_FREQ == CFG_PLL_566_525_262) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_400_200) || (CFG_PLL_FREQ == CFG_PLL_566_500_250)
+#   define CFG_HZ          (566000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef CONFIG_ATH_NAND_SUPPORT
+#	define CFG_ENV_ADDR		0x9f040000
+#	if (FLASH_SIZE == 16)
+#		define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#	else  /* FLASH_SIZE == 16 */
+#		ifdef COMPRESSED_UBOOT
+#			if (FLASH_SIZE == 4)
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#			else  /* FLASH_SIZE == 4 */
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#			endif  /* FLASH_SIZE == 4 */
+#		else /* COMPRESSED_UBOOT */
+#			if defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#			else
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f680000"
+#			endif
+#		endif  /* COMPRESSED_UBOOT */
+#	endif  /* FLASH_SIZE == 16 */
+#endif
+
+
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR settings for WASP */
+
+#define CFG_DDR_REFRESH_VAL     0x4270
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL     0x9dd0e6a8
+
+
+
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32	0xff
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16	0xffff
+
+#if DDR2_32BIT_SUPPORT
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32
+#else
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16
+#endif
+
+#define CFG_DDR1_RD_DATA_THIS_CYCLE_VAL		0xffff
+#define CFG_SDRAM_RD_DATA_THIS_CYCLE_VAL	0xffffffff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define ATH_CFG_COMMANDS	((			\
+				CONFIG_CMD_DFL	|	\
+				CFG_CMD_DHCP	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_PCI	|	\
+				CFG_CMD_FLS	|	\
+				CFG_CMD_MII	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET	|	\
+				CFG_CMD_ENV	|	\
+				CFG_CMD_PLL	|	\
+				CFG_CMD_FLASH	|	\
+				CFG_CMD_RUN	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_DDR	|	\
+				CFG_CMD_ETHREG		\
+				) & ~(			\
+				CFG_CMD_IMLS	|	\
+				CFG_CMD_FLASH		\
+				))
+#else
+#define ATH_CFG_COMMANDS	(CONFIG_CMD_DFL	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET)
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR
+#		define CFG_ENV_IS_IN_NAND	1
+#		define CFG_ENV_OFFSET		0x40000u
+#		define CFG_ENV_SIZE		0x40000u
+#		define ATH_EXTRA_CMD		CFG_CMD_NAND
+#	else
+#		define CFG_ENV_IS_IN_FLASH	1
+#		define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+#		define ATH_EXTRA_CMD		(CFG_CMD_NAND | CFG_CMD_FLASH)
+#	endif
+#	define NAND_MAX_CHIPS			1
+#	define CFG_MAX_NAND_DEVICE		1
+#else
+#	define ATH_EXTRA_CMD			CFG_CMD_FLASH
+#	define CFG_ENV_IS_IN_FLASH		1
+#	define CFG_ENV_SIZE			CFG_FLASH_SECTOR_SIZE
+#endif
+
+#define DEBUG
+
+#ifdef COMPRESSED_UBOOT
+#undef  CFG_ENV_IS_IN_FLASH
+#undef  CFG_ENV_IS_IN_NAND
+#define CFG_ENV_IS_NOWHERE		1
+#endif
+
+#define CONFIG_COMMANDS			(ATH_CFG_COMMANDS | ATH_EXTRA_CMD)
+
+#define CONFIG_IPADDR			192.168.1.1
+#define CONFIG_SERVERIP			192.168.1.10
+#define CONFIG_ETHADDR			0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN	1
+
+
+#define CFG_PHY_ADDR			0
+#define CFG_GMII			0
+#define CFG_MII0_RMII			1
+#define CFG_AG7100_GE0_RMII		1
+
+#define CFG_BOOTM_LEN			(16 << 20) /* 16 MB */
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2		"hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0x9fff1000
+#define BOARDCAL                        0x9fff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap81.h b/include/configs/ap81.h
new file mode 100644
index 0000000..b0e1e2c
--- /dev/null
+++ b/include/configs/ap81.h
@@ -0,0 +1,191 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7100.h>
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+
+#ifndef BUILD_CONFIG_OVERRIDE
+#	define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+#ifdef CFG_HOWL_1_2
+#define AR9100_FLASH_CONFIG  0xb80f0004
+#endif
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0xbf000000
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#ifndef BUILD_CONFIG_OVERRIDE
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7100-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),1024k(uImage)"
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7100-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),1024k(uImage)"
+#endif
+
+#undef CFG_PLL_FREQ
+#ifdef CONFIG_AP81_CUS109
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+#else
+#define CFG_PLL_FREQ	CFG_PLL_400_400_100
+#endif
+
+/* Atheros Header configuration */
+
+#ifdef CONFIG_AP81_CUS109
+#define CFG_ATHRF1_PHY  1
+#define CFG_DUAL_F1E_PHY 1
+#else
+#define CFG_ATHRS26_PHY  1
+#define CFG_ATHRHDR_REG 1
+#endif
+
+#ifdef CFG_ATHRHDR_REG
+#undef CFG_SWITCH_FREQ
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ    CFG_PLL_400_400_200
+#define CFG_ATHRHDR_EN 1
+#define ATHRHDR_LEN   2
+#define ATHRHDR_MAX_DATA  10
+#endif
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0xbf040000
+#define CFG_ENV_SIZE		0x10000
+
+#ifndef BUILD_CONFIG_OVERRIDE
+#	define CONFIG_BOOTCOMMAND "bootm 0xbf550000"
+#endif
+//#define CONFIG_FLASH_16BIT
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#define CFG_DDR_REFRESH_VAL     0x4c00
+#define CFG_DDR_CONFIG_VAL      0x67bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x161
+#define CFG_DDR_EXT_MODE_VAL    0x2
+#define CFG_DDR_MODE_VAL        0x61
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#define CFG_DDR_REFRESH_VAL     0x5f00
+#define CFG_DDR_CONFIG_VAL      0x77bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x131
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x31
+#endif
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL			    0x83d1f6a2
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0xffff
+
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | \
+            CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET |\
+   CFG_CMD_ENV | CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB \
+   | CFG_CMD_ELF ))
+
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.27
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#ifdef CONFIG_AP81_CUS109
+#define CFG_PHY_ADDR            0
+#define CFG_AG7100_NMACS        2
+#define CFG_GMII                0
+#define CFG_MII0_RMII           0
+#define CFG_MII0_RGMII          1
+#define CFG_AG7100_GE0_RGMII    1
+#define CFG_AG7100_GE1_RGMII    1
+#else
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7100_NMACS 1
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+#endif
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap83.h b/include/configs/ap83.h
new file mode 100644
index 0000000..87fe4ff
--- /dev/null
+++ b/include/configs/ap83.h
@@ -0,0 +1,190 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7100.h>
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+//#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+#define CFG_FLASH_ADDR0         (0x5555)  		
+#define CFG_FLASH_ADDR1         (0x2AAA)
+
+#define CFG_HOWL_1_2 1
+
+#ifdef CFG_HOWL_1_2
+#define AR9100_FLASH_CONFIG  0xb80f0004
+#endif
+
+
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0xbf000000
+
+#undef CONFIG_ROOTFS_RD
+#undef CONFIG_ROOTFS_FLASH
+#undef CONFIG_BOOTARGS_FL
+#undef CONFIG_BOOTARGS_RD
+#undef CONFIG_BOOTARGS
+#undef  MTDPARTS_DEFAULT
+#undef  MTDIDS_DEFAULT
+
+#define CONFIG_ROOTFS_FLASH
+#define CONFIG_BOOTARGS CONFIG_BOOTARGS_FL
+
+#define CONFIG_BOOTARGS_RD     "console=ttyS0,115200 root=01:00 rd_start=0x80600000 rd_size=5242880 init=/sbin/init mtdparts=ar9100-nor0:256k(u-boot),64k(u-boot-env),4096k(rootfs),2048k(uImage)"
+
+/* XXX - putting rootfs in last partition results in jffs errors */
+
+#ifndef CFG_HOWL_1_2
+#define CONFIG_BOOTARGS_FL     "console=ttyS0,115200 root=31:00 rootfstype=jffs2 init=/sbin/init mtdparts=ar9100-nor0:4096k(rootfs),256k(u-boot),128k(u-boot-env),1024k(uImage)"
+#else
+#define CONFIG_BOOTARGS_FL     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar9100-nor0:256k(u-boot),128k(u-boot-env),4096k(rootfs),1024k(uImage)"
+#endif
+
+#define MTDPARTS_DEFAULT    "mtdparts=ar9100-nor0:4096k(rootfs),256k(u-boot),128k(u-boot-env),1024k(uImage)"
+#define MTDIDS_DEFAULT      "nor0=ar9100-nor0"
+
+
+//#define CFG_FLASH_BASE		    0xbfc00000 /* Temp WAR as remap is not on by default */
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200)
+#	define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_360_360_180)
+#	define CFG_HZ          (360000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0xbf040000
+#define CFG_ENV_SIZE		0x20000
+
+#define CONFIG_BOOTCOMMAND "bootm 0xbf460000"
+//#define CONFIG_FLASH_16BIT
+
+/* define default CFG_PLL_FREQ for ap83 */
+#define CFG_PLL_FREQ CFG_PLL_400_400_200
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#define CFG_DDR_REFRESH_VAL     0x4c00
+#define CFG_DDR_CONFIG_VAL      0x67bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x161
+#define CFG_DDR_EXT_MODE_VAL    0x2
+#define CFG_DDR_MODE_VAL        0x61
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_360_360_180)
+#define CFG_DDR_REFRESH_VAL     0x5f00
+#define CFG_DDR_CONFIG_VAL      0x77bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x131
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x31
+#endif
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL			    0x83d1f6a2
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0xffff
+
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | \
+            CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET |\
+   CFG_CMD_ENV | CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB \
+   | CFG_CMD_ELF ))
+
+
+#define CONFIG_IPADDR		192.168.1.10
+#define CONFIG_SERVERIP		192.168.1.11
+#define CONFIG_ETHADDR		00:00:00:00:00:00
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+#define CONFIG_PHY_GIGE       1              /* GbE speed/duplex detect */
+
+//#define CFG_VSC8601_PHY
+#define CFG_VITESSE_8601_7395_PHY 1
+#define CFG_AG7100_NMACS 2
+#define CONFIG_AR9100 1
+
+/*
+ * Uncomment the #define given below for building u-boot
+ * for DNI AP83 board with vitesse switch with no phy
+ */
+// #define CFG_VITESSE_73XX_NOPHY 1
+
+//#define CFG_PHY_ADDR 0x14  /* Port 4 */
+#define CFG_PHY_ADDR 0  /* Port 4 */
+#define CFG_GMII     0
+#define CFG_MII0_RGMII             1
+#define CFG_AG7100_GE0_RGMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap91-2MB.h b/include/configs/ap91-2MB.h
new file mode 100644
index 0000000..c0e208c
--- /dev/null
+++ b/include/configs/ap91-2MB.h
@@ -0,0 +1,214 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ *-----------------------------------------------------------------------
+ */
+#ifndef COMPRESSED_UBOOT
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#else
+/* For 2 MB flash */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      32     /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00200000 /* Total flash size */
+#endif  /* #ifndef COMPRESSED_UBOOT */
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),1280k(rootfs),576k(uImage),64k(NVRAM),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),1280k(rootfs),576k(uImage),64k(NVRAM),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#endif /* #ifdef COMPRESSED_UBOOT */
+
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ	CFG_PLL_350_350_175
+
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#	define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#	define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#	define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#	define CFG_HZ          (420000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		0x10000
+
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else 
+#define CONFIG_BOOTCOMMAND "bootm 0x9f150000"
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#	define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#	define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_PCI 1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV |	\
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_ETHREG ))
+#else
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CFG_ATHRS26_PHY  1
+
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.1
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                        0xbfff1000
+#define BOARDCAL                       0xbfff0000
+#define ATHEROS_PRODUCT_ID             138
+#define CAL_SECTOR                     (CFG_MAX_FLASH_SECT - 1)
+
+/* For Kite, only PCI-e interface is valid */
+#define AR7240_ART_PCICFG_OFFSET        3
+
+
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap91-2x8.h b/include/configs/ap91-2x8.h
new file mode 100644
index 0000000..0d48d38
--- /dev/null
+++ b/include/configs/ap91-2x8.h
@@ -0,0 +1,214 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ *-----------------------------------------------------------------------
+ */
+#ifndef COMPRESSED_UBOOT
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#else
+/* For 2 MB flash */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      32     /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00200000 /* Total flash size */
+#endif  /* #ifndef COMPRESSED_UBOOT */
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),1088k(rootfs),704k(uImage),64k(NVRAM),64k(ART) mem=8M"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),1088k(rootfs),704k(uImage),64k(NVRAM),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#endif /* #ifdef COMPRESSED_UBOOT */
+
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ	CFG_PLL_350_350_175
+
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#	define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#	define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#	define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#	define CFG_HZ          (420000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		0x10000
+
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else 
+#define CONFIG_BOOTCOMMAND "bootm 0x9f120000"
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#	define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#	define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_PCI 1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV |	\
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_ETHREG ))
+#else
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CFG_ATHRS26_PHY  1
+
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.1
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                        0xbfff1000
+#define BOARDCAL                       0xbfff0000
+#define ATHEROS_PRODUCT_ID             138
+#define CAL_SECTOR                     (CFG_MAX_FLASH_SECT - 1)
+
+/* For Kite, only PCI-e interface is valid */
+#define AR7240_ART_PCICFG_OFFSET        3
+
+
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap91-router.h b/include/configs/ap91-router.h
new file mode 100644
index 0000000..19a03ab
--- /dev/null
+++ b/include/configs/ap91-router.h
@@ -0,0 +1,195 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ *-----------------------------------------------------------------------
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),3136k(rootfs),768k(uImage),64k(mib0),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),2944k(rootfs),1024k(uImage),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2880k(rootfs),768k(uImage),64k(mib0),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),1024k(uImage)"
+#endif /* #ifdef COMPRESSED_UBOOT */
+
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ	CFG_PLL_350_350_175
+
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#	define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#	define CFG_HZ          (400000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		0x10000
+
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else 
+#define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_PCI 1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV |	\
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_ETHREG ))
+#else
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CFG_ATHRS26_PHY  1
+
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.1
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                        0xbfff1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              138
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Kite, only PCI-e interface is valid */
+#define AR7240_ART_PCICFG_OFFSET        3
+
+
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap91.h b/include/configs/ap91.h
new file mode 100644
index 0000000..1fb8fe6
--- /dev/null
+++ b/include/configs/ap91.h
@@ -0,0 +1,240 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#ifndef COMPRESSED_UBOOT
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+
+#define ENABLE_DYNAMIC_CONF 1
+#else
+/* For 2 MB flash */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      32     /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00200000 /* Total flash size */
+#endif  /* #ifndef COMPRESSED_UBOOT */
+
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),1344k(rootfs),576k(uImage),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),1344k(rootfs),576k(uImage),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#endif /* #ifdef COMPRESSED_UBOOT */
+
+
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ	CFG_PLL_350_350_175
+
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#	define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#	define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#	define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#	define CFG_HZ          (420000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		0x10000
+
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else 
+#define CONFIG_BOOTCOMMAND "bootm 0x9f160000"
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#	define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#	define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+/* DDR value from Flash */
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada  
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_PCI 1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV |	\
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_ETHREG ))
+#else
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CFG_ATHRS26_PHY  1
+
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.1
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                        0xbfff1000
+#define BOARDCAL                       0xbfff0000
+#define ATHEROS_PRODUCT_ID             138
+#define CAL_SECTOR                     (CFG_MAX_FLASH_SECT - 1)
+
+/* For Kite, only PCI-e interface is valid */
+#define AR7240_ART_PCICFG_OFFSET        3
+
+
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap93-hgw.h b/include/configs/ap93-hgw.h
new file mode 100644
index 0000000..147c6d3
--- /dev/null
+++ b/include/configs/ap93-hgw.h
@@ -0,0 +1,172 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+
+#ifdef S25FL128P
+	#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+	#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#else
+	#define CFG_FLASH_SECTOR_SIZE   (256*1024)
+	#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_ENV_SECT_SIZE       CFG_FLASH_SECTOR_SIZE
+#define CFG_FLASH_SIZE          0x1000000 /* Total flash size */
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0xbf000000
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+#ifdef S25FL128P
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),256k(u-boot-env),3072k(rootfs),1024k(uImage),3072k(spare-rootfs),1024k(spare-uImage),64k(mib0),64k(mib1),4096k(ct),3392k(var),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),256k(u-boot-env),3072k(rootfs),1024k(uImage),3072k(spare-rootfs),1024k(spare-uImage),256k(mib0),256k(mib1),4096k(ct),2816k(var),256k(ART)"
+#endif
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),1024k(uImage)"
+
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#	define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0xbf040000
+#define CFG_ENV_SIZE		0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0xbf300000"
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x2
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV |	\
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_ETHREG ))
+
+#define CFG_ATHRS26_PHY  1
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.1
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                        0xbfff1000
+#define BOARDCAL                       0xbfff0000
+#define ATHEROS_PRODUCT_ID             137
+#define CAL_SECTOR                     (CFG_MAX_FLASH_SECT - 1)
+
+/* For Kite, only PCI-e interface is valid */
+#define AR7240_ART_PCICFG_OFFSET       12
+
+
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap93.h b/include/configs/ap93.h
new file mode 100644
index 0000000..4cd295e
--- /dev/null
+++ b/include/configs/ap93.h
@@ -0,0 +1,166 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),1024k(uImage)"
+
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#	define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#	define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#	define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV |	\
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_ETHREG ))
+
+#define CFG_ATHRS26_PHY  1
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.1
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                        0xbfff1000
+#define BOARDCAL                       0xbfff0000
+#define ATHEROS_PRODUCT_ID             137
+#define CAL_SECTOR                     (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap94.h b/include/configs/ap94.h
new file mode 100644
index 0000000..610d4ff
--- /dev/null
+++ b/include/configs/ap94.h
@@ -0,0 +1,182 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7100.h>
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1       /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+#define CFG_FLASH_ADDR0         (0x5555)        
+#define CFG_FLASH_ADDR1         (0x2AAA)
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE          0xbf000000
+
+#undef CONFIG_ROOTFS_RD
+#undef CONFIG_ROOTFS_FLASH
+#undef CONFIG_BOOTARGS_FL
+#undef CONFIG_BOOTARGS_RD
+#undef CONFIG_BOOTARGS
+#undef  MTDPARTS_DEFAULT
+#undef  MTDIDS_DEFAULT
+
+#define CONFIG_ROOTFS_FLASH
+#define CONFIG_BOOTARGS CONFIG_BOOTARGS_FL
+
+//#define CONFIG_BOOTARGS_RD     "console=ttyS0,115200 root=01:00 rd_start=0x80600000 rd_size=5242880 init=/sbin/init mtdparts=ar9100-nor0:256k(u-boot),64k(u-boot-env),4096k(rootfs),2048k(uImage)"
+
+/* XXX - putting rootfs in last partition results in jffs errors */
+
+#define CONFIG_BOOTARGS_FL     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7100-nor0:192k(uboot),64k(env),6144k(rootfs),1728k(uImage),64k(caldata)"
+
+#define MTDPARTS_DEFAULT    "mtdparts=ar7100-nor0:192k(u-boot),64k(env),6144k(rootfs),1728k(uImage),64k(caldata)"
+#define MTDIDS_DEFAULT      "nor0=ar7100-nor0"
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define CFG_MONITOR_BASE    TEXT_BASE
+#define CFG_MONITOR_LEN     (192 << 10)
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+
+#define CFG_HZ	(680000000/2)
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT    (2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT    (2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET  0x1000
+
+#define CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector   */
+#define CFG_ENV_ADDR        0xbf030000
+#define CFG_ENV_SIZE        0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0xbf640000"
+
+/*
+** Extra environmental variables useful for loading the board
+*/
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+"loadUboot=tftpboot 0x80010000 u-boot.bin;erase 0xbf000000 +0x30000;cp.b 0x80010000 0xbf000000 0x30000\0" \
+"loadLinux=tftpboot 0x80010000 vmlinux.gz.uImage;erase 0xbf640000 +0x120000;cp.b 0x80010000 0xbf640000 0x120000\0" \
+"loadFiles=tftpboot 0x80010000 ap94-jffs2;erase 0xbf040000 +0x600000;cp.b 0x80010000 0xbf040000 0x600000\0" \
+"loadAll=run loadUboot;run loadLinux;run loadFiles\0"
+
+#define CONFIG_NR_DRAM_BANKS    		2
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define MERLIN24CAL                     0xbfff1000
+#define MERLIN50CAL                     0xbfff5000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              136
+#define CAL_SECTOR                      127
+
+/*
+** Configure the CPU clock settings
+*/
+
+#define CFG_PLL_FREQ	CFG_PLL_680_340_170
+/*
+** These values for DDR configuration came from the
+** BDM configuration script
+*/
+
+#define CFG_DDR_REFRESH_VAL     		0x461b
+#define CFG_DDR_CONFIG_VAL      		0xefbc8cd0
+#define CFG_DDR_CONFIG2_VAL             0x8e7156a2
+#define CFG_DDR_MODE_VAL_INIT   		0x131
+#define CFG_DDR_EXT_MODE_VAL    		0x0
+#define CFG_DDR_MODE_VAL        		0x61
+#define CFG_DDR_TRTW_VAL        		0x1f
+#define CFG_DDR_TWTR_VAL        		0x1e
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0xffff
+
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL        | CFG_CMD_MII   | CFG_CMD_PING  \
+   | CFG_CMD_NET | CFG_CMD_PCI     | CFG_CMD_ENV | CFG_CMD_FLASH | CFG_CMD_LOADS \
+   | CFG_CMD_RUN | CFG_CMD_LOADB   | CFG_CMD_ELF | CFG_CMD_BSP ))
+
+/*
+** Ethernet Configuration
+** Set default values, and select the PHY to use
+*/
+
+#define CONFIG_IPADDR       		192.168.1.2
+#define CONFIG_SERVERIP     		192.168.1.1
+//#define CONFIG_ETHADDR      		00:03:7f:ff:ff:fe
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+#define CONFIG_PHY_GIGE       		0              /* GbE speed/duplex detect */
+
+#define CFG_ATHRS26_PHY  			1
+#define CFG_AG7100_NMACS 			2
+//#define CFG_ATHRHDR_REG 			1
+//#define CFG_SWITCH_FREQ				1
+
+//#define CFG_ATHRHDR_EN 				1
+//#define ATHRHDR_LEN   				2
+//#define ATHRHDR_MAX_DATA  			10
+
+#define CFG_PHY_ADDR				0  /* Port 4 */
+#define CFG_GMII     				0
+#define CFG_MII0_RMII				1
+#define CFG_MII1_RMII				1
+#define CFG_AG7100_GE0_RMII			1
+#define CFG_AG7100_GE1_RMII			1
+
+/*
+** Configure Parser
+*/
+
+#define CFG_BOOTM_LEN   (16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+#include <cmd_confdefs.h>
+
+#endif  /* __CONFIG_H */
diff --git a/include/configs/ap94min.h b/include/configs/ap94min.h
new file mode 100644
index 0000000..cafed2e
--- /dev/null
+++ b/include/configs/ap94min.h
@@ -0,0 +1,167 @@
+/*
+ * This file contains the configuration parameters for a minimum
+ * configuration AP 94 image.  This assumes a 4 meg flash part
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7100.h>
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1       /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+#define CFG_FLASH_ADDR0         (0x5555)        
+#define CFG_FLASH_ADDR1         (0x2AAA)
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE          0xbf000000
+
+#undef CONFIG_ROOTFS_RD
+#undef CONFIG_ROOTFS_FLASH
+#undef CONFIG_BOOTARGS_FL
+#undef CONFIG_BOOTARGS_RD
+#undef CONFIG_BOOTARGS
+#undef  MTDPARTS_DEFAULT
+#undef  MTDIDS_DEFAULT
+
+#define CONFIG_ROOTFS_FLASH
+#define CONFIG_BOOTARGS CONFIG_BOOTARGS_FL
+
+//#define CONFIG_BOOTARGS_RD     "console=ttyS0,115200 root=01:00 rd_start=0x80600000 rd_size=5242880 init=/sbin/init mtdparts=ar9100-nor0:256k(u-boot),64k(u-boot-env),4096k(rootfs),2048k(uImage)"
+
+/* XXX - putting rootfs in last partition results in jffs errors */
+
+#define CONFIG_BOOTARGS_FL     "console=ttyS0,115200 root=31:01 rootfstype=jffs2 init=/sbin/init mtdparts=ar7100-nor0:256k(u-boot),2880k(rootfs),896k(uImage),64k(caldata)"
+
+#define MTDPARTS_DEFAULT    "mtdparts=ar7100-nor0:256k(u-boot),2880k(rootfs),896k(uImage),64k(caldata)"
+#define MTDIDS_DEFAULT      "nor0=ar7100-nor0"
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define CFG_MONITOR_BASE    TEXT_BASE
+#define CFG_MONITOR_LEN     (192 << 10)
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+
+#define CFG_HZ	(680000000/2)
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT    (2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT    (2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET  0x1000
+
+#define CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector   */
+#define CFG_ENV_ADDR        0xbf030000
+#define CFG_ENV_SIZE        0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0xbf310000"
+
+#define CONFIG_NR_DRAM_BANKS    		2
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define MERLIN24CAL			0xbf3f1000
+#define MERLIN50CAL			0xbf3f5000
+#define BOARDCAL			0xbf3f0000
+#define ATHEROS_PRODUCT_ID	136
+#define CAL_SECTOR			63
+
+/*
+** Configure the CPU clock settings
+*/
+
+#define CFG_PLL_FREQ	CFG_PLL_680_340_170
+/*
+** These values for DDR configuration came from the
+** BDM configuration script
+*/
+
+#define CFG_DDR_REFRESH_VAL     		0x461b
+#define CFG_DDR_CONFIG_VAL      		0xefbc8cd0
+#define CFG_DDR_CONFIG2_VAL             0x8e7156a2
+#define CFG_DDR_MODE_VAL_INIT   		0x131
+#define CFG_DDR_EXT_MODE_VAL    		0x0
+#define CFG_DDR_MODE_VAL        		0x61
+#define CFG_DDR_TRTW_VAL        		0x1f
+#define CFG_DDR_TWTR_VAL        		0x1e
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0xffff
+
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL        | CFG_CMD_MII   | CFG_CMD_PING  \
+   | CFG_CMD_NET | CFG_CMD_PCI     | CFG_CMD_ENV | CFG_CMD_FLASH | CFG_CMD_LOADS \
+   | CFG_CMD_RUN | CFG_CMD_LOADB   | CFG_CMD_ELF | CFG_CMD_BSP ))
+
+/*
+** Ethernet Configuration
+** Set default values, and select the PHY to use
+*/
+
+#define CONFIG_IPADDR       		192.168.1.2
+#define CONFIG_SERVERIP     		192.168.1.1
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+#define CONFIG_PHY_GIGE       		0              /* GbE speed/duplex detect */
+
+#define CFG_ATHRS26_PHY  			1
+#define CFG_AG7100_NMACS 			2
+
+#define CFG_PHY_ADDR				0  /* Port 4 */
+#define CFG_GMII     				0
+#define CFG_MII0_RMII				1
+#define CFG_MII1_RMII				1
+#define CFG_AG7100_GE0_RMII			1
+#define CFG_AG7100_GE1_RMII			1
+
+
+/*
+** Configure Parser
+*/
+
+#define CFG_BOOTM_LEN   (16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+#include <cmd_confdefs.h>
+
+#endif  /* __CONFIG_H */
diff --git a/include/configs/ap96.h b/include/configs/ap96.h
new file mode 100644
index 0000000..8e4e26a
--- /dev/null
+++ b/include/configs/ap96.h
@@ -0,0 +1,177 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7100.h>
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1       /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+#define CFG_FLASH_ADDR0         (0x5555)        
+#define CFG_FLASH_ADDR1         (0x2AAA)
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE          0xbf000000
+
+#undef CONFIG_ROOTFS_RD
+#undef CONFIG_ROOTFS_FLASH
+#undef CONFIG_BOOTARGS_FL
+#undef CONFIG_BOOTARGS_RD
+#undef CONFIG_BOOTARGS
+#undef  MTDPARTS_DEFAULT
+#undef  MTDIDS_DEFAULT
+
+#define CONFIG_ROOTFS_FLASH
+#define CONFIG_BOOTARGS CONFIG_BOOTARGS_FL
+
+//#define CONFIG_BOOTARGS_RD     "console=ttyS0,115200 root=01:00 rd_start=0x80600000 rd_size=5242880 init=/sbin/init mtdparts=ar9100-nor0:256k(u-boot),64k(u-boot-env),4096k(rootfs),2048k(uImage)"
+
+/* XXX - putting rootfs in last partition results in jffs errors */
+
+#define CONFIG_BOOTARGS_FL     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7100-nor0:192k(uboot),64k(env),6144k(rootfs),1728k(uImage),64k(caldata) mem=64M"
+
+#define MTDPARTS_DEFAULT    "mtdparts=ar7100-nor0:192k(u-boot),64k(env),6144k(rootfs),1728k(uImage),64k(caldata) mem=64M"
+#define MTDIDS_DEFAULT      "nor0=ar7100-nor0"
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define CFG_MONITOR_BASE    TEXT_BASE
+#define CFG_MONITOR_LEN     (192 << 10)
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+
+#define CFG_HZ	(680000000/2)
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT    (2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT    (2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET  0x1000
+
+#define CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector   */
+#define CFG_ENV_ADDR        0xbf030000
+#define CFG_ENV_SIZE        0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0xbf640000"
+
+/*
+** Extra environmental variables useful for loading the board
+*/
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+"loadUboot=tftpboot 0x80010000 u-boot.bin;erase 0xbf000000 +0x30000;cp.b 0x80010000 0xbf000000 0x30000\0" \
+"loadLinux=tftpboot 0x80010000 vmlinux.gz.uImage;erase 0xbf640000 +0x120000;cp.b 0x80010000 0xbf640000 0x120000\0" \
+"loadFiles=tftpboot 0x80010000 ap96-jffs2;erase 0xbf040000 +0x600000;cp.b 0x80010000 0xbf040000 0x600000\0" \
+"loadAll=run loadUboot;run loadLinux;run loadFiles\0"
+
+#define CONFIG_NR_DRAM_BANKS    		2
+
+#define CFG_BOARD_AP96 1
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define MERLIN24CAL                     0xbfff1000
+#define MERLIN50CAL                     0xbfff5000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              145
+#define CAL_SECTOR                      127
+
+/*
+** Configure the CPU clock settings
+*/
+
+#define CFG_PLL_FREQ	CFG_PLL_680_340_170
+/*
+** These values for DDR configuration came from the
+** BDM configuration script
+*/
+
+#define CFG_DDR_REFRESH_VAL     		0x461b
+#define CFG_DDR_CONFIG_VAL      		0x77b8884e
+#define CFG_DDR_CONFIG2_VAL             0x812cd6a8
+#define CFG_DDR_MODE_VAL_INIT   		0x131
+#define CFG_DDR_EXT_MODE_VAL    		0x0
+#define CFG_DDR_MODE_VAL        		0x33
+#define CFG_DDR_TRTW_VAL        		0x1f
+#define CFG_DDR_TWTR_VAL        		0x1e
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  	0xff
+
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL        | CFG_CMD_MII   | CFG_CMD_PING  \
+   | CFG_CMD_NET | CFG_CMD_PCI     | CFG_CMD_ENV | CFG_CMD_FLASH | CFG_CMD_LOADS \
+   | CFG_CMD_RUN | CFG_CMD_LOADB   | CFG_CMD_ELF | CFG_CMD_BSP ))
+
+/*
+** Ethernet Configuration
+** Set default values, and select the PHY to use
+*/
+
+#define CONFIG_IPADDR       		192.168.1.2
+#define CONFIG_SERVERIP     		192.168.1.1
+//#define CONFIG_ETHADDR      		00:03:7f:ff:ff:fe
+//#define CFG_FAULT_ECHO_LINK_DOWN    1
+#define CONFIG_PHY_GIGE       		1              /* GbE speed/duplex detect */
+
+#define CFG_ATHRS16_PHY  			1
+#define CFG_AG7100_NMACS 			2
+
+#define CFG_PHY_ADDR				0  /* Port 4 */
+#define CFG_GMII 1
+#define CFG_MII0_RGMII 0
+#define CFG_AG7100_GE0_RGMII 1
+#define CFG_AG7100_GE1_RGMII 1
+
+/*
+** Configure Parser
+*/
+
+#define CFG_BOOTM_LEN   (16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+#include <cmd_confdefs.h>
+
+#endif  /* __CONFIG_H */
diff --git a/include/configs/ap98.h b/include/configs/ap98.h
new file mode 100644
index 0000000..ade507c
--- /dev/null
+++ b/include/configs/ap98.h
@@ -0,0 +1,278 @@
+/*
+ * This file contains the configuration parameters for the ap98 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#if (FLASH_SIZE == 16)
+#undef COMPRESSED_UBOOT
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_SUPPORT_AR7241 1
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),256k(u-boot-env),3072k(rootfs),1024k(uImage),3072k(spare-rootfs),1024k(spare-uImage),64k(mib0),64k(mib1),4096k(ct),3392k(var),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),256k(u-boot-env),5120k(rootfs),1024k(uImage)"
+#else /* FLASH_SIZE=4M */
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),3136k(rootfs),768k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),3136k(rootfs),768k(uImage),64k(mib0),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#endif
+#endif
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_200_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else
+#ifdef COMPRESSED_UBOOT
+#define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#endif
+#endif
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR values to support AR7241 */
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+//#define CFG_7241_DDR1_CONFIG_VAL      0x6fbc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+//#define CFG_7241_DDR1_MODE_VAL        0x23
+#define CFG_7241_DDR1_CONFIG2_VAL	0x9dd0e6a8
+
+
+#define CFG_7241_DDR2_CONFIG_VAL	0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT	0x133
+#define CFG_7241_DDR2_EXT_MODE_VAL	0x402
+#define CFG_7241_DDR2_MODE_VAL		0x33
+#define CFG_7241_DDR2_CONFIG2_VAL	0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR settings for AR7240 */
+
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL      0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada  
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+#else
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CFG_ATHRS26_PHY  1
+
+#define CONFIG_IPADDR   192.168.1.1
+#define CONFIG_SERVERIP 192.168.1.10
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0xbfff1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+#define SUPPORT_PLC                     1
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap99-2.6.31.h b/include/configs/ap99-2.6.31.h
new file mode 100644
index 0000000..283aeeb
--- /dev/null
+++ b/include/configs/ap99-2.6.31.h
@@ -0,0 +1,259 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#define ENABLE_DYNAMIC_CONF 1
+#define CONFIG_SUPPORT_AR7241 1
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+#undef MTDPARTS_DEFAULT
+
+#ifdef COMPRESSED_UBOOT
+#	if (FLASH_SIZE == 8)
+#		define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),5376k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#		define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=jffs2 init=/sbin/init " MTDPARTS_DEFAULT " REVISIONID"
+#	else
+#		define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),3008k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#		define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=jffs2 init=/sbin/init " MTDPARTS_DEFAULT " REVISIONID"
+#	endif
+#else
+#	if (FLASH_SIZE == 8)
+#		define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#		define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init " MTDPARTS_DEFAULT " REVISIONID"
+#	else
+#		define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#		define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init " MTDPARTS_DEFAULT " REVISIONID"
+#	endif
+#endif /* #ifdef COMPRESSED_UBOOT */
+
+
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241
+#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_200_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR values to support AR7241 */
+
+#ifdef CONFIG_SUPPORT_AR7241
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+//#define CFG_7241_DDR1_CONFIG_VAL      0x6fbc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+//#define CFG_7241_DDR1_MODE_VAL        0x23
+#define CFG_7241_DDR1_CONFIG2_VAL	0x9dd0e6a8
+
+
+#define CFG_7241_DDR2_CONFIG_VAL	0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT	0x133
+#define CFG_7241_DDR2_EXT_MODE_VAL	0x402
+#define CFG_7241_DDR2_MODE_VAL		0x33
+#define CFG_7241_DDR2_CONFIG2_VAL	0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR settings for AR7240 */
+
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#       define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#       define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL      0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada  
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+
+#define CFG_ATHRS26_PHY  1
+
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.1
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+#define CFG_ATHRS26_PHY 1
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0xbfff1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap99-hgw.h b/include/configs/ap99-hgw.h
new file mode 100644
index 0000000..a0a7179
--- /dev/null
+++ b/include/configs/ap99-hgw.h
@@ -0,0 +1,274 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#if (FLASH_SIZE == 16)
+#undef COMPRESSED_UBOOT
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_SUPPORT_AR7241 1
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),256k(u-boot-env),3072k(rootfs),1024k(uImage),3072k(spare-rootfs),1024k(spare-uImage),64k(mib0),64k(mib1),4096k(ct),3392k(var),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),256k(u-boot-env),5120k(rootfs),1024k(uImage)"
+#else /* FLASH_SIZE=4M */
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),3008k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),3008k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#endif
+#endif
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_200_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#endif
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR values to support AR7241 */
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+//#define CFG_7241_DDR1_CONFIG_VAL      0x6fbc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+//#define CFG_7241_DDR1_MODE_VAL        0x23
+#define CFG_7241_DDR1_CONFIG2_VAL	0x9dd0e6a8
+
+
+#define CFG_7241_DDR2_CONFIG_VAL	0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT	0x133
+#define CFG_7241_DDR2_EXT_MODE_VAL	0x402
+#define CFG_7241_DDR2_MODE_VAL		0x33
+#define CFG_7241_DDR2_CONFIG2_VAL	0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR settings for AR7240 */
+
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL      0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada  
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+#else
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CFG_ATHRS26_PHY  1
+
+#define CONFIG_IPADDR   192.168.1.1
+#define CONFIG_SERVERIP 192.168.1.20
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0xbfff1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap99-ivi.h b/include/configs/ap99-ivi.h
new file mode 100644
index 0000000..92176ab
--- /dev/null
+++ b/include/configs/ap99-ivi.h
@@ -0,0 +1,272 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#if (FLASH_SIZE == 16)
+#undef COMPRESSED_UBOOT
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_SUPPORT_AR7241 1
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),256k(u-boot-env),3072k(rootfs),1024k(uImage),3072k(spare-rootfs),1024k(spare-uImage),64k(mib0),64k(mib1),4096k(ct),3392k(var),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),256k(u-boot-env),5120k(rootfs),1024k(uImage)"
+#else /* FLASH_SIZE=4M */
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),3008k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),3008k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#endif
+#endif
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_200_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#endif
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR values to support AR7241 */
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+//#define CFG_7241_DDR1_CONFIG_VAL      0x6fbc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+//#define CFG_7241_DDR1_MODE_VAL        0x23
+#define CFG_7241_DDR1_CONFIG2_VAL	0x9dd0e6a8
+
+
+#define CFG_7241_DDR2_CONFIG_VAL	0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT	0x133
+#define CFG_7241_DDR2_EXT_MODE_VAL	0x402
+#define CFG_7241_DDR2_MODE_VAL		0x33
+#define CFG_7241_DDR2_CONFIG2_VAL	0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR settings for AR7240 */
+
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL      0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada  
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+#else
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CONFIG_IPADDR   192.168.1.1
+#define CONFIG_SERVERIP 192.168.1.20
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0xbfff1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap99-small.h b/include/configs/ap99-small.h
new file mode 100644
index 0000000..75c124e
--- /dev/null
+++ b/include/configs/ap99-small.h
@@ -0,0 +1,247 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#define ENABLE_DYNAMIC_CONF 1
+#define CONFIG_SUPPORT_AR7241 1
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+#if (FLASH_SIZE == 8)
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),896k(uImage),64k(NVRAM),1792k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+#endif
+
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_200_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+
+#if (FLASH_SIZE == 8)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#endif
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR values to support AR7241 */
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+//#define CFG_7241_DDR1_CONFIG_VAL      0x6fbc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+//#define CFG_7241_DDR1_MODE_VAL        0x23
+#define CFG_7241_DDR1_CONFIG2_VAL	0x9dd0e6a8
+
+
+#define CFG_7241_DDR2_CONFIG_VAL	0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT	0x133
+#define CFG_7241_DDR2_EXT_MODE_VAL	0x402
+#define CFG_7241_DDR2_MODE_VAL		0x33
+#define CFG_7241_DDR2_CONFIG2_VAL	0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR settings for AR7240 */
+
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#       define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#       define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL      0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada  
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+
+#define CFG_ATHRS26_PHY  1
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.1
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0xbfff1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ap99.h b/include/configs/ap99.h
new file mode 100644
index 0000000..7663336
--- /dev/null
+++ b/include/configs/ap99.h
@@ -0,0 +1,278 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#if (FLASH_SIZE == 16)
+#undef COMPRESSED_UBOOT
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_SUPPORT_AR7241 1
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),256k(u-boot-env),3072k(rootfs),1024k(uImage),3072k(spare-rootfs),1024k(spare-uImage),64k(mib0),64k(mib1),4096k(ct),3392k(var),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),256k(u-boot-env),5120k(rootfs),1024k(uImage)"
+#else /* FLASH_SIZE=4M */
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),3136k(rootfs),768k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),3136k(rootfs),768k(uImage),64k(mib0),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#endif
+#endif
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_200_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else
+#ifdef COMPRESSED_UBOOT
+#define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#endif
+#endif
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR values to support AR7241 */
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+//#define CFG_7241_DDR1_CONFIG_VAL      0x6fbc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+//#define CFG_7241_DDR1_MODE_VAL        0x23
+#define CFG_7241_DDR1_CONFIG2_VAL	0x9dd0e6a8
+
+
+#define CFG_7241_DDR2_CONFIG_VAL	0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT	0x133
+#define CFG_7241_DDR2_EXT_MODE_VAL	0x402
+#define CFG_7241_DDR2_MODE_VAL		0x33
+#define CFG_7241_DDR2_CONFIG2_VAL	0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR settings for AR7240 */
+
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL      0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada  
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+#else
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CFG_ATHRS26_PHY  1
+
+#define CONFIG_IPADDR   192.168.1.1
+#define CONFIG_SERVERIP 192.168.1.10
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0xbfff1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/aph126.h b/include/configs/aph126.h
new file mode 100644
index 0000000..e8382bb
--- /dev/null
+++ b/include/configs/aph126.h
@@ -0,0 +1,421 @@
+/*
+ * This file contains the configuration parameters for the db120 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#if !defined(CONFIG_ATH_NAND_BR)
+#define FLASH_SIZE 16
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000    /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_WASP_SUPPORT 1
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+// Set this to zero, for 16bit ddr2
+#define DDR2_32BIT_SUPPORT 	1
+
+/* S16 specific defines */
+
+#define CONFIG_AG7240_GE0_IS_CONNECTED 1
+
+/* Assuming nand flash wouldn't use compressed u-boot */
+#ifdef CONFIG_ATH_NAND_BR
+#	define CFG_FLASH_BASE			0
+#else
+	/*
+	 * We boot from this flash
+	 */
+#	define CFG_FLASH_BASE			0x9f000000
+#endif
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+/* Address and size of Primary Environment Sector   */
+#define CFG_ENV_ADDR        (CFG_FLASH_BASE+UBOOT_FLASH_SIZE)
+#define CFG_ENV_SIZE        CFG_FLASH_SECTOR_SIZE
+
+
+#undef CONFIG_BOOTARGS
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),8192k(reserve),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:256k(u-boot),256k(u-boot-env),5120k(rootfs),1024k(uImage)"
+#else /* FLASH_SIZE=8M */
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=jffs2 init=/sbin/init mtdparts=ath-nor0:64k(u-boot),6592k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:64k(u-boot),6592k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#endif
+#endif
+
+#if (FLASH_SIZE == 16)
+#define CFG_KERNEL_ADDR 0x9f680000
+#else
+#define CFG_KERNEL_ADDR 0x9f680000
+#endif
+#define CFG_MIB0_ADDR		0x9ffe0000
+
+#define CONFIG_BOOTCOMMAND "bootm ${KERNELADDR}"
+
+#ifndef CFG_LOAD_ADDR
+#define CFG_LOAD_ADDR		0x80060000
+#endif
+#ifndef COMPRESSED_UBOOT
+#define CFG_FS_ADDR			0x9f050000//(CFG_ENV_ADDR+CFG_ENV_SIZE)
+#else
+#define CFG_FS_ADDR			0x9f010000//(CFG_FLASH_BASE+UBOOT_FLASH_SIZE)
+#endif /* COMPRESSED_UBOOT */
+#define ENV_FS_ADDR			"FSADDR=" MK_STR(CFG_FS_ADDR) "\0"
+
+#define ENV_UBOOT_ADDR		"UBOOTADDR=" MK_STR(CFG_FLASH_BASE) "\0"
+#define ENV_KERNEL_ADDR		"KERNELADDR=" MK_STR(CFG_KERNEL_ADDR) "\0"
+#define ENV_MIB0_ADDR		"MIB0ADDR=" MK_STR(CFG_MIB0_ADDR) "\0"
+
+#define ENV_UPDATE \
+    "update=tftpboot " MK_STR(CFG_LOAD_ADDR) " ${filename} && "	\
+            "erase ${loadaddr} +${filesize} && "				\
+            "cp.b ${fileaddr} ${loadaddr} ${filesize}\0"
+
+#define ENV_UPDATE_KERNEL \
+    "updk=loadaddr=${KERNELADDR} && filename=zImage.uImage && " \
+    "run update\0"
+
+#define ENV_UPDATE_FS \
+    "updfs=loadaddr=${FSADDR} && filename=rootfs-jffs2 && " \
+    "run update\0"
+
+#ifdef COMPRESSED_UBOOT
+#define UBOOT_FILENAME "tuboot.bin"
+#else
+#define UBOOT_FILENAME "u-boot.bin"
+#endif
+
+#define ENV_UPDATE_UBOOT \
+    "updub=loadaddr=${UBOOTADDR} && filename=" UBOOT_FILENAME " && " \
+    "run update\0"
+
+#define ENV_UPDATE_ALL \
+	"updall=run updub && run updfs && run updk\0"
+
+#define ENV_ERASE_MIB0 \
+	"erasemib0=erase ${MIB0ADDR} +0x10000"
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+		ENV_UBOOT_ADDR \
+		ENV_FS_ADDR \
+		ENV_KERNEL_ADDR \
+		ENV_MIB0_ADDR \
+		ENV_UPDATE \
+		ENV_UPDATE_KERNEL \
+		ENV_UPDATE_FS \
+		ENV_UPDATE_UBOOT \
+		ENV_UPDATE_ALL \
+		ENV_ERASE_MIB0 \
+		""
+
+#undef CFG_PLL_FREQ
+
+//#define CFG_PLL_FREQ	CFG_PLL_600_266_133
+//#define CFG_PLL_FREQ	CFG_PLL_600_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_566_550_275
+//#define CFG_PLL_FREQ	CFG_PLL_566_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_600_332_166
+//#define CFG_PLL_FREQ	CFG_PLL_566_475_237
+//#define CFG_PLL_FREQ	CFG_PLL_600_575_287
+//#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_533_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_450_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_500_1G_250
+//#define CFG_PLL_FREQ	CFG_PLL_600_550_1_1G_275
+//#define CFG_PLL_FREQ	CFG_PLL_600_350_175
+//#define CFG_PLL_FREQ	CFG_PLL_600_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_600_1_2G_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_300_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_500_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_400_200_200
+#if !defined(CONFIG_AP123) && !defined(CONFIG_MI124)
+#define CFG_PLL_FREQ    CFG_PLL_560_480_240
+#else
+#define CFG_PLL_FREQ    CFG_PLL_533_400_200
+#endif
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_500_400_200)
+#   define CFG_HZ          (500000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_400_200) || (CFG_PLL_FREQ == CFG_PLL_600_450_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_600_300) || (CFG_PLL_FREQ == CFG_PLL_600_550_275) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_332_166) || (CFG_PLL_FREQ == CFG_PLL_600_575_287) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_525_262) || (CFG_PLL_FREQ == CFG_PLL_600_332_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_266_133) || (CFG_PLL_FREQ == CFG_PLL_600_266_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_650_325) ||  (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_1G_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_550_1_1G_275)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_350_175)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_300_150)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_533_400_200) || (CFG_PLL_FREQ == CFG_PLL_533_500_250)
+#   define CFG_HZ          (533000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_700_400_200)
+#   define CFG_HZ          (700000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_650_600_300)
+#   define CFG_HZ          (650000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_560_480_240)
+#   define CFG_HZ          (560000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_566_475_237) || (CFG_PLL_FREQ == CFG_PLL_566_450_225) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_550_275) || (CFG_PLL_FREQ == CFG_PLL_566_525_262) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_400_200) || (CFG_PLL_FREQ == CFG_PLL_566_500_250)
+#   define CFG_HZ          (566000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+#define CFG_INIT_SRAM_SP_OFFSET 0xbd007000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif
+
+#if 0
+#ifdef CONFIG_ATH_NAND_BR
+#define CONFIG_BOOTCOMMAND "bootm 0x80000"
+#define CFG_ENV_ADDR		0x00040000
+#else  /* CONFIG_ATH_NAND_BR */
+#define CFG_ENV_ADDR		0x9f040000
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else  /* FLASH_SIZE == 16 */
+#ifdef COMPRESSED_UBOOT
+#if (FLASH_SIZE == 4)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else  /* FLASH_SIZE == 4 */
+#define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#endif  /* FLASH_SIZE == 4 */
+#else /* COMPRESSED_UBOOT */
+#if defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f680000"
+#endif
+#endif  /* COMPRESSED_UBOOT */
+#endif  /* FLASH_SIZE == 16 */
+#endif  /* CONFIG_ATH_NAND_BR */
+#endif
+
+
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR settings for WASP */
+
+#define CFG_DDR_REFRESH_VAL     0x4270
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL     0x9dd0e6a8
+
+
+
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32	0xff
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16	0xffff
+
+#if DDR2_32BIT_SUPPORT
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32
+#else
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16
+#endif
+
+#define CFG_DDR1_RD_DATA_THIS_CYCLE_VAL		0xffff
+#define CFG_SDRAM_RD_DATA_THIS_CYCLE_VAL	0xffffffff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+#else
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CONFIG_IPADDR   192.168.1.1
+#define CONFIG_SERVERIP 192.168.1.10
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0x9fff1000
+#define BOARDCAL                        0x9fff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/aph128.h b/include/configs/aph128.h
new file mode 100644
index 0000000..e8382bb
--- /dev/null
+++ b/include/configs/aph128.h
@@ -0,0 +1,421 @@
+/*
+ * This file contains the configuration parameters for the db120 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#if !defined(CONFIG_ATH_NAND_BR)
+#define FLASH_SIZE 16
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000    /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_WASP_SUPPORT 1
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+// Set this to zero, for 16bit ddr2
+#define DDR2_32BIT_SUPPORT 	1
+
+/* S16 specific defines */
+
+#define CONFIG_AG7240_GE0_IS_CONNECTED 1
+
+/* Assuming nand flash wouldn't use compressed u-boot */
+#ifdef CONFIG_ATH_NAND_BR
+#	define CFG_FLASH_BASE			0
+#else
+	/*
+	 * We boot from this flash
+	 */
+#	define CFG_FLASH_BASE			0x9f000000
+#endif
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+/* Address and size of Primary Environment Sector   */
+#define CFG_ENV_ADDR        (CFG_FLASH_BASE+UBOOT_FLASH_SIZE)
+#define CFG_ENV_SIZE        CFG_FLASH_SECTOR_SIZE
+
+
+#undef CONFIG_BOOTARGS
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),8192k(reserve),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:256k(u-boot),256k(u-boot-env),5120k(rootfs),1024k(uImage)"
+#else /* FLASH_SIZE=8M */
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=jffs2 init=/sbin/init mtdparts=ath-nor0:64k(u-boot),6592k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:64k(u-boot),6592k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#endif
+#endif
+
+#if (FLASH_SIZE == 16)
+#define CFG_KERNEL_ADDR 0x9f680000
+#else
+#define CFG_KERNEL_ADDR 0x9f680000
+#endif
+#define CFG_MIB0_ADDR		0x9ffe0000
+
+#define CONFIG_BOOTCOMMAND "bootm ${KERNELADDR}"
+
+#ifndef CFG_LOAD_ADDR
+#define CFG_LOAD_ADDR		0x80060000
+#endif
+#ifndef COMPRESSED_UBOOT
+#define CFG_FS_ADDR			0x9f050000//(CFG_ENV_ADDR+CFG_ENV_SIZE)
+#else
+#define CFG_FS_ADDR			0x9f010000//(CFG_FLASH_BASE+UBOOT_FLASH_SIZE)
+#endif /* COMPRESSED_UBOOT */
+#define ENV_FS_ADDR			"FSADDR=" MK_STR(CFG_FS_ADDR) "\0"
+
+#define ENV_UBOOT_ADDR		"UBOOTADDR=" MK_STR(CFG_FLASH_BASE) "\0"
+#define ENV_KERNEL_ADDR		"KERNELADDR=" MK_STR(CFG_KERNEL_ADDR) "\0"
+#define ENV_MIB0_ADDR		"MIB0ADDR=" MK_STR(CFG_MIB0_ADDR) "\0"
+
+#define ENV_UPDATE \
+    "update=tftpboot " MK_STR(CFG_LOAD_ADDR) " ${filename} && "	\
+            "erase ${loadaddr} +${filesize} && "				\
+            "cp.b ${fileaddr} ${loadaddr} ${filesize}\0"
+
+#define ENV_UPDATE_KERNEL \
+    "updk=loadaddr=${KERNELADDR} && filename=zImage.uImage && " \
+    "run update\0"
+
+#define ENV_UPDATE_FS \
+    "updfs=loadaddr=${FSADDR} && filename=rootfs-jffs2 && " \
+    "run update\0"
+
+#ifdef COMPRESSED_UBOOT
+#define UBOOT_FILENAME "tuboot.bin"
+#else
+#define UBOOT_FILENAME "u-boot.bin"
+#endif
+
+#define ENV_UPDATE_UBOOT \
+    "updub=loadaddr=${UBOOTADDR} && filename=" UBOOT_FILENAME " && " \
+    "run update\0"
+
+#define ENV_UPDATE_ALL \
+	"updall=run updub && run updfs && run updk\0"
+
+#define ENV_ERASE_MIB0 \
+	"erasemib0=erase ${MIB0ADDR} +0x10000"
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+		ENV_UBOOT_ADDR \
+		ENV_FS_ADDR \
+		ENV_KERNEL_ADDR \
+		ENV_MIB0_ADDR \
+		ENV_UPDATE \
+		ENV_UPDATE_KERNEL \
+		ENV_UPDATE_FS \
+		ENV_UPDATE_UBOOT \
+		ENV_UPDATE_ALL \
+		ENV_ERASE_MIB0 \
+		""
+
+#undef CFG_PLL_FREQ
+
+//#define CFG_PLL_FREQ	CFG_PLL_600_266_133
+//#define CFG_PLL_FREQ	CFG_PLL_600_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_566_550_275
+//#define CFG_PLL_FREQ	CFG_PLL_566_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_600_332_166
+//#define CFG_PLL_FREQ	CFG_PLL_566_475_237
+//#define CFG_PLL_FREQ	CFG_PLL_600_575_287
+//#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_533_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_450_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_500_1G_250
+//#define CFG_PLL_FREQ	CFG_PLL_600_550_1_1G_275
+//#define CFG_PLL_FREQ	CFG_PLL_600_350_175
+//#define CFG_PLL_FREQ	CFG_PLL_600_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_600_1_2G_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_300_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_500_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_400_200_200
+#if !defined(CONFIG_AP123) && !defined(CONFIG_MI124)
+#define CFG_PLL_FREQ    CFG_PLL_560_480_240
+#else
+#define CFG_PLL_FREQ    CFG_PLL_533_400_200
+#endif
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_500_400_200)
+#   define CFG_HZ          (500000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_400_200) || (CFG_PLL_FREQ == CFG_PLL_600_450_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_600_300) || (CFG_PLL_FREQ == CFG_PLL_600_550_275) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_332_166) || (CFG_PLL_FREQ == CFG_PLL_600_575_287) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_525_262) || (CFG_PLL_FREQ == CFG_PLL_600_332_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_266_133) || (CFG_PLL_FREQ == CFG_PLL_600_266_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_650_325) ||  (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_1G_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_550_1_1G_275)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_350_175)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_300_150)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_533_400_200) || (CFG_PLL_FREQ == CFG_PLL_533_500_250)
+#   define CFG_HZ          (533000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_700_400_200)
+#   define CFG_HZ          (700000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_650_600_300)
+#   define CFG_HZ          (650000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_560_480_240)
+#   define CFG_HZ          (560000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_566_475_237) || (CFG_PLL_FREQ == CFG_PLL_566_450_225) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_550_275) || (CFG_PLL_FREQ == CFG_PLL_566_525_262) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_400_200) || (CFG_PLL_FREQ == CFG_PLL_566_500_250)
+#   define CFG_HZ          (566000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+#define CFG_INIT_SRAM_SP_OFFSET 0xbd007000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif
+
+#if 0
+#ifdef CONFIG_ATH_NAND_BR
+#define CONFIG_BOOTCOMMAND "bootm 0x80000"
+#define CFG_ENV_ADDR		0x00040000
+#else  /* CONFIG_ATH_NAND_BR */
+#define CFG_ENV_ADDR		0x9f040000
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else  /* FLASH_SIZE == 16 */
+#ifdef COMPRESSED_UBOOT
+#if (FLASH_SIZE == 4)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else  /* FLASH_SIZE == 4 */
+#define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#endif  /* FLASH_SIZE == 4 */
+#else /* COMPRESSED_UBOOT */
+#if defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f680000"
+#endif
+#endif  /* COMPRESSED_UBOOT */
+#endif  /* FLASH_SIZE == 16 */
+#endif  /* CONFIG_ATH_NAND_BR */
+#endif
+
+
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR settings for WASP */
+
+#define CFG_DDR_REFRESH_VAL     0x4270
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL     0x9dd0e6a8
+
+
+
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32	0xff
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16	0xffff
+
+#if DDR2_32BIT_SUPPORT
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32
+#else
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16
+#endif
+
+#define CFG_DDR1_RD_DATA_THIS_CYCLE_VAL		0xffff
+#define CFG_SDRAM_RD_DATA_THIS_CYCLE_VAL	0xffffffff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+#else
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CONFIG_IPADDR   192.168.1.1
+#define CONFIG_SERVERIP 192.168.1.10
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0x9fff1000
+#define BOARDCAL                        0x9fff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/aph131.h b/include/configs/aph131.h
new file mode 100644
index 0000000..347c422
--- /dev/null
+++ b/include/configs/aph131.h
@@ -0,0 +1,321 @@
+#ifndef __BOARD_955X_H
+#define __BOARD_955X_H
+
+#include <config.h>
+
+#undef MTDPARTS_DEFAULT
+
+#undef CFG_HZ
+
+#include <atheros.h>
+
+#ifndef FLASH_SIZE
+#define FLASH_SIZE 8
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS	1	/* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT	256	/* max number of sectors on one chip */
+#define ATH_MTDPARTS_MIB0	"8256k(mib0)"
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT	128	/* max number of sectors on one chip */
+#define ATH_MTDPARTS_MIB0	"64k(mib0)"
+#else
+#define CFG_MAX_FLASH_SECT	64	/* max number of sectors on one chip */
+#define ATH_MTDPARTS_MIB0	"64k(mib0)"
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE	(64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE		0x01000000	/* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE		0x00800000	/* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE		0x00400000	/* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF	1
+#endif
+
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE	unsigned short
+
+#if defined(CONFIG_ATH_NAND_BR) && defined(COMPRESSED_UBOOT)
+#define CFG_FLASH_BASE			0xa0100000
+#else
+/* NOR Flash start address */
+#define CFG_FLASH_BASE			0x9f000000
+#endif
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE		CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE	BOOTSTRAP_TEXT_BASE
+#endif
+
+#define CONFIG_PCI_CONFIG_DATA_IN_OTP
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE		(256 * 1024)
+#define UBOOT_ENV_SEC_START		(CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC			0xaabacada
+#define CFG_FLASH_MAGIC_F		(UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F		*(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F		*(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F		(CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F		CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F		CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+#define CFG_DDR_REFRESH_VAL		0x4138
+
+/*
+ * The following #defines are needed to get flash environment right
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#define __gen_cmd(n, a, f, ec, cc, el)		\
+	#n "=tftp 0x80060000 ${dir}" #f "&&"	\
+	#ec " " #a " " #el "&&"			\
+	#cc " $fileaddr " #a " $filesize\0"
+
+#define gen_cmd(n, a, f)			\
+	__gen_cmd(n, a, f, erase, cp.b, +$filesize)
+
+#define gen_cmd_el(n, a, f, el)			\
+	__gen_cmd(n, a, f, erase, cp.b, +el)
+
+#define nand_gen_cmd(n, a, f, s)		\
+	__gen_cmd(n, a, f, nand erase, nand write, s)
+
+#define __fs_name(x, y)		x ## y
+#define _fs_name(x, y)		__fs_name(x, y)
+#define fs_name(y)		_fs_name(__CONFIG_BOARD_NAME, y)
+
+#ifdef COMPRESSED_UBOOT
+#	define ATH_U_FILE	tuboot.bin
+#else
+#	define ATH_U_FILE	u-boot.bin
+#endif
+
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR	// nand boot rom
+#		if defined(COMPRESSED_UBOOT)
+#			define ATH_U_CMD	nand_gen_cmd(lu, 0x0, 2fw.bin, 0x20000)
+#			define MTDPARTS_DEFAULT	"mtdparts=ath-nand:128k(u-boot),384k(free),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		else
+#		define ATH_U_CMD	nand_gen_cmd(lu, 0x0, 2fw.bin, 0x40000)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		endif
+#		define ATH_ROOT_DEV	"31:03"
+#		define CFG_ENV_ADDR	0x00040000
+#	else //dual flash
+#		define ATH_U_CMD	gen_cmd(lu, 0x9f000000, ATH_U_FILE)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nor0:320k(u-boot-and-env),6336k(free);ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		define ATH_ROOT_DEV	"31:05"
+#		define CFG_ENV_ADDR	0x9f040000
+#	endif
+#	define ATH_F_FILE		fs_name(${bc}-nand-jffs2)
+#	define ATH_F_LEN		0x700000
+#	define ATH_F_ADDR		0x1c0000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x80000
+#	define ATH_F_CMD		nand_gen_cmd(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#	define ATH_K_CMD		nand_gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE, 0x140000)
+#	define ATH_EXTRA_ENV		"bootdevice=0\0"
+#else
+#	define ATH_F_FILE		rootfs-jffs2
+#	define ATH_F_LEN		0x630000
+#	define ATH_F_ADDR		0x9f050000
+#	define ATH_K_FILE		vmlinux.lzma.uImage
+#	define ATH_K_ADDR		0x9f680000
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage)," ATH_MTDPARTS_MIB0 ",64k(ART)"
+#endif /*CONFIG_MI124*/
+
+#ifndef ATH_ROOT_DEV
+#	define ATH_ROOT_DEV	"31:02"
+#endif
+
+#ifndef ATH_EXTRA_ENV
+#	define ATH_EXTRA_ENV
+#endif
+
+#ifndef ATH_U_CMD
+#	define ATH_U_CMD	gen_cmd(updub, 0x9f000000, ATH_U_FILE)
+#endif
+
+#ifndef ATH_F_CMD
+#	define ATH_F_CMD	gen_cmd_el(updfs, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#endif
+
+#ifndef ATH_K_CMD
+#	define ATH_K_CMD	gen_cmd(updk, ATH_K_ADDR, ATH_K_FILE)
+#endif
+
+#define ENV_UPDATE_ALL \
+   "updall=run updub && run updfs && run updk\0"
+
+#define CFG_MIB0_ADDR       0x9f7e0000
+#define ENV_MIB0_ADDR       "MIB0ADDR=" MK_STR(CFG_MIB0_ADDR) "\0"
+#define ENV_ERASE_MIB0 \
+   "erasemib0=erase ${MIB0ADDR} +0x10000\0"
+
+#define CONFIG_EXTRA_ENV_SETTINGS	\
+    ENV_MIB0_ADDR \
+    ENV_ERASE_MIB0 \
+    ENV_UPDATE_ALL \
+	"dir=\0" ATH_U_CMD ATH_F_CMD ATH_K_CMD ""
+
+#define	CONFIG_BOOTARGS		"console=ttyS0,115200 root=" ATH_ROOT_DEV " rootfstype=jffs2 init=/sbin/init " MTDPARTS_DEFAULT
+
+//#define CFG_PLL_FREQ    CFG_PLL_720_600_200
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+#define CFG_INIT_SRAM_SP_OFFSET	0xbd007000
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	define CONFIG_BOOTCOMMAND	"nboot 0x81000000 0 0x80000"
+#else
+#	define CFG_ENV_ADDR		0x9f040000
+#	define CONFIG_BOOTCOMMAND	"bootm 0x9f680000"
+#endif
+
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC		0xaabacada
+#define CFG_DDR_MAGIC_F		(UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define ATH_CFG_COMMANDS	((			\
+				CONFIG_CMD_DFL	|	\
+				CFG_CMD_DHCP	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_PCI	|	\
+				CFG_CMD_FLS	|	\
+				CFG_CMD_MII	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET	|	\
+				CFG_CMD_ENV	|	\
+				CFG_CMD_PLL	|	\
+				CFG_CMD_FLASH	|	\
+				CFG_CMD_RUN	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_DDR	|	\
+				CFG_CMD_ETHREG		\
+				) & ~(			\
+				CFG_CMD_IMLS	|	\
+				CFG_CMD_FLASH		\
+				))
+#else
+#	ifdef CONFIG_ATH_NAND_BR
+#		define ATH_CFG_COMMANDS		((			\
+						CONFIG_CMD_DFL	|	\
+						CFG_CMD_PING	|	\
+						CFG_CMD_NET) & ~(	\
+						CFG_CMD_FLASH		\
+						))
+#	else
+#		define ATH_CFG_COMMANDS		(CONFIG_CMD_DFL	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET)
+#	endif
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR
+#		define CFG_ENV_IS_IN_NAND	1
+#		define CFG_ENV_OFFSET		0x40000u
+#		define CFG_ENV_SIZE		0x40000u
+#		define ATH_EXTRA_CMD		CFG_CMD_NAND
+#	else
+#		define CFG_ENV_IS_IN_FLASH	1
+#		define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+#		define ATH_EXTRA_CMD		(CFG_CMD_NAND | CFG_CMD_FLASH)
+#	endif
+#	define NAND_MAX_CHIPS			1
+#	define CFG_MAX_NAND_DEVICE		1
+#else
+#	define ATH_EXTRA_CMD			CFG_CMD_FLASH
+#	define CFG_ENV_IS_IN_FLASH		1
+#	define CFG_ENV_SIZE			CFG_FLASH_SECTOR_SIZE
+#endif
+
+#define DEBUG
+
+#ifdef COMPRESSED_UBOOT
+#undef  CFG_ENV_IS_IN_FLASH
+#undef  CFG_ENV_IS_IN_NAND
+#define CFG_ENV_IS_NOWHERE		1
+#endif
+
+#define CONFIG_COMMANDS			(ATH_CFG_COMMANDS | ATH_EXTRA_CMD)
+
+#define CONFIG_IPADDR			192.168.1.1
+#define CONFIG_SERVERIP			192.168.1.10
+#define CONFIG_ETHADDR			0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN	1
+
+#define CFG_PHY_ADDR			0
+#define CFG_GMII			0
+#define CFG_MII0_RMII			1
+#define CFG_AG7100_GE0_RMII		1
+
+#define CFG_BOOTM_LEN			(16 << 20) /* 16 MB */
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2		"hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL				0x9fff1000
+#define BOARDCAL			0x9fff0000
+#define ATHEROS_PRODUCT_ID		137
+#define CAL_SECTOR			(CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define ATH_ART_PCICFG_OFFSET		12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __BOARD_955X_H */
diff --git a/include/configs/ar7100.h b/include/configs/ar7100.h
new file mode 100644
index 0000000..8f472d0
--- /dev/null
+++ b/include/configs/ar7100.h
@@ -0,0 +1,100 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __AR7100_H
+#define __AR7100_H
+#include <config.h>
+
+#define CONFIG_MIPS32		1  /* MIPS32 CPU core	*/
+
+#define CONFIG_BOOTDELAY	4	/* autoboot after 4 seconds	*/
+
+#define CONFIG_BAUDRATE		115200
+#define CFG_BAUDRATE_TABLE  { 	115200}
+
+#define	CONFIG_TIMESTAMP		/* Print image info with timestamp */
+
+#define CONFIG_ROOTFS_RD
+
+#define	CONFIG_BOOTARGS_RD     "console=ttyS0,115200 root=01:00 rd_start=0x80600000 rd_size=5242880 init=/sbin/init mtdparts=ar7100-nor0:256k(u-boot),64k(u-boot-env),4096k(rootfs),2048k(uImage)"
+
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define	CONFIG_BOOTARGS_FL     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7100-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),2048k(uImage)"
+
+#ifndef BUILD_CONFIG_OVERRIDE
+#ifdef CONFIG_ROOTFS_FLASH
+#define CONFIG_BOOTARGS CONFIG_BOOTARGS_FL
+#else
+#define CONFIG_BOOTARGS ""
+#endif
+#endif
+
+/*
+ * Miscellaneous configurable options
+ */
+#define	CFG_LONGHELP				/* undef to save memory      */
+#define	CFG_PROMPT		"ar7100> "	/* Monitor Command Prompt    */
+#define	CFG_CBSIZE		512		/* Console I/O Buffer Size   */
+#define	CFG_PBSIZE (CFG_CBSIZE+sizeof(CFG_PROMPT)+16)  /* Print Buffer Size */
+#define	CFG_MAXARGS		16		/* max number of command args*/
+
+#define CFG_MALLOC_LEN		128*1024
+
+#define CFG_BOOTPARAMS_LEN	128*1024
+
+#define CFG_SDRAM_BASE		0x80000000     /* Cached addr */
+//#define CFG_SDRAM_BASE		0xa0000000     /* Cached addr */
+
+#define	CFG_LOAD_ADDR		0x81000000     /* default load address	*/
+//#define	CFG_LOAD_ADDR		0xa1000000     /* default load address	*/
+
+#define CFG_MEMTEST_START	0x80100000
+#undef CFG_MEMTEST_START
+#define CFG_MEMTEST_START       0x80200000
+#define CFG_MEMTEST_END		0x83800000
+
+/*------------------------------------------------------------------------
+ * *  * JFFS2
+ */
+#define CFG_JFFS_CUSTOM_PART            /* board defined part   */
+#define CONFIG_JFFS2_CMDLINE
+#define MTDIDS_DEFAULT      "nor0=ar7100-nor0"
+
+#ifndef BUILD_CONFIG_OVERRIDE
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7100-nor0:256k(u-boot),"\
+                            "384k(experi-jffs2)"
+#endif
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+#define CFG_HZ          40000000
+
+#define CFG_RX_ETH_BUFFER   16
+
+/*
+** PLL Config for different CPU/DDR/AHB frequencies
+*/
+
+#define CFG_PLL_200_200_100   0
+#define CFG_PLL_300_300_150   1
+#define CFG_PLL_333_333_166   2
+#define CFG_PLL_266_266_133   3
+#define CFG_PLL_266_266_66    4
+#define CFG_PLL_400_400_200   5
+#define CFG_PLL_360_360_180   6
+#define CFG_PLL_400_400_100   7
+#define CFG_PLL_680_340_170	  8
+#define CFG_PLL_600_300_150   9
+
+
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CFG_DCACHE_SIZE		32768
+#define CFG_ICACHE_SIZE		65536
+#define CFG_CACHELINE_SIZE	32
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ar7240.h b/include/configs/ar7240.h
new file mode 100644
index 0000000..d29cc33
--- /dev/null
+++ b/include/configs/ar7240.h
@@ -0,0 +1,153 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __AR7240_H
+#define __AR7240_H
+
+#define CONFIG_MIPS32		1  /* MIPS32 CPU core	*/
+
+#define CONFIG_BOOTDELAY	4	/* autoboot after 4 seconds	*/
+
+#define CONFIG_BAUDRATE		115200 
+#define CFG_BAUDRATE_TABLE  { 	115200}
+
+#define	CONFIG_TIMESTAMP		/* Print image info with timestamp */
+
+#define CONFIG_ROOTFS_RD
+
+#define	CONFIG_BOOTARGS_RD     "console=ttyS0,115200 root=01:00 rd_start=0x80600000 rd_size=5242880 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),4096k(rootfs),2048k(uImage)"
+
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define	CONFIG_BOOTARGS_FL     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),2048k(uImage)"
+
+#ifdef CONFIG_ROOTFS_FLASH
+#define CONFIG_BOOTARGS CONFIG_BOOTARGS_FL
+#else
+#define CONFIG_BOOTARGS ""
+#endif
+
+/*
+ * Miscellaneous configurable options
+ */
+#define	CFG_LONGHELP				/* undef to save memory      */
+#define	CFG_PROMPT		"ar7240> "	/* Monitor Command Prompt    */
+#define	CFG_CBSIZE		512		/* Console I/O Buffer Size   */
+#define	CFG_PBSIZE (CFG_CBSIZE+sizeof(CFG_PROMPT)+16)  /* Print Buffer Size */
+#define	CFG_MAXARGS		16		/* max number of command args*/
+
+#define CFG_MALLOC_LEN		128*1024
+
+#define CFG_BOOTPARAMS_LEN	128*1024
+
+#define CFG_SDRAM_BASE		0x80000000     /* Cached addr */
+//#define CFG_SDRAM_BASE		0xa0000000     /* Cached addr */
+
+#define	CFG_LOAD_ADDR		0x81000000     /* default load address	*/
+//#define	CFG_LOAD_ADDR		0xa1000000     /* default load address	*/
+
+#define CFG_MEMTEST_START	0x80100000
+#undef CFG_MEMTEST_START
+#define CFG_MEMTEST_START       0x80200000
+#define CFG_MEMTEST_END		0x83800000
+
+/*------------------------------------------------------------------------
+ * *  * JFFS2
+ */
+#define CFG_JFFS_CUSTOM_PART            /* board defined part   */
+#define CONFIG_JFFS2_CMDLINE
+#define MTDIDS_DEFAULT      "nor0=ar7240-nor0"
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+#ifdef CONFIG_HORNET_EMU_HARDI_WLAN
+#define CFG_HZ          24000000
+#else
+#define CFG_HZ          40000000
+#endif
+
+#define CFG_RX_ETH_BUFFER   16
+
+/*
+** PLL Config for different CPU/DDR/AHB frequencies
+*/
+
+#define CFG_PLL_200_200_100		0x00
+#define CFG_PLL_300_300_150		0x01
+#define CFG_PLL_320_320_160		0x02
+#define CFG_PLL_340_340_170		0x03
+#define CFG_PLL_350_350_175		0x04
+#define CFG_PLL_360_360_180		0x05
+#define CFG_PLL_400_400_200		0x06
+#define CFG_PLL_300_300_75		0x07
+#define CFG_PLL_400_400_100		0x08
+#define CFG_PLL_320_320_80		0x09
+#define CFG_PLL_410_400_200		0x0a
+#define CFG_PLL_420_400_200		0x0b
+#define CFG_PLL_80_80_40		0x0c
+#define CFG_PLL_64_64_32		0x0d
+#define CFG_PLL_48_48_24		0x0e
+#define CFG_PLL_32_32_16		0x0f
+#define CFG_PLL_333_333_166		0x10
+#define CFG_PLL_266_266_133		0x11
+#define CFG_PLL_266_266_66		0x12
+#define CFG_PLL_240_240_120		0x13
+#define CFG_PLL_160_160_80		0x14
+#define CFG_PLL_400_200_200		0x15
+#define CFG_PLL_500_400_200		0x16
+#define CFG_PLL_600_400_200		0x17
+#define CFG_PLL_600_500_250		0x18
+#define CFG_PLL_600_400_300		0x19
+#define CFG_PLL_500_500_250		0x1a
+#define CFG_PLL_600_350_175		0x1b
+#define CFG_PLL_600_300_150		0x1c
+#define CFG_PLL_600_550_1_1G_275	0x1d
+#define CFG_PLL_600_500_1G_250		0x1e
+#define CFG_PLL_533_400_200		0x1f
+#define CFG_PLL_600_450_200		0x20
+#define CFG_PLL_533_500_250		0x21
+#define CFG_PLL_700_400_200		0x22
+#define CFG_PLL_650_600_300		0x23
+#define CFG_PLL_600_600_300		0x24
+#define CFG_PLL_600_550_275		0x25
+#define CFG_PLL_566_475_237		0x26
+#define CFG_PLL_566_450_225		0x27
+#define CFG_PLL_600_332_166		0x28
+#define CFG_PLL_600_575_287		0x29
+#define CFG_PLL_600_525_262		0x2a
+#define CFG_PLL_566_550_275		0x2b
+#define CFG_PLL_566_525_262		0x2c
+#define CFG_PLL_600_332_200		0x2d
+#define CFG_PLL_600_266_133		0x2e
+#define CFG_PLL_600_266_200		0x2f
+#define CFG_PLL_600_650_325		0x30
+#define CFG_PLL_566_400_200		0x31
+#define CFG_PLL_566_500_250		0x32
+#define CFG_PLL_600_1_2G_400_200	0x33
+#define CFG_PLL_560_480_240		0x34
+#define CFG_PLL_333_166_166		0x35
+#define CFG_PLL_350_175_175		0x36
+#define CFG_PLL_360_180_180		0x37
+#define CFG_PLL_380_190_190		0x38
+#define CFG_PLL_262_262_131		0x39
+#define CFG_PLL_275_275_137		0x3a
+#define CFG_PLL_200_200_200		0x3b
+#define CFG_PLL_250_250_125		0x3c
+#define CFG_PLL_225_225_112		0x3d
+#define CFG_PLL_212_212_106		0x3e
+#define CFG_PLL_187_187_93		0x3f
+#define CFG_PLL_535_400_200		0x40
+#define CFG_PLL_560_400_200		0x41
+#define CFG_PLL_560_450_225		0x42
+#define CFG_PLL_400_480_240		0x43
+
+
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CFG_DCACHE_SIZE		32768
+#define CFG_ICACHE_SIZE		65536
+#define CFG_CACHELINE_SIZE	32
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ar7240_emu.h b/include/configs/ar7240_emu.h
new file mode 100644
index 0000000..e1fc2d9
--- /dev/null
+++ b/include/configs/ar7240_emu.h
@@ -0,0 +1,177 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#define CONFIG_AR7240_EMU 1
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0xbf000000
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define	CONFIG_BOOTARGS     "console=ttyS0,9600 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),1024k(uImage)"
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),1024k(uImage)"
+
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ	CFG_PLL_400_400_100
+
+/* Atheros Header configuration */
+
+#define CFG_ATHRS26_PHY  1
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0xbf040000
+#define CFG_ENV_SIZE		0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0xbf550000"
+//#define CONFIG_FLASH_16BIT
+
+#define CONFIG_NR_DRAM_BANKS	2
+#if 0
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#define CFG_DDR_REFRESH_VAL     0x4c00
+#define CFG_DDR_CONFIG_VAL      0x67bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x161
+#define CFG_DDR_EXT_MODE_VAL    0x2
+#define CFG_DDR_MODE_VAL        0x61
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#define CFG_DDR_REFRESH_VAL     0x5f00
+#define CFG_DDR_CONFIG_VAL      0x77bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x131
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x31
+#endif
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL			    0x83d1f6a2
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0xffff
+
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0x6fbc8890
+#define CFG_DDR_MODE_VAL_INIT   0x123
+#define CFG_DDR_EXT_MODE_VAL    0x1
+#define CFG_DDR_MODE_VAL        0x23
+
+#define CFG_DDR_CONFIG2_VAL     0x91d0e6a8	
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | \
+            CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET |\
+   CFG_CMD_ENV | CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB \
+   | CFG_CMD_ELF ))
+
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.27
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0xbfff1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              136
+#define CAL_SECTOR                      63
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/board953x.h b/include/configs/board953x.h
new file mode 100755
index 0000000..d12e48a
--- /dev/null
+++ b/include/configs/board953x.h
@@ -0,0 +1,359 @@
+#ifndef __BOARD_955X_H
+#define __BOARD_955X_H
+
+#include <config.h>
+
+#undef MTDPARTS_DEFAULT
+
+#undef CFG_HZ
+
+#include <atheros.h>
+
+#ifndef FLASH_SIZE
+#define FLASH_SIZE 4
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS	1	/* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT	256	/* max number of sectors on one chip */
+#define ATH_MTDPARTS_MIB0	"8256k(mib0)"
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT	128	/* max number of sectors on one chip */
+#define ATH_MTDPARTS_MIB0	"64k(mib0)"
+#else
+#define CFG_MAX_FLASH_SECT	64	/* max number of sectors on one chip */
+#define ATH_MTDPARTS_MIB0	"64k(mib0)"
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE	(64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE		0x01000000	/* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE		0x00800000	/* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE		0x00400000	/* Total flash size */
+#endif
+
+/* Support 2MB flash */
+#ifdef TPWD_FOR_LINUX_CAL
+#if (FLASH_SIZE == 2)
+#define CFG_MAX_FLASH_SECT		32
+#define CFG_FLASH_SIZE			0x00200000
+#endif
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF	1
+#endif
+
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE	unsigned short
+
+#if defined(CONFIG_ATH_NAND_BR) && defined(COMPRESSED_UBOOT)
+#define CFG_FLASH_BASE			0xa0100000
+#else
+/* NOR Flash start address */
+#define CFG_FLASH_BASE			0x9f000000
+#endif
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE		CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE	BOOTSTRAP_TEXT_BASE
+#endif
+
+#define CONFIG_PCI_CONFIG_DATA_IN_OTP
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE		(256 * 1024)
+#define UBOOT_ENV_SEC_START		(CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC			0xaabacada
+#define CFG_FLASH_MAGIC_F		(UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F		*(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F		*(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F		(CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F		CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F		CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+#define CFG_DDR_REFRESH_VAL		0x4138
+
+/*
+ * The following #defines are needed to get flash environment right
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#define __gen_cmd(n, a, f, ec, cc, el)		\
+	#n "=tftp 0x80060000 ${dir}" #f "&&"	\
+	#ec " " #a " " #el "&&"			\
+	#cc " $fileaddr " #a " $filesize\0"
+
+#define gen_cmd(n, a, f)			\
+	__gen_cmd(n, a, f, erase, cp.b, +$filesize)
+
+#define gen_cmd_el(n, a, f, el)			\
+	__gen_cmd(n, a, f, erase, cp.b, +el)
+
+#define nand_gen_cmd(n, a, f, s)		\
+	__gen_cmd(n, a, f, nand erase, nand write, s)
+
+#define __fs_name(x, y)		x ## y
+#define _fs_name(x, y)		__fs_name(x, y)
+#define fs_name(y)		_fs_name(__CONFIG_BOARD_NAME, y)
+
+//#ifdef COMPRESSED_UBOOT
+//#	define ATH_U_FILE	u-boot.bin
+//#else
+/* use u-boot.bin file name no matter compress uboot or not */
+#	define ATH_U_FILE	u-boot.bin/*  by huangwenzhong, 02May13 */
+//#endif
+
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR	// nand boot rom
+#		if defined(COMPRESSED_UBOOT)
+#			define ATH_U_CMD	nand_gen_cmd(lu, 0x0, 2fw.bin, 0x20000)
+#			define MTDPARTS_DEFAULT	"mtdparts=ath-nand:128k(u-boot),384k(free),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		else
+#		define ATH_U_CMD	nand_gen_cmd(lu, 0x0, 2fw.bin, 0x40000)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		endif
+#		define ATH_ROOT_DEV	"31:03"
+#		define CFG_ENV_ADDR	0x00040000
+#	else //dual flash
+#		define ATH_U_CMD	gen_cmd(lu, 0x9f000000, ATH_U_FILE)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nor0:320k(u-boot-and-env),6336k(free);ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		define ATH_ROOT_DEV	"31:05"
+#		define CFG_ENV_ADDR	0x9f040000
+#	endif
+#	define ATH_F_FILE		fs_name(${bc}-nand-jffs2)
+#	define ATH_F_LEN		0x700000
+#	define ATH_F_ADDR		0x1c0000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x80000
+#	define ATH_F_CMD		nand_gen_cmd(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#	define ATH_K_CMD		nand_gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE, 0x140000)
+#	define ATH_EXTRA_ENV		"bootdevice=0\0"
+#else
+#	if defined(COMPRESSED_UBOOT)
+#		define ATH_U_FILE	u-boot.bin
+#		define ATH_F_FILE	fs_name(${bc}-squashfs)
+#		define ATH_F_LEN	$filesize
+#		define ATH_F_ADDR	0x9f120000
+#		define ATH_K_FILE	vmlinux${bc}.lzma.uImage
+#		define ATH_K_ADDR	0x9f020000
+		/*
+		 * For compressed uboot, environment sector is not used.
+		 * Hence the mtd partition indices get reduced by 1.
+		 * This conflicts with
+		 *	- minor no. for /dev/caldata in
+		 *		build/scripts/{board}/dev.txt
+		 *	- root=<rooot dev> kernel cmdline parameter
+		 * Hence, doing a dummy split of the u-boot partition
+		 * to maintain the same minor no. as in the normal u-boot.
+		 */
+//#		define MTDPARTS_DEFAULT	"mtdparts=ath-nor0:32k(u-boot1),32k(u-boot2),3008k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+	#if (FLASH_SIZE == 16)
+	#		define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:128k(u-boot),1024k(kernel),15104k(rootfs),64k(config),64k(art)"
+	#elif (FLASH_SIZE ==8)
+	#		define MTDPARTS_DEFAULT 	"mtdparts=ath-nor0:128k(u-boot),1024k(kernel),6912k(rootfs),64k(config),64k(art)"
+	#else
+	#		define MTDPARTS_DEFAULT 	"mtdparts=ath-nor0:128k(u-boot),1024k(kernel),2816k(rootfs),64k(config),64k(art)"
+	#endif
+
+#	else
+#		define ATH_F_FILE		fs_name(${bc}-jffs2)
+#		define ATH_F_LEN		0x630000
+#		define ATH_F_ADDR		0x9f050000
+#		define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#		define ATH_K_ADDR		0x9f680000
+#		define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage)," ATH_MTDPARTS_MIB0 ",64k(ART)"
+#	endif
+#endif /*CONFIG_MI124*/
+
+#ifndef ATH_ROOT_DEV
+#	define ATH_ROOT_DEV	"31:02"
+#endif
+
+#ifndef ATH_EXTRA_ENV
+#	define ATH_EXTRA_ENV
+#endif
+
+#ifndef ATH_U_CMD
+#	define ATH_U_CMD	gen_cmd(lu, 0x9f000000, ATH_U_FILE)
+#endif
+
+#ifndef ATH_F_CMD
+#	define ATH_F_CMD	gen_cmd_el(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#endif
+
+#ifndef ATH_K_CMD
+#	define ATH_K_CMD	gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE)
+#endif
+
+#define CONFIG_EXTRA_ENV_SETTINGS	\
+	"dir=\0" ATH_U_CMD ATH_F_CMD ATH_K_CMD ""
+
+#define	CONFIG_BOOTARGS		"console=ttyS0,115200 root=" ATH_ROOT_DEV " rootfstype=squashfs init=/sbin/init " MTDPARTS_DEFAULT
+
+//#define CFG_PLL_FREQ    CFG_PLL_720_600_200
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+#define CFG_INIT_SRAM_SP_OFFSET	0xbd001800
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	define CONFIG_BOOTCOMMAND	"nboot 0x81000000 0 0x80000"
+#else
+#	define CFG_ENV_ADDR		0x9f040000
+#	ifdef COMPRESSED_UBOOT
+#		define CONFIG_BOOTCOMMAND	"bootm 0x9f020000"/*  by huangwenzhong, 02May13 */
+#	else
+#		define CONFIG_BOOTCOMMAND	"bootm 0x9f680000"
+#	endif
+#endif
+
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC		0xaabacada
+#define CFG_DDR_MAGIC_F		(UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_AG7240_SPEPHY /* choose eth1 first for tftpboot interface added by ZJin, 110328 */
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define ATH_CFG_COMMANDS	((			\
+				CONFIG_CMD_DFL	|	\
+				CFG_CMD_DHCP	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_PCI	|	\
+				CFG_CMD_FLS	|	\
+				CFG_CMD_MII	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET	|	\
+				CFG_CMD_ENV	|	\
+				CFG_CMD_PLL	|	\
+				CFG_CMD_FLASH	|	\
+				CFG_CMD_RUN	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_DDR	|	\
+				CFG_CMD_ETHREG		\
+				) & ~(			\
+				CFG_CMD_IMLS	|	\
+				CFG_CMD_FLASH		\
+				))
+#else
+#	ifdef CONFIG_ATH_NAND_BR
+#		define ATH_CFG_COMMANDS		((			\
+						CONFIG_CMD_DFL	|	\
+						CFG_CMD_PING	|	\
+						CFG_CMD_NET) & ~(	\
+						CFG_CMD_FLASH		\
+						))
+#	else
+#		define ATH_CFG_COMMANDS		(CONFIG_CMD_DFL	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET)
+#	endif
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR
+#		define CFG_ENV_IS_IN_NAND	1
+#		define CFG_ENV_OFFSET		0x40000u
+#		define CFG_ENV_SIZE		0x40000u
+#		define ATH_EXTRA_CMD		CFG_CMD_NAND
+#	else
+#		define CFG_ENV_IS_IN_FLASH	1
+#		define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+#		define ATH_EXTRA_CMD		(CFG_CMD_NAND | CFG_CMD_FLASH)
+#	endif
+#	define NAND_MAX_CHIPS			1
+#	define CFG_MAX_NAND_DEVICE		1
+#else
+#	define ATH_EXTRA_CMD			CFG_CMD_FLASH
+#	define CFG_ENV_IS_IN_FLASH		1
+#	define CFG_ENV_SIZE			CFG_FLASH_SECTOR_SIZE
+#endif
+
+//#define DEBUG
+
+#ifdef COMPRESSED_UBOOT
+#undef  CFG_ENV_IS_IN_FLASH
+#undef  CFG_ENV_IS_IN_NAND
+#define CFG_ENV_IS_NOWHERE		1
+#endif
+
+#define CONFIG_COMMANDS			(ATH_CFG_COMMANDS | ATH_EXTRA_CMD)
+
+#define CONFIG_IPADDR			192.168.1.1
+#define CONFIG_SERVERIP			192.168.1.10
+#define CONFIG_ETHADDR			0xba:0xbe:0xfa:0xce:0x08:0x41
+#define CFG_FAULT_ECHO_LINK_DOWN	1
+
+#define CFG_PHY_ADDR			0
+#define CFG_GMII			0
+#define CFG_MII0_RMII			1
+#define CFG_AG7100_GE0_RMII		1
+
+#define CFG_BOOTM_LEN			(16 << 20) /* 16 MB */
+/* ZJin 110328
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2		"hush>"
+*/
+#undef DEBUG
+#undef CFG_HUSH_PARSER
+#undef CFG_PROMPT_HUSH_PS2
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL				0x9fff1000
+#define BOARDCAL			0x9fff0000
+#define ATHEROS_PRODUCT_ID		137
+#define CAL_SECTOR			(CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define ATH_ART_PCICFG_OFFSET		12
+
+#define CONFIG_LZMA 1
+
+#include <cmd_confdefs.h>
+
+#endif	/* __BOARD_955X_H */
diff --git a/include/configs/board955x.h b/include/configs/board955x.h
new file mode 100644
index 0000000..3544185
--- /dev/null
+++ b/include/configs/board955x.h
@@ -0,0 +1,310 @@
+#ifndef __BOARD_955X_H
+#define __BOARD_955X_H
+
+#include <config.h>
+
+#undef MTDPARTS_DEFAULT
+
+#undef CFG_HZ
+
+#include <atheros.h>
+
+#ifndef FLASH_SIZE
+#define FLASH_SIZE 8
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS	1	/* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT	256	/* max number of sectors on one chip */
+#define ATH_MTDPARTS_MIB0	"8256k(mib0)"
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT	128	/* max number of sectors on one chip */
+#define ATH_MTDPARTS_MIB0	"64k(mib0)"
+#else
+#define CFG_MAX_FLASH_SECT	64	/* max number of sectors on one chip */
+#define ATH_MTDPARTS_MIB0	"64k(mib0)"
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE	(64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE		0x01000000	/* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE		0x00800000	/* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE		0x00400000	/* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF	1
+#endif
+
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE	unsigned short
+
+#if defined(CONFIG_ATH_NAND_BR) && defined(COMPRESSED_UBOOT)
+#define CFG_FLASH_BASE			0xa0100000
+#else
+/* NOR Flash start address */
+#define CFG_FLASH_BASE			0x9f000000
+#endif
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE		CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE	BOOTSTRAP_TEXT_BASE
+#endif
+
+#define CONFIG_PCI_CONFIG_DATA_IN_OTP
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE		(256 * 1024)
+#define UBOOT_ENV_SEC_START		(CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC			0xaabacada
+#define CFG_FLASH_MAGIC_F		(UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F		*(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F		*(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F		(CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F		CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F		CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+#define CFG_DDR_REFRESH_VAL		0x4138
+
+/*
+ * The following #defines are needed to get flash environment right
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#define __gen_cmd(n, a, f, ec, cc, el)		\
+	#n "=tftp 0x80060000 ${dir}" #f "&&"	\
+	#ec " " #a " " #el "&&"			\
+	#cc " $fileaddr " #a " $filesize\0"
+
+#define gen_cmd(n, a, f)			\
+	__gen_cmd(n, a, f, erase, cp.b, +$filesize)
+
+#define gen_cmd_el(n, a, f, el)			\
+	__gen_cmd(n, a, f, erase, cp.b, +el)
+
+#define nand_gen_cmd(n, a, f, s)		\
+	__gen_cmd(n, a, f, nand erase, nand write, s)
+
+#define __fs_name(x, y)		x ## y
+#define _fs_name(x, y)		__fs_name(x, y)
+#define fs_name(y)		_fs_name(__CONFIG_BOARD_NAME, y)
+
+#ifdef COMPRESSED_UBOOT
+#	define ATH_U_FILE	tuboot.bin
+#else
+#	define ATH_U_FILE	u-boot.bin
+#endif
+
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR	// nand boot rom
+#		if defined(COMPRESSED_UBOOT)
+#			define ATH_U_CMD	nand_gen_cmd(lu, 0x0, 2fw.bin, 0x20000)
+#			define MTDPARTS_DEFAULT	"mtdparts=ath-nand:128k(u-boot),384k(free),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		else
+#		define ATH_U_CMD	nand_gen_cmd(lu, 0x0, 2fw.bin, 0x40000)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		endif
+#		define ATH_ROOT_DEV	"31:03"
+#		define CFG_ENV_ADDR	0x00040000
+#	else //dual flash
+#		define ATH_U_CMD	gen_cmd(lu, 0x9f000000, ATH_U_FILE)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nor0:320k(u-boot-and-env),6336k(free);ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		define ATH_ROOT_DEV	"31:05"
+#		define CFG_ENV_ADDR	0x9f040000
+#	endif
+#	define ATH_F_FILE		fs_name(${bc}-nand-jffs2)
+#	define ATH_F_LEN		0x700000
+#	define ATH_F_ADDR		0x1c0000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x80000
+#	define ATH_F_CMD		nand_gen_cmd(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#	define ATH_K_CMD		nand_gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE, 0x140000)
+#	define ATH_EXTRA_ENV		"bootdevice=0\0"
+#else
+#	define ATH_F_FILE		fs_name(${bc}-jffs2)
+#	define ATH_F_LEN		0x630000
+#	define ATH_F_ADDR		0x9f050000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x9f680000
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage)," ATH_MTDPARTS_MIB0 ",64k(ART)"
+#endif /*CONFIG_MI124*/
+
+#ifndef ATH_ROOT_DEV
+#	define ATH_ROOT_DEV	"31:02"
+#endif
+
+#ifndef ATH_EXTRA_ENV
+#	define ATH_EXTRA_ENV
+#endif
+
+#ifndef ATH_U_CMD
+#	define ATH_U_CMD	gen_cmd(lu, 0x9f000000, ATH_U_FILE)
+#endif
+
+#ifndef ATH_F_CMD
+#	define ATH_F_CMD	gen_cmd_el(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#endif
+
+#ifndef ATH_K_CMD
+#	define ATH_K_CMD	gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE)
+#endif
+
+#define CONFIG_EXTRA_ENV_SETTINGS	\
+	"dir=\0" ATH_U_CMD ATH_F_CMD ATH_K_CMD ""
+
+#define	CONFIG_BOOTARGS		"console=ttyS0,115200 root=" ATH_ROOT_DEV " rootfstype=jffs2 init=/sbin/init " MTDPARTS_DEFAULT
+
+//#define CFG_PLL_FREQ    CFG_PLL_720_600_200
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+#define CFG_INIT_SRAM_SP_OFFSET	0xbd007000
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	define CONFIG_BOOTCOMMAND	"nboot 0x81000000 0 0x80000"
+#else
+#	define CFG_ENV_ADDR		0x9f040000
+#	define CONFIG_BOOTCOMMAND	"bootm 0x9f680000"
+#endif
+
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC		0xaabacada
+#define CFG_DDR_MAGIC_F		(UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define ATH_CFG_COMMANDS	((			\
+				CONFIG_CMD_DFL	|	\
+				CFG_CMD_DHCP	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_PCI	|	\
+				CFG_CMD_FLS	|	\
+				CFG_CMD_MII	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET	|	\
+				CFG_CMD_ENV	|	\
+				CFG_CMD_PLL	|	\
+				CFG_CMD_FLASH	|	\
+				CFG_CMD_RUN	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_DDR	|	\
+				CFG_CMD_ETHREG		\
+				) & ~(			\
+				CFG_CMD_IMLS	|	\
+				CFG_CMD_FLASH		\
+				))
+#else
+#	ifdef CONFIG_ATH_NAND_BR
+#		define ATH_CFG_COMMANDS		((			\
+						CONFIG_CMD_DFL	|	\
+						CFG_CMD_PING	|	\
+						CFG_CMD_NET) & ~(	\
+						CFG_CMD_FLASH		\
+						))
+#	else
+#		define ATH_CFG_COMMANDS		(CONFIG_CMD_DFL	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET)
+#	endif
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR
+#		define CFG_ENV_IS_IN_NAND	1
+#		define CFG_ENV_OFFSET		0x40000u
+#		define CFG_ENV_SIZE		0x40000u
+#		define ATH_EXTRA_CMD		CFG_CMD_NAND
+#	else
+#		define CFG_ENV_IS_IN_FLASH	1
+#		define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+#		define ATH_EXTRA_CMD		(CFG_CMD_NAND | CFG_CMD_FLASH)
+#	endif
+#	define NAND_MAX_CHIPS			1
+#	define CFG_MAX_NAND_DEVICE		1
+#else
+#	define ATH_EXTRA_CMD			CFG_CMD_FLASH
+#	define CFG_ENV_IS_IN_FLASH		1
+#	define CFG_ENV_SIZE			CFG_FLASH_SECTOR_SIZE
+#endif
+
+#define DEBUG
+
+#ifdef COMPRESSED_UBOOT
+#undef  CFG_ENV_IS_IN_FLASH
+#undef  CFG_ENV_IS_IN_NAND
+#define CFG_ENV_IS_NOWHERE		1
+#endif
+
+#define CONFIG_COMMANDS			(ATH_CFG_COMMANDS | ATH_EXTRA_CMD)
+
+#define CONFIG_IPADDR			192.168.1.1
+#define CONFIG_SERVERIP			192.168.1.10
+#define CONFIG_ETHADDR			0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN	1
+
+#define CFG_PHY_ADDR			0
+#define CFG_GMII			0
+#define CFG_MII0_RMII			1
+#define CFG_AG7100_GE0_RMII		1
+
+#define CFG_BOOTM_LEN			(16 << 20) /* 16 MB */
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2		"hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL				0x9fff1000
+#define BOARDCAL			0x9fff0000
+#define ATHEROS_PRODUCT_ID		137
+#define CAL_SECTOR			(CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define ATH_ART_PCICFG_OFFSET		12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __BOARD_955X_H */
diff --git a/include/configs/cus136.h b/include/configs/cus136.h
new file mode 100644
index 0000000..82dae39
--- /dev/null
+++ b/include/configs/cus136.h
@@ -0,0 +1,201 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+
+#ifdef S25FL128P
+	#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+	#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#else
+	#define CFG_FLASH_SECTOR_SIZE   (256*1024)
+	#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_ENV_SECT_SIZE       CFG_FLASH_SECTOR_SIZE
+#define CFG_FLASH_SIZE          0x1000000 /* Total flash size */
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),256k(u-boot-env),3072k(rootfs),1024k(uImage),3072k(spare-rootfs),1024k(spare-uImage),64k(mib0),64k(mib1),4096k(ct),3392k(var),64k(ART)"
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),1024k(uImage)"
+
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ	CFG_PLL_350_350_175
+
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#	define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#	define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#	define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#	define CFG_HZ          (420000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#	define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#	define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+/* DDR value from Flash */
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada  
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV |	\
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_ETHREG ))
+#define CFG_ATHRS26_PHY  1
+#define CONFIG_IPADDR   192.168.1.1
+#define CONFIG_SERVERIP 192.168.1.10
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                        0xbfff1000
+#define BOARDCAL                       0xbfff0000
+#define ATHEROS_PRODUCT_ID             138
+#define CAL_SECTOR                     (CFG_MAX_FLASH_SECT - 1)
+
+/* For Kite, only PCI-e interface is valid */
+#define AR7240_ART_PCICFG_OFFSET        3
+
+
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/cus97.h b/include/configs/cus97.h
new file mode 100644
index 0000000..ad2404f
--- /dev/null
+++ b/include/configs/cus97.h
@@ -0,0 +1,147 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7100.h>
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0xbf000000
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7100-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),1024k(uImage)"
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7100-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),1024k(uImage)"
+
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ	CFG_PLL_400_400_100
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0xbf040000
+#define CFG_ENV_SIZE		0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0xbf550000"
+//#define CONFIG_FLASH_16BIT
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#define CFG_DDR_REFRESH_VAL     0x4c00
+#define CFG_DDR_CONFIG_VAL      0x67bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x161
+#define CFG_DDR_EXT_MODE_VAL    0x2
+#define CFG_DDR_MODE_VAL        0x61
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+
+#define CFG_DDR_REFRESH_VAL     0x5f00
+#define CFG_DDR_CONFIG_VAL      0x77bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x131
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x31
+#endif
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL			    0x83d1f6a2
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0xffff
+
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | \
+            CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET |\
+   CFG_CMD_ENV | CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB \
+   | CFG_CMD_ELF ))
+
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.27
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+#define CFG_ATHRS26_PHY 
+#define CFG_PHY_ADDR 0 
+
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/db12x-extender.h b/include/configs/db12x-extender.h
new file mode 100644
index 0000000..7290b61
--- /dev/null
+++ b/include/configs/db12x-extender.h
@@ -0,0 +1,419 @@
+/*
+ * This file contains the configuration parameters for the db120 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#if !defined(CONFIG_ATH_NAND_BR)
+#define FLASH_SIZE 8
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000    /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_WASP_SUPPORT 1
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+// Set this to zero, for 16bit ddr2
+#define DDR2_32BIT_SUPPORT 	1
+
+/* S16 specific defines */
+
+#define CONFIG_AG7240_GE0_IS_CONNECTED 1
+
+/* Assuming nand flash wouldn't use compressed u-boot */
+#ifdef CONFIG_ATH_NAND_BR
+#	define CFG_FLASH_BASE			0
+#else
+	/*
+	 * We boot from this flash
+	 */
+#	define CFG_FLASH_BASE			0x9f000000
+#endif
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+/* Address and size of Primary Environment Sector   */
+#define CFG_ENV_ADDR        CFG_FLASH_BASE+UBOOT_FLASH_SIZE
+#define CFG_ENV_SIZE        CFG_FLASH_SECTOR_SIZE
+
+
+#undef CONFIG_BOOTARGS
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ath-nor0:256k(u-boot),256k(u-boot-env),3072k(rootfs),1024k(uImage),3072k(spare-rootfs),1024k(spare-uImage),64k(mib0),64k(mib1),4096k(ct),3392k(var),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:256k(u-boot),256k(u-boot-env),5120k(rootfs),1024k(uImage)"
+#else /* FLASH_SIZE=8M */
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ath-nor0:64k(u-boot),6592k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:64k(u-boot),6592k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#endif
+#endif
+
+#if (FLASH_SIZE == 16)
+#define CFG_KERNEL_ADDR 0x9f550000
+#else
+#define CFG_KERNEL_ADDR 0x9f680000
+#endif
+#define CFG_MIB0_ADDR		0x9f7e0000
+
+#define CONFIG_BOOTCOMMAND "bootm ${KERNELADDR}"
+
+#ifndef CFG_LOAD_ADDR
+#define CFG_LOAD_ADDR		0x80060000
+#endif
+#ifndef COMPRESSED_UBOOT
+#define CFG_FS_ADDR			0x9f050000//(CFG_ENV_ADDR+CFG_ENV_SIZE)
+#else
+#define CFG_FS_ADDR			0x9f010000//(CFG_FLASH_BASE+UBOOT_FLASH_SIZE)
+#endif /* COMPRESSED_UBOOT */
+#define ENV_FS_ADDR			"FSADDR=" MK_STR(CFG_FS_ADDR) "\0"
+
+#define ENV_UBOOT_ADDR		"UBOOTADDR=" MK_STR(CFG_FLASH_BASE) "\0"
+#define ENV_KERNEL_ADDR		"KERNELADDR=" MK_STR(CFG_KERNEL_ADDR) "\0"
+#define ENV_MIB0_ADDR		"MIB0ADDR=" MK_STR(CFG_MIB0_ADDR) "\0"
+
+#define ENV_UPDATE \
+    "update=tftpboot " MK_STR(CFG_LOAD_ADDR) " ${filename} && "	\
+            "erase ${loadaddr} +${filesize} && "				\
+            "cp.b ${fileaddr} ${loadaddr} ${filesize}\0"
+
+#define ENV_UPDATE_KERNEL \
+    "updk=loadaddr=${KERNELADDR} && filename=zImage.uImage && " \
+    "run update\0"
+
+#define ENV_UPDATE_FS \
+    "updfs=loadaddr=${FSADDR} && filename=rootfs-squashfs && " \
+    "run update\0"
+
+#ifdef COMPRESSED_UBOOT
+#define UBOOT_FILENAME "tuboot.bin"
+#else
+#define UBOOT_FILENAME "u-boot.bin"
+#endif
+
+#define ENV_UPDATE_UBOOT \
+    "updub=loadaddr=${UBOOTADDR} && filename=" UBOOT_FILENAME " && " \
+    "run update\0"
+
+#define ENV_UPDATE_ALL \
+	"updall=run updub && run updfs && run updk\0"
+
+#define ENV_ERASE_MIB0 \
+	"erasemib0=erase ${MIB0ADDR} +0x10000"
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+		ENV_UBOOT_ADDR \
+		ENV_FS_ADDR \
+		ENV_KERNEL_ADDR \
+		ENV_MIB0_ADDR \
+		ENV_UPDATE \
+		ENV_UPDATE_KERNEL \
+		ENV_UPDATE_FS \
+		ENV_UPDATE_UBOOT \
+		ENV_UPDATE_ALL \
+		ENV_ERASE_MIB0 \
+		""
+
+#undef CFG_PLL_FREQ
+
+//#define CFG_PLL_FREQ	CFG_PLL_600_266_133
+//#define CFG_PLL_FREQ	CFG_PLL_600_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_566_550_275
+//#define CFG_PLL_FREQ	CFG_PLL_566_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_600_332_166
+//#define CFG_PLL_FREQ	CFG_PLL_566_475_237
+//#define CFG_PLL_FREQ	CFG_PLL_600_575_287
+//#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_533_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_450_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_500_1G_250
+//#define CFG_PLL_FREQ	CFG_PLL_600_550_1_1G_275
+//#define CFG_PLL_FREQ	CFG_PLL_600_350_175
+//#define CFG_PLL_FREQ	CFG_PLL_600_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_600_1_2G_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_300_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_500_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_400_200_200
+#if !defined(CONFIG_AP123) && !defined(CONFIG_MI124)
+#define CFG_PLL_FREQ    CFG_PLL_560_480_240
+#else
+#define CFG_PLL_FREQ    CFG_PLL_533_400_200
+#endif
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_500_400_200)
+#   define CFG_HZ          (500000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_400_200) || (CFG_PLL_FREQ == CFG_PLL_600_450_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_600_300) || (CFG_PLL_FREQ == CFG_PLL_600_550_275) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_332_166) || (CFG_PLL_FREQ == CFG_PLL_600_575_287) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_525_262) || (CFG_PLL_FREQ == CFG_PLL_600_332_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_266_133) || (CFG_PLL_FREQ == CFG_PLL_600_266_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_650_325) ||  (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_1G_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_550_1_1G_275)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_350_175)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_300_150)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_533_400_200) || (CFG_PLL_FREQ == CFG_PLL_533_500_250)
+#   define CFG_HZ          (533000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_700_400_200)
+#   define CFG_HZ          (700000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_650_600_300)
+#   define CFG_HZ          (650000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_566_475_237) || (CFG_PLL_FREQ == CFG_PLL_566_450_225) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_550_275) || (CFG_PLL_FREQ == CFG_PLL_566_525_262) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_400_200) || (CFG_PLL_FREQ == CFG_PLL_566_500_250)
+#   define CFG_HZ          (566000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+#define CFG_INIT_SRAM_SP_OFFSET 0xbd007000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif
+
+#if 0
+#ifdef CONFIG_ATH_NAND_BR
+#define CONFIG_BOOTCOMMAND "bootm 0x80000"
+#define CFG_ENV_ADDR		0x00040000
+#else  /* CONFIG_ATH_NAND_BR */
+#define CFG_ENV_ADDR		0x9f040000
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else  /* FLASH_SIZE == 16 */
+#ifdef COMPRESSED_UBOOT
+#if (FLASH_SIZE == 4)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else  /* FLASH_SIZE == 4 */
+#define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#endif  /* FLASH_SIZE == 4 */
+#else /* COMPRESSED_UBOOT */
+#if defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f680000"
+#endif
+#endif  /* COMPRESSED_UBOOT */
+#endif  /* FLASH_SIZE == 16 */
+#endif  /* CONFIG_ATH_NAND_BR */
+#endif
+
+
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR settings for WASP */
+
+#define CFG_DDR_REFRESH_VAL     0x4270
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL     0x9dd0e6a8
+
+
+
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32	0xff
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16	0xffff
+
+#if DDR2_32BIT_SUPPORT
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32
+#else
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16
+#endif
+
+#define CFG_DDR1_RD_DATA_THIS_CYCLE_VAL		0xffff
+#define CFG_SDRAM_RD_DATA_THIS_CYCLE_VAL	0xffffffff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_JFFS2 | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+#else
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CONFIG_IPADDR   192.168.1.1
+#define CONFIG_SERVERIP 192.168.1.10
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0x9fff1000
+#define BOARDCAL                        0x9fff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/db12x-hybrid.h b/include/configs/db12x-hybrid.h
new file mode 100644
index 0000000..b53aac3
--- /dev/null
+++ b/include/configs/db12x-hybrid.h
@@ -0,0 +1,495 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#ifndef FLASH_SIZE
+#define FLASH_SIZE		8
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000    /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_WASP_SUPPORT 1
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+// Set this to zero, for 16bit ddr2
+#define DDR2_32BIT_SUPPORT 	1
+
+/* S16 specific defines */
+
+#define CONFIG_AG7240_GE0_IS_CONNECTED 1
+
+/* NOR Flash start address */
+#define CFG_FLASH_BASE			0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#if CONFIG_MI124
+#define BC "bc=mi124_f1e\0"
+#endif
+#if CONFIG_AP123
+#define BC "bc=ap123\0"
+#endif
+
+#define __gen_cmd(n, a, f, ec, cc, el)		\
+	#n "=tftp 0x80060000 ${dir}" #f "&&"	\
+	#ec " " #a " " #el "&&"			\
+	#cc " $fileaddr " #a " $filesize\0"
+
+#define gen_cmd(n, a, f)			\
+	__gen_cmd(n, a, f, erase, cp.b, +$filesize)
+
+#define gen_cmd_el(n, a, f, el)			\
+	__gen_cmd(n, a, f, erase, cp.b, +el)
+
+#define nand_gen_cmd(n, a, f, s)		\
+	__gen_cmd(n, a, f, nand erase, nand write, s)
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR	// nand boot rom
+#		define ATH_U_CMD	nand_gen_cmd(lu, 0x0, 2fw.bin, 0x40000)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		define ATH_ROOT_DEV	"31:03"
+#		define CFG_ENV_ADDR	0x00040000
+#               ifdef CONFIG_DB12X_HGW
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nand:512k(u-boot),128k(u-boot-env),3m(uImage),15m(rootfs),128k(mib0),128k(caldata)"
+#		define CFG_ENV_ADDR	0x00080000
+#               endif
+#	else	//dual flash
+#		define ATH_U_CMD	gen_cmd(lu, 0x9f000000, u-boot.bin)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nor0:320k(u-boot-and-env),6336k(free);ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		define ATH_ROOT_DEV	"31:05"
+#		define CFG_ENV_ADDR	0x9f040000
+#	endif
+#       ifdef CONFIG_DB12X_HGW
+#	        define ATH_F_FILE		db12x-hgw-nand-jffs2
+#	        define ATH_F_LEN		0xf00000
+#	        define ATH_F_ADDR		0x3a0000
+#	        define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	        define ATH_K_ADDR		0xa0000
+#	        define ATH_F_CMD		nand_gen_cmd(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#	        define ATH_K_CMD		nand_gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE, 0x140000)
+#	        define ATH_EXTRA_ENV		"bootdevice=0\0"
+#	        define CONFIG_BOOTCOMMAND	"nboot 0x81000000 0 0xa0000"
+#       else
+#	        define ATH_F_FILE		db12x${bc}-nand-jffs2
+#	        define ATH_F_LEN		0x700000
+#	        define ATH_F_ADDR		0x1c0000
+#	        define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	        define ATH_K_ADDR		0x80000
+#	        define ATH_F_CMD		nand_gen_cmd(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#	        define ATH_K_CMD		nand_gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE, 0x140000)
+#	        define ATH_EXTRA_ENV		"bootdevice=0\0"
+#	        define CONFIG_BOOTCOMMAND	"nboot 0x81000000 0 0x80000"
+#       endif
+#elif defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#	ifdef COMPRESSED_UBOOT
+#		define ATH_U_FILE	tuboot.bin
+#		define ATH_F_FILE	${bc}-jffs2
+#		define ATH_F_LEN	$filesize
+#		define ATH_F_ADDR	0x9f010000
+#		define ATH_K_FILE	vmlinux_${bc}.lzma.uImage
+#		define ATH_K_ADDR	0x9f300000
+		/*
+		 * For compressed uboot, environment sector is not used.
+		 * Hence the mtd partition indices get reduced by 1.
+		 * This conflicts with
+		 *	- minor no. for /dev/caldata in
+		 *		build/scripts/{board}/dev.txt
+		 *	- root=<rooot dev> kernel cmdline parameter
+		 * Hence, doing a dummy split of the u-boot partition
+		 * to maintain the same minor no. as in the normal u-boot.
+		 */
+#		define MTDPARTS_DEFAULT	"mtdparts=ath-nor0:32k(u-boot1),32k(u-boot2),3008k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#	else /* COMPRESSED_UBOOT */
+#		define ATH_U_FILE	u-boot.bin
+#		define ATH_F_FILE	${bc}-jffs2
+#		define ATH_F_LEN	$filesize
+#		define ATH_F_ADDR	0x9f050000
+#		define ATH_K_FILE	vmlinux_${bc}.lzma.uImage
+#		define ATH_K_ADDR	0x9f300000
+#		define MTDPARTS_DEFAULT	"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#	endif /* COMPRESSED_UBOOT */
+#elif defined(CONFIG_DB12X_P2P)
+#	define ATH_U_FILE		u-boot.bin
+#	define ATH_F_FILE		db12x-p2p${bc}-jffs2
+#	define ATH_F_LEN		0x630000
+#	define ATH_F_ADDR		0x9f050000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x9f680000
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#else
+#	define ATH_U_FILE		u-boot.bin
+#	define ATH_F_FILE		db12x${bc}-jffs2
+#	define ATH_F_LEN		0x630000
+#	define ATH_F_ADDR		0x9f050000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x9f680000
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#endif /*CONFIG_MI124*/
+
+#ifndef ATH_ROOT_DEV
+#	define ATH_ROOT_DEV	"31:02"
+#endif
+
+#ifndef ATH_EXTRA_ENV
+#	define ATH_EXTRA_ENV
+#endif
+
+#ifndef ATH_U_CMD
+#	define ATH_U_CMD	gen_cmd(lu, 0x9f000000, ATH_U_FILE)
+#endif
+
+#ifndef ATH_F_CMD
+#	define ATH_F_CMD	gen_cmd_el(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#endif
+
+#ifndef ATH_K_CMD
+#	define ATH_K_CMD	gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE)
+#endif
+
+#define CONFIG_EXTRA_ENV_SETTINGS	\
+	"dir=\0" ATH_U_CMD ATH_F_CMD ATH_K_CMD ""
+
+#define	CONFIG_BOOTARGS		"console=ttyS0,115200 root=" ATH_ROOT_DEV " rootfstype=jffs2 init=/sbin/init " MTDPARTS_DEFAULT
+
+#undef CFG_PLL_FREQ
+
+//#define CFG_PLL_FREQ	CFG_PLL_600_266_133
+//#define CFG_PLL_FREQ	CFG_PLL_600_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_566_550_275
+//#define CFG_PLL_FREQ	CFG_PLL_566_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_600_332_166
+//#define CFG_PLL_FREQ	CFG_PLL_566_475_237
+//#define CFG_PLL_FREQ	CFG_PLL_600_575_287
+//#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_533_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_450_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_500_1G_250
+//#define CFG_PLL_FREQ	CFG_PLL_600_550_1_1G_275
+//#define CFG_PLL_FREQ	CFG_PLL_600_350_175
+//#define CFG_PLL_FREQ	CFG_PLL_600_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_600_1_2G_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_300_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_500_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_400_200_200
+#if !defined(CONFIG_AP123) && !defined(CONFIG_MI124)
+#define CFG_PLL_FREQ    CFG_PLL_560_480_240
+#else
+#define CFG_PLL_FREQ    CFG_PLL_533_400_200
+#endif
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_500_400_200)
+#   define CFG_HZ          (500000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_400_200) || (CFG_PLL_FREQ == CFG_PLL_600_450_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_600_300) || (CFG_PLL_FREQ == CFG_PLL_600_550_275) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_332_166) || (CFG_PLL_FREQ == CFG_PLL_600_575_287) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_525_262) || (CFG_PLL_FREQ == CFG_PLL_600_332_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_266_133) || (CFG_PLL_FREQ == CFG_PLL_600_266_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_650_325) ||  (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_1G_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_550_1_1G_275)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_350_175)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_300_150)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_533_400_200) || (CFG_PLL_FREQ == CFG_PLL_533_500_250)
+#   define CFG_HZ          (533000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_700_400_200)
+#   define CFG_HZ          (700000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_650_600_300)
+#   define CFG_HZ          (650000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_560_480_240)
+#   define CFG_HZ          (560000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_566_475_237) || (CFG_PLL_FREQ == CFG_PLL_566_450_225) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_550_275) || (CFG_PLL_FREQ == CFG_PLL_566_525_262) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_400_200) || (CFG_PLL_FREQ == CFG_PLL_566_500_250)
+#   define CFG_HZ          (566000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+#define CFG_INIT_SRAM_SP_OFFSET 0xbd007000
+
+#ifndef CONFIG_ATH_NAND_SUPPORT
+#	define CFG_ENV_ADDR		0x9f040000
+#	if (FLASH_SIZE == 16)
+#		define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#	else  /* FLASH_SIZE == 16 */
+#		ifdef COMPRESSED_UBOOT
+#			if (FLASH_SIZE == 4)
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#			else  /* FLASH_SIZE == 4 */
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#			endif  /* FLASH_SIZE == 4 */
+#		else /* COMPRESSED_UBOOT */
+#			if defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#			else
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f680000"
+#			endif
+#		endif  /* COMPRESSED_UBOOT */
+#	endif  /* FLASH_SIZE == 16 */
+#endif
+
+
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR settings for WASP */
+
+#define CFG_DDR_REFRESH_VAL     0x4270
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL     0x9dd0e6a8
+
+
+
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32	0xff
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16	0xffff
+
+#if DDR2_32BIT_SUPPORT
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32
+#else
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16
+#endif
+
+#define CFG_DDR1_RD_DATA_THIS_CYCLE_VAL		0xffff
+#define CFG_SDRAM_RD_DATA_THIS_CYCLE_VAL	0xffffffff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define ATH_CFG_COMMANDS	((			\
+				CONFIG_CMD_DFL	|	\
+				CFG_CMD_DHCP	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_PCI	|	\
+				CFG_CMD_FLS	|	\
+				CFG_CMD_MII	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET	|	\
+				CFG_CMD_ENV	|	\
+				CFG_CMD_PLL	|	\
+				CFG_CMD_FLASH	|	\
+				CFG_CMD_RUN	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_DDR	|	\
+				CFG_CMD_ETHREG		\
+				) & ~(			\
+				CFG_CMD_IMLS	|	\
+				CFG_CMD_FLASH		\
+				))
+#else
+#define ATH_CFG_COMMANDS	(CONFIG_CMD_DFL	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET)
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR
+#		define CFG_ENV_IS_IN_NAND	1
+#		define CFG_ENV_OFFSET		0x40000u
+#		define CFG_ENV_SIZE		0x40000u
+#               ifdef CONFIG_DB12X_HGW
+#		        define CFG_ENV_OFFSET		0x80000u
+#		        define CFG_ENV_SIZE		0x20000u
+#               endif          
+#		define ATH_EXTRA_CMD		CFG_CMD_NAND
+#	else
+#		define CFG_ENV_IS_IN_FLASH	1
+#		define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+#		define ATH_EXTRA_CMD		(CFG_CMD_NAND | CFG_CMD_FLASH)
+#	endif
+#	define NAND_MAX_CHIPS			1
+#	define CFG_MAX_NAND_DEVICE		1
+#else
+#	define ATH_EXTRA_CMD			CFG_CMD_FLASH
+#	define CFG_ENV_IS_IN_FLASH		1
+#	define CFG_ENV_SIZE			CFG_FLASH_SECTOR_SIZE
+#endif
+
+#define DEBUG
+
+#ifdef COMPRESSED_UBOOT
+#undef  CFG_ENV_IS_IN_FLASH
+#undef  CFG_ENV_IS_IN_NAND
+#define CFG_ENV_IS_NOWHERE		1
+#endif
+
+#define CONFIG_COMMANDS			(ATH_CFG_COMMANDS | ATH_EXTRA_CMD)
+
+#define CONFIG_IPADDR			192.168.1.1
+#define CONFIG_SERVERIP			192.168.1.10
+#define CONFIG_ETHADDR			0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN	1
+
+
+#define CFG_PHY_ADDR			0
+#define CFG_GMII			0
+#define CFG_MII0_RMII			1
+#define CFG_AG7100_GE0_RMII		1
+
+#define CFG_BOOTM_LEN			(16 << 20) /* 16 MB */
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2		"hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0x9fff1000
+#define BOARDCAL                        0x9fff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/db12x.h b/include/configs/db12x.h
new file mode 100644
index 0000000..3c3de71
--- /dev/null
+++ b/include/configs/db12x.h
@@ -0,0 +1,484 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#ifndef FLASH_SIZE
+#define FLASH_SIZE		8
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000    /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_WASP_SUPPORT 1
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short
+
+// Set this to zero, for 16bit ddr2
+#define DDR2_32BIT_SUPPORT 	1
+
+/* S16 specific defines */
+
+#define CONFIG_AG7240_GE0_IS_CONNECTED 1
+
+#if defined(CONFIG_ATH_NAND_SUPPORT) && defined(COMPRESSED_UBOOT)
+#define CFG_FLASH_BASE			0xa0100000
+#else
+/* NOR Flash start address */
+#define CFG_FLASH_BASE			0x9f000000
+#endif
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/*
+ * The following #defines are needed to get flash environment right
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#if CONFIG_MI124
+#define BC "bc=mi124_f1e\0"
+#endif
+#if CONFIG_AP123
+#define BC "bc=ap123\0"
+#endif
+
+#ifndef BC
+#define BC
+#endif
+
+#define __gen_cmd(n, a, f, ec, cc, el)		\
+	#n "=tftp 0x80060000 ${dir}" #f "&&"	\
+	#ec " " #a " " #el "&&"			\
+	#cc " $fileaddr " #a " $filesize\0"
+
+#define gen_cmd(n, a, f)			\
+	__gen_cmd(n, a, f, erase, cp.b, +$filesize)
+
+#define gen_cmd_el(n, a, f, el)			\
+	__gen_cmd(n, a, f, erase, cp.b, +el)
+
+#define nand_gen_cmd(n, a, f, s)		\
+	__gen_cmd(n, a, f, nand erase, nand write, s)
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR	// nand boot rom
+#		if defined(COMPRESSED_UBOOT)
+#			define ATH_U_CMD	nand_gen_cmd(lu, 0x0, 2fw.bin, 0x20000)
+#			define MTDPARTS_DEFAULT	"mtdparts=ath-nand:128k(u-boot),384k(free),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		else
+#			define ATH_U_CMD	nand_gen_cmd(lu, 0x0, 2fw.bin, 0x40000)
+#			define MTDPARTS_DEFAULT	"mtdparts=ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		endif
+#		define ATH_ROOT_DEV	"31:03"
+#		define CFG_ENV_ADDR	0x00040000
+#	else	//dual flash
+#		define ATH_U_CMD	gen_cmd(lu, 0x9f000000, u-boot.bin)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nor0:320k(u-boot-and-env),6336k(free);ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		define ATH_ROOT_DEV	"31:05"
+#		define CFG_ENV_ADDR	0x9f040000
+#	endif
+#	define ATH_F_FILE		db12x${bc}-nand-jffs2${ns}
+#	define ATH_F_LEN		0x700000
+#	define ATH_F_ADDR		0x1c0000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x80000
+#	define ATH_F_CMD		nand_gen_cmd(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#	define ATH_K_CMD		nand_gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE, 0x140000)
+#	define ATH_EXTRA_ENV		"bootdevice=0\0"
+#	define CONFIG_BOOTCOMMAND	"nboot 0x81000000 0 0x80000"
+#elif defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#	ifdef COMPRESSED_UBOOT
+#		define ATH_U_FILE	tuboot.bin
+#		define ATH_F_FILE	${bc}-jffs2
+#		define ATH_F_LEN	$filesize
+#		define ATH_F_ADDR	0x9f010000
+#		define ATH_K_FILE	vmlinux_${bc}.lzma.uImage
+#		define ATH_K_ADDR	0x9f300000
+		/*
+		 * For compressed uboot, environment sector is not used.
+		 * Hence the mtd partition indices get reduced by 1.
+		 * This conflicts with
+		 *	- minor no. for /dev/caldata in
+		 *		build/scripts/{board}/dev.txt
+		 *	- root=<rooot dev> kernel cmdline parameter
+		 * Hence, doing a dummy split of the u-boot partition
+		 * to maintain the same minor no. as in the normal u-boot.
+		 */
+#		define MTDPARTS_DEFAULT	"mtdparts=ath-nor0:32k(u-boot1),32k(u-boot2),3008k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#	else /* COMPRESSED_UBOOT */
+#		define ATH_U_FILE	u-boot.bin
+#		define ATH_F_FILE	${bc}-jffs2
+#		define ATH_F_LEN	$filesize
+#		define ATH_F_ADDR	0x9f050000
+#		define ATH_K_FILE	vmlinux_${bc}.lzma.uImage
+#		define ATH_K_ADDR	0x9f300000
+#		define MTDPARTS_DEFAULT	"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#	endif /* COMPRESSED_UBOOT */
+#elif defined(CONFIG_DB12X_P2P)
+#	define ATH_U_FILE		u-boot.bin
+#	define ATH_F_FILE		db12x-p2p${bc}-jffs2
+#	define ATH_F_LEN		0x630000
+#	define ATH_F_ADDR		0x9f050000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x9f680000
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#else
+#	define ATH_U_FILE		u-boot.bin
+#	define ATH_F_FILE		db12x${bc}-jffs2
+#	define ATH_F_LEN		0x630000
+#	define ATH_F_ADDR		0x9f050000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x9f680000
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#endif /*CONFIG_MI124*/
+
+#ifndef ATH_ROOT_DEV
+#	define ATH_ROOT_DEV	"31:02"
+#endif
+
+#ifndef ATH_EXTRA_ENV
+#	define ATH_EXTRA_ENV
+#endif
+
+#ifndef ATH_U_CMD
+#	define ATH_U_CMD	gen_cmd(lu, 0x9f000000, ATH_U_FILE)
+#endif
+
+#ifndef ATH_F_CMD
+#	define ATH_F_CMD	gen_cmd_el(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#endif
+
+#ifndef ATH_K_CMD
+#	define ATH_K_CMD	gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE)
+#endif
+
+#define CONFIG_EXTRA_ENV_SETTINGS	\
+	"dir=\0" ATH_U_CMD ATH_F_CMD ATH_K_CMD ""
+
+#define	CONFIG_BOOTARGS		"console=ttyS0,115200 root=" ATH_ROOT_DEV " rootfstype=jffs2 init=/sbin/init " MTDPARTS_DEFAULT
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_AP123
+#define CFG_PLL_FREQ	CFG_PLL_535_400_200
+#elif defined(CONFIG_ATH_NAND_SUPPORT)	// NAND on DB120
+#define CFG_PLL_FREQ	CFG_PLL_560_400_200
+#else					// DB120 and MI124
+#define CFG_PLL_FREQ	CFG_PLL_560_450_225
+#endif
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200) || (CFG_PLL_FREQ == CFG_PLL_400_480_240)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_500_400_200)
+#   define CFG_HZ          (500000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_400_200) || (CFG_PLL_FREQ == CFG_PLL_600_450_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_600_300) || (CFG_PLL_FREQ == CFG_PLL_600_550_275) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_332_166) || (CFG_PLL_FREQ == CFG_PLL_600_575_287) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_525_262) || (CFG_PLL_FREQ == CFG_PLL_600_332_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_266_133) || (CFG_PLL_FREQ == CFG_PLL_600_266_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_650_325) ||  (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_1G_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_550_1_1G_275)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_350_175)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_300_150)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_533_400_200) || (CFG_PLL_FREQ == CFG_PLL_533_500_250)
+#   define CFG_HZ          (533000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_535_400_200)
+#   define CFG_HZ          (535000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_700_400_200)
+#   define CFG_HZ          (700000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_650_600_300)
+#   define CFG_HZ          (650000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_560_480_240) || (CFG_PLL_FREQ == CFG_PLL_560_400_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_560_450_225)
+#   define CFG_HZ          (560000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_566_475_237) || (CFG_PLL_FREQ == CFG_PLL_566_450_225) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_550_275) || (CFG_PLL_FREQ == CFG_PLL_566_525_262) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_400_200) || (CFG_PLL_FREQ == CFG_PLL_566_500_250)
+#   define CFG_HZ          (566000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+#define CFG_INIT_SRAM_SP_OFFSET	0xbd007000
+
+#ifndef CONFIG_ATH_NAND_SUPPORT
+#	define CFG_ENV_ADDR		0x9f040000
+#	if (FLASH_SIZE == 16)
+#		define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#	else  /* FLASH_SIZE == 16 */
+#		ifdef COMPRESSED_UBOOT
+#			if (FLASH_SIZE == 4)
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#			else  /* FLASH_SIZE == 4 */
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#			endif  /* FLASH_SIZE == 4 */
+#		else /* COMPRESSED_UBOOT */
+#			if defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#			else
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f680000"
+#			endif
+#		endif  /* COMPRESSED_UBOOT */
+#	endif  /* FLASH_SIZE == 16 */
+#endif
+
+
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR settings for WASP */
+
+#define CFG_DDR_REFRESH_VAL     0x4270
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL     0x9dd0e6a8
+
+
+
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32	0xff
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16	0xffff
+
+#if DDR2_32BIT_SUPPORT
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32
+#else
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16
+#endif
+
+#define CFG_DDR1_RD_DATA_THIS_CYCLE_VAL		0xffff
+#define CFG_SDRAM_RD_DATA_THIS_CYCLE_VAL	0xffffffff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define ATH_CFG_COMMANDS	((			\
+				CONFIG_CMD_DFL	|	\
+				CFG_CMD_DHCP	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_PCI	|	\
+				CFG_CMD_FLS	|	\
+				CFG_CMD_MII	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET	|	\
+				CFG_CMD_ENV	|	\
+				CFG_CMD_PLL	|	\
+				CFG_CMD_FLASH	|	\
+				CFG_CMD_RUN	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_DDR	|	\
+				CFG_CMD_ETHREG		\
+				) & ~(			\
+				CFG_CMD_IMLS	|	\
+				CFG_CMD_FLASH		\
+				))
+#else
+#	ifdef CONFIG_ATH_NAND_BR
+#		define ATH_CFG_COMMANDS		((			\
+						CONFIG_CMD_DFL	|	\
+						CFG_CMD_PING	|	\
+						CFG_CMD_NET) & ~(	\
+						CFG_CMD_FLASH		\
+						))
+#	else
+#		define ATH_CFG_COMMANDS		(CONFIG_CMD_DFL	|	\
+						CFG_CMD_PING	|	\
+						CFG_CMD_NET)
+#	endif
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR
+#		define CFG_ENV_IS_IN_NAND	1
+#		define CFG_ENV_OFFSET		0x40000u
+#		define CFG_ENV_SIZE		0x40000u
+#		define ATH_EXTRA_CMD		CFG_CMD_NAND
+#	else
+#		define CFG_ENV_IS_IN_FLASH	1
+#		define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+#		define ATH_EXTRA_CMD		(CFG_CMD_NAND | CFG_CMD_FLASH)
+#	endif
+#	define NAND_MAX_CHIPS			1
+#	define CFG_MAX_NAND_DEVICE		1
+#else
+#	define ATH_EXTRA_CMD			CFG_CMD_FLASH
+#	define CFG_ENV_IS_IN_FLASH		1
+#	define CFG_ENV_SIZE			CFG_FLASH_SECTOR_SIZE
+#endif
+
+#define DEBUG
+
+#ifdef COMPRESSED_UBOOT
+#undef  CFG_ENV_IS_IN_FLASH
+#undef  CFG_ENV_IS_IN_NAND
+#define CFG_ENV_IS_NOWHERE		1
+#endif
+
+#define CONFIG_COMMANDS			(ATH_CFG_COMMANDS | ATH_EXTRA_CMD)
+
+#define CONFIG_IPADDR			192.168.1.1
+#define CONFIG_SERVERIP			192.168.1.10
+#define CONFIG_ETHADDR			0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN	1
+
+
+#define CFG_PHY_ADDR			0
+#define CFG_GMII			0
+#define CFG_MII0_RMII			1
+#define CFG_AG7100_GE0_RMII		1
+
+#define CFG_BOOTM_LEN			(16 << 20) /* 16 MB */
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2		"hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0x9fff1000
+#define BOARDCAL                        0x9fff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/dhp1565.h b/include/configs/dhp1565.h
new file mode 100644
index 0000000..262ed07
--- /dev/null
+++ b/include/configs/dhp1565.h
@@ -0,0 +1,420 @@
+/*
+ * This file contains the configuration parameters for the db120 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#if !defined(CONFIG_ATH_NAND_BR)
+#define FLASH_SIZE 8
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000    /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_WASP_SUPPORT 1
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+// Set this to zero, for 16bit ddr2
+#define DDR2_32BIT_SUPPORT 	1
+
+/* S16 specific defines */
+
+#define CONFIG_AG7240_GE0_IS_CONNECTED 1
+
+/* Assuming nand flash wouldn't use compressed u-boot */
+#ifdef CONFIG_ATH_NAND_BR
+#	define CFG_FLASH_BASE			0
+#else
+	/*
+	 * We boot from this flash
+	 */
+#	define CFG_FLASH_BASE			0x9f000000
+#endif
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+/* Address and size of Primary Environment Sector   */
+#define CFG_ENV_ADDR        (CFG_FLASH_BASE+UBOOT_FLASH_SIZE)
+#define CFG_ENV_SIZE        CFG_FLASH_SECTOR_SIZE
+
+
+#undef CONFIG_BOOTARGS
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ath-nor0:256k(u-boot),256k(u-boot-env),3072k(rootfs),1024k(uImage),3072k(spare-rootfs),1024k(spare-uImage),64k(mib0),64k(mib1),4096k(ct),3392k(var),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:256k(u-boot),256k(u-boot-env),5120k(rootfs),1024k(uImage)"
+#else /* FLASH_SIZE=8M */
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ath-nor0:64k(u-boot),6592k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:64k(u-boot),6592k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#endif
+#endif
+
+#if (FLASH_SIZE == 16)
+#define CFG_KERNEL_ADDR 0x9f550000
+#else
+#define CFG_KERNEL_ADDR 0x9f680000
+#endif
+#define CFG_MIB0_ADDR		0x9f7e0000
+
+#define CONFIG_BOOTCOMMAND "bootm ${KERNELADDR}"
+
+#ifndef CFG_LOAD_ADDR
+#define CFG_LOAD_ADDR		0x80060000
+#endif
+#ifndef COMPRESSED_UBOOT
+#define CFG_FS_ADDR			0x9f050000//(CFG_ENV_ADDR+CFG_ENV_SIZE)
+#else
+#define CFG_FS_ADDR			0x9f010000//(CFG_FLASH_BASE+UBOOT_FLASH_SIZE)
+#endif /* COMPRESSED_UBOOT */
+#define ENV_FS_ADDR			"FSADDR=" MK_STR(CFG_FS_ADDR) "\0"
+
+#define ENV_UBOOT_ADDR		"UBOOTADDR=" MK_STR(CFG_FLASH_BASE) "\0"
+#define ENV_KERNEL_ADDR		"KERNELADDR=" MK_STR(CFG_KERNEL_ADDR) "\0"
+#define ENV_MIB0_ADDR		"MIB0ADDR=" MK_STR(CFG_MIB0_ADDR) "\0"
+
+#define ENV_UPDATE \
+    "update=tftpboot " MK_STR(CFG_LOAD_ADDR) " ${filename} && "	\
+            "erase ${loadaddr} +${filesize} && "				\
+            "cp.b ${fileaddr} ${loadaddr} ${filesize}\0"
+
+#define ENV_UPDATE_KERNEL \
+    "updk=loadaddr=${KERNELADDR} && filename=zImage.uImage && " \
+    "run update\0"
+
+#define ENV_UPDATE_FS \
+    "updfs=loadaddr=${FSADDR} && filename=rootfs-squashfs && " \
+    "run update\0"
+
+#ifdef COMPRESSED_UBOOT
+#define UBOOT_FILENAME "tuboot.bin"
+#else
+#define UBOOT_FILENAME "u-boot.bin"
+#endif
+
+#define ENV_UPDATE_UBOOT \
+    "updub=loadaddr=${UBOOTADDR} && filename=" UBOOT_FILENAME " && " \
+    "run update\0"
+
+#define ENV_UPDATE_ALL \
+	"updall=run updub && run updfs && run updk\0"
+
+#define ENV_ERASE_MIB0 \
+	"erasemib0=erase ${MIB0ADDR} +0x10000"
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+		ENV_UBOOT_ADDR \
+		ENV_FS_ADDR \
+		ENV_KERNEL_ADDR \
+		ENV_MIB0_ADDR \
+		ENV_UPDATE \
+		ENV_UPDATE_KERNEL \
+		ENV_UPDATE_FS \
+		ENV_UPDATE_UBOOT \
+		ENV_UPDATE_ALL \
+		ENV_ERASE_MIB0 \
+		""
+
+#undef CFG_PLL_FREQ
+
+//#define CFG_PLL_FREQ	CFG_PLL_600_266_133
+//#define CFG_PLL_FREQ	CFG_PLL_600_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_566_550_275
+//#define CFG_PLL_FREQ	CFG_PLL_566_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_600_332_166
+//#define CFG_PLL_FREQ	CFG_PLL_566_475_237
+//#define CFG_PLL_FREQ	CFG_PLL_600_575_287
+//#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_533_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_450_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_500_1G_250
+//#define CFG_PLL_FREQ	CFG_PLL_600_550_1_1G_275
+//#define CFG_PLL_FREQ	CFG_PLL_600_350_175
+//#define CFG_PLL_FREQ	CFG_PLL_600_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_600_1_2G_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_300_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_500_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_400_200_200
+#if !defined(CONFIG_AP123) && !defined(CONFIG_MI124)
+#define CFG_PLL_FREQ    CFG_PLL_560_480_240
+#else
+#define CFG_PLL_FREQ    CFG_PLL_533_400_200
+#endif
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_500_400_200)
+#   define CFG_HZ          (500000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_400_200) || (CFG_PLL_FREQ == CFG_PLL_600_450_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_600_300) || (CFG_PLL_FREQ == CFG_PLL_600_550_275) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_332_166) || (CFG_PLL_FREQ == CFG_PLL_600_575_287) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_525_262) || (CFG_PLL_FREQ == CFG_PLL_600_332_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_266_133) || (CFG_PLL_FREQ == CFG_PLL_600_266_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_650_325) ||  (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_1G_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_550_1_1G_275)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_350_175)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_300_150)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_533_400_200) || (CFG_PLL_FREQ == CFG_PLL_533_500_250)
+#   define CFG_HZ          (533000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_700_400_200)
+#   define CFG_HZ          (700000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_650_600_300)
+#   define CFG_HZ          (650000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_560_480_240)
+#   define CFG_HZ          (560000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_566_475_237) || (CFG_PLL_FREQ == CFG_PLL_566_450_225) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_550_275) || (CFG_PLL_FREQ == CFG_PLL_566_525_262) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_400_200) || (CFG_PLL_FREQ == CFG_PLL_566_500_250)
+#   define CFG_HZ          (566000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif
+
+#if 0
+#ifdef CONFIG_ATH_NAND_BR
+#define CONFIG_BOOTCOMMAND "bootm 0x80000"
+#define CFG_ENV_ADDR		0x00040000
+#else  /* CONFIG_ATH_NAND_BR */
+#define CFG_ENV_ADDR		0x9f040000
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else  /* FLASH_SIZE == 16 */
+#ifdef COMPRESSED_UBOOT
+#if (FLASH_SIZE == 4)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else  /* FLASH_SIZE == 4 */
+#define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#endif  /* FLASH_SIZE == 4 */
+#else /* COMPRESSED_UBOOT */
+#if defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f680000"
+#endif
+#endif  /* COMPRESSED_UBOOT */
+#endif  /* FLASH_SIZE == 16 */
+#endif  /* CONFIG_ATH_NAND_BR */
+#endif
+
+
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR settings for WASP */
+
+#define CFG_DDR_REFRESH_VAL     0x4270
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL     0x9dd0e6a8
+
+
+
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32	0xff
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16	0xffff
+
+#if DDR2_32BIT_SUPPORT
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32
+#else
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16
+#endif
+
+#define CFG_DDR1_RD_DATA_THIS_CYCLE_VAL		0xffff
+#define CFG_SDRAM_RD_DATA_THIS_CYCLE_VAL	0xffffffff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+#else
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CONFIG_IPADDR   192.168.1.1
+#define CONFIG_SERVERIP 192.168.1.10
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0x9fff1000
+#define BOARDCAL                        0x9fff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/hornet_emu.h b/include/configs/hornet_emu.h
new file mode 100644
index 0000000..5c43f45
--- /dev/null
+++ b/include/configs/hornet_emu.h
@@ -0,0 +1,255 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+
+#define ENABLE_DYNAMIC_CONF 1
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short
+
+/*
+ * We boot from this flash
+ */
+ /*
+  * This section needs change for compressed u-boot
+  * support.
+  */
+#define CFG_FLASH_BASE		    0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#endif
+
+
+/*
+ * The following #defines are needed to get flash environment right
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+/* #define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)" */
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),1344k(rootfs),576k(uImage),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),1344k(rootfs),576k(uImage),64k(ART)"
+#else
+
+/*
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:128k(u-boot),1280k(rootfs),576k(uImage),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:128k(u-boot),1280k(rootfs),576k(uImage),64k(ART)"
+*/
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#endif /* #ifdef COMPRESSED_UBOOT */
+#undef CFG_PLL_FREQ
+#ifdef CONFIG_HORNET_EMU
+    #ifdef CONFIG_HORNET_EMU_HARDI_WLAN
+    #define CFG_PLL_FREQ	CFG_PLL_48_48_24
+    #else
+    #define CFG_PLL_FREQ	CFG_PLL_80_80_40
+    #endif
+#else
+#define CFG_PLL_FREQ	CFG_PLL_350_350_175
+#endif
+
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#	define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#	define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#	define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#	define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_80_80_40)
+#	define CFG_HZ          (80000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_64_64_32)
+#	define CFG_HZ          (64000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_48_48_24)
+#	define CFG_HZ          (48000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_32_32_16)
+#	define CFG_HZ          (32000000/2)
+#endif
+
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		0x10000
+
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else 
+#define CONFIG_BOOTCOMMAND "bootm 0x9f160000"
+#endif
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#	define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#	define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+/* DDR value from Flash */
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#ifndef CONFIG_HORNET_EMU
+#define CONFIG_PCI
+#endif
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET) | CFG_CMD_MII)
+
+/*
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_JFFS2 | CFG_CMD_ENV |	\
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_ETHREG ))
+*/
+
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.1
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0
+#ifdef CONFIG_HORNET_EMU
+#define CFG_AG7240_NMACS 1
+#else
+#define CFG_AG7240_NMACS 2
+#endif
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+//#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                        0xbfff1000
+#define BOARDCAL                       0xbfff0000
+#define ATHEROS_PRODUCT_ID             138
+#define CAL_SECTOR                     (CFG_MAX_FLASH_SECT - 1)
+
+/* For Kite, only PCI-e interface is valid */
+#define AR7240_ART_PCICFG_OFFSET        3
+
+
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/mi93.h b/include/configs/mi93.h
new file mode 100644
index 0000000..8ec1f2d
--- /dev/null
+++ b/include/configs/mi93.h
@@ -0,0 +1,247 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#define ENABLE_DYNAMIC_CONF 1
+#define CONFIG_SUPPORT_AR7241 1
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+#if (FLASH_SIZE == 8)
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),896k(uImage),64k(NVRAM),1792k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+#endif
+
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_200_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+
+#if (FLASH_SIZE == 8)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#endif
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR values to support AR7241 */
+
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+//#define CFG_7241_DDR1_CONFIG_VAL      0x6fbc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+//#define CFG_7241_DDR1_MODE_VAL        0x23
+#define CFG_7241_DDR1_CONFIG2_VAL	0x9dd0e6a8
+
+
+#define CFG_7241_DDR2_CONFIG_VAL	0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT	0x133
+#define CFG_7241_DDR2_EXT_MODE_VAL	0x402
+#define CFG_7241_DDR2_MODE_VAL		0x33
+#define CFG_7241_DDR2_CONFIG2_VAL	0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR settings for AR7240 */
+
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#       define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#       define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL      0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada  
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_JFFS2 | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.27
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0xbfff1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/pb42.h b/include/configs/pb42.h
new file mode 100644
index 0000000..c6f5d60
--- /dev/null
+++ b/include/configs/pb42.h
@@ -0,0 +1,115 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7100.h>
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000    /* Flash size */
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0xbf000000
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CFG_HZ
+
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          200000000
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          200000000
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          222000000
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          266000000
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          266000000
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200)
+#	define CFG_HZ          400000000
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0xbf040000
+#define CFG_ENV_SIZE		0x10000
+
+//#define CONFIG_FLASH_16BIT
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+#define CFG_DDR_REFRESH_VAL     0x461b
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | \
+            CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET |\
+   CFG_CMD_ENV | CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB \
+   | CFG_CMD_ELF ))
+
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.11
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+#define CONFIG_ADMTEK_PHY 
+#define CFG_PHY_ADDR 0x14  /* Port 4 */
+
+#define CFG_GMII     0
+#define CFG_MII0_MII             0
+
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+#include <cmd_confdefs.h>
+
+/* Ported from
+ * redboot/ecos/packages/hal/mips/pb42/current/cdl/hal_mips_pb42.cdl
+ */
+
+#define CFG_DDR_CONFIG_VAL			0xefbc8cd0
+#define CFG_DDR_CONFIG2_VAL			0x8e7156a2
+#define CFG_DDR_MODE_VAL			      0x61
+#define CFG_DDR_EXT_MODE_VAL			  0x0
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL		    0xffff
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/pb44.h b/include/configs/pb44.h
new file mode 100644
index 0000000..43b2ecf
--- /dev/null
+++ b/include/configs/pb44.h
@@ -0,0 +1,230 @@
+/*
+ * Copyright (c) 2009, Atheros Communications Inc.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * 
+ */
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7100.h>
+
+#define CFG_BOARD_PB44 1
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#ifndef COMPRESSED_UBOOT
+#define CFG_MAX_FLASH_BANKS     1           /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128         /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000  /* Flash size */
+#else
+/* For 2 MB flash */
+#define CFG_MAX_FLASH_BANKS     1           /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128         /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000  /* 0x00200000 Total flash size */
+#endif  /* #ifndef COMPRESSED_UBOOT */
+
+/* 
+ * We boot from this flash
+ */
+#ifndef COMPRESSED_UBOOT
+#define CFG_FLASH_BASE          0xbf000000
+#else
+#define CFG_FLASH_BASE          0xbf000000
+#endif  /* #ifndef COMPRESSED_UBOOT */
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif  /* #ifdef COMPRESSED_UBOOT */
+
+
+#undef CONFIG_BOOTARGS_FL
+#undef CONFIG_BOOTARGS_RD
+#undef CONFIG_BOOTARGS
+#undef  MTDPARTS_DEFAULT
+#undef  MTDIDS_DEFAULT
+
+#define CONFIG_ROOTFS_FLASH
+#undef CONFIG_BOOTARGS
+
+/* XXX - putting rootfs in last partition results in jffs errors */
+
+#ifdef COMPRESSED_UBOOT
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=jffs2 init=/sbin/init mtdparts=ar7100-nor0:64k(u-boot),6144k(rootfs),1728k(uImage),64k(ART)"
+#else
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=jffs2 init=/sbin/init mtdparts=ar7100-nor0:64k(u-boot),6144k(rootfs),1728k(uImage),64k(ART)"
+#endif /* #ifdef COMPRESSED_UBOOT */
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+"loadUboot=tftp 0x80060000 tuboot.bin; erase 0xbf000000 +$filesize; cp.b $fileaddr 0xbf000000 $filesize\0" \
+"loadLinux=tftpboot 0x80010000 vmlinux.lzma.uImage;erase 0xbf640000 +$filesize; cp.b $fileaddr 0xbf640000 $filesize\0" \
+"loadFiles=tftpboot 0x80010000 pb44-small-jffs2;erase 0xbf040000 +$filesize; cp.b $fileaddr 0xbf040000 $filesize\0" \
+"loadAll=run loadUboot;run loadLinux;run loadFiles\0"
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define CFG_MONITOR_BASE    TEXT_BASE
+#define CFG_MONITOR_LEN     (192 << 10)
+
+#undef CFG_HZ
+#define CFG_PLL_FREQ    CFG_PLL_680_340_170
+
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          200000000
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          200000000
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          222000000
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          266000000
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          266000000
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200)
+#	define CFG_HZ          400000000
+#elif (CFG_PLL_FREQ == CFG_PLL_680_340_170)
+#   define CFG_HZ  (680000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT    (2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT    (2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET  0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+
+/* Address and size of Primary Environment Sector   */
+#define CFG_ENV_ADDR		0xbf040000
+#define CFG_ENV_SIZE        0x10000
+
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_BOOTCOMMAND "bootm 0xbf640000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0xbf640000"
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+
+#define CONFIG_NR_DRAM_BANKS    		2
+
+#define ATHEROS_PRODUCT_ID	136
+/* The calibration sector is used to store MAC addresses and CPU PLL setting */
+#define BOARDCAL                        0xbfff0000
+#define CAL_SECTOR                      127
+
+/*
+** Configure the CPU clock settings
+*/
+
+#define CFG_PLL_FREQ	CFG_PLL_680_340_170
+/*
+** These values for DDR configuration came from the
+** BDM configuration script
+*/
+
+#define CFG_DDR_REFRESH_VAL     		0x461b
+#define CFG_DDR_CONFIG_VAL      		0x6fb8884e
+#define CFG_DDR_CONFIG2_VAL            	0x812cd6a8
+#define CFG_DDR_MODE_VAL_INIT   		0x131
+#define CFG_DDR_EXT_MODE_VAL    		0x0
+#define CFG_DDR_MODE_VAL        		0x63
+#define CFG_DDR_TRTW_VAL        		0x1f
+#define CFG_DDR_TWTR_VAL        		0x1e
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0xff
+
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_PCI
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL        | CFG_CMD_MII   | CFG_CMD_PING  \
+   | CFG_CMD_NET | CFG_CMD_PCI     | CFG_CMD_ENV | CFG_CMD_FLASH | CFG_CMD_LOADS \
+   | CFG_CMD_RUN | CFG_CMD_LOADB   | CFG_CMD_ELF | CFG_CMD_BSP ))
+#else
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+
+/*
+** Ethernet Configuration
+** Set default values, and select the PHY to use
+*/
+
+#define CONFIG_IPADDR       		192.168.1.2
+#define CONFIG_SERVERIP     		192.168.1.200
+//#define CONFIG_ETHADDR      		00:03:7f:ff:ff:fe
+
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+#define CONFIG_PHY_GIGE       		1              /* GbE speed/duplex detect */
+
+#define CFG_VITESSE_8601_7395_PHY   1
+//#define CFG_ATHRF1_PHY              1
+#define CFG_AG7100_NMACS 			2
+
+#define CFG_PHY_ADDR				0 
+#define CFG_AG7100_GE0_RGMII 1 /* XXX: on pb44, GE0 can be RGMII or GMII depending magpie's interface */
+#define CFG_AG7100_GE1_RGMII 1
+
+/*
+** Configure Parser
+*/
+
+#define CFG_BOOTM_LEN   (16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+#include <cmd_confdefs.h>
+
+#endif  /* __CONFIG_H */
diff --git a/include/configs/pb45.h b/include/configs/pb45.h
new file mode 100644
index 0000000..2a92495
--- /dev/null
+++ b/include/configs/pb45.h
@@ -0,0 +1,162 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7100.h>
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1       /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+#define CFG_FLASH_ADDR0         (0x5555)        
+#define CFG_FLASH_ADDR1         (0x2AAA)
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE          0xbf000000
+
+#undef CONFIG_ROOTFS_RD
+#undef CONFIG_ROOTFS_FLASH
+#undef CONFIG_BOOTARGS_FL
+#undef CONFIG_BOOTARGS_RD
+#undef CONFIG_BOOTARGS
+#undef  MTDPARTS_DEFAULT
+#undef  MTDIDS_DEFAULT
+
+#define CONFIG_ROOTFS_FLASH
+#define CONFIG_BOOTARGS CONFIG_BOOTARGS_FL
+
+//#define CONFIG_BOOTARGS_RD     "console=ttyS0,115200 root=01:00 rd_start=0x80600000 rd_size=5242880 init=/sbin/init mtdparts=ar9100-nor0:256k(u-boot),64k(u-boot-env),4096k(rootfs),2048k(uImage)"
+
+/* XXX - putting rootfs in last partition results in jffs errors */
+
+#define CONFIG_BOOTARGS_FL     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7100-nor0:256k(uboot),128k(env),6144k(rootfs),64k(mac),1600k(uImage)"
+
+#define MTDPARTS_DEFAULT    "mtdparts=ar7100-nor0:256k(u-boot),128k(env),6144k(rootfs),64k(mac),1600k(uImage)"
+#define MTDIDS_DEFAULT      "nor0=ar7100-nor0"
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define CFG_MONITOR_BASE    TEXT_BASE
+#define CFG_MONITOR_LEN     (192 << 10)
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+
+#define CFG_HZ	(680000000/2)
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT    (2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT    (2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET  0x1000
+
+#define CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector   */
+#define CFG_ENV_ADDR        0xbf040000
+#define CFG_ENV_SIZE        0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0xbf670000"
+
+#define CONFIG_NR_DRAM_BANKS    		2
+
+#define ATHEROS_PRODUCT_ID	136
+#define CFG_BOARD_PB45 1
+
+/*
+** Configure the CPU clock settings
+*/
+
+#define CFG_PLL_FREQ	CFG_PLL_680_340_170
+/*
+** These values for DDR configuration came from the
+** BDM configuration script
+*/
+
+#define CFG_DDR_REFRESH_VAL     		0x461b
+#define CFG_DDR_CONFIG_VAL      		0x77b8884e
+#define CFG_DDR_CONFIG2_VAL             	0x812cd6a8
+#define CFG_DDR_MODE_VAL_INIT   		0x131
+#define CFG_DDR_EXT_MODE_VAL    		0x0
+#define CFG_DDR_MODE_VAL        		0x33
+#define CFG_DDR_TRTW_VAL        		0x1f
+#define CFG_DDR_TWTR_VAL        		0x1e
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  	0xff
+
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL        | CFG_CMD_MII   | CFG_CMD_PING  \
+   | CFG_CMD_NET | CFG_CMD_PCI     | CFG_CMD_ENV | CFG_CMD_FLASH | CFG_CMD_LOADS \
+   | CFG_CMD_RUN | CFG_CMD_LOADB   | CFG_CMD_ELF | CFG_CMD_BSP ))
+
+/*
+** Ethernet Configuration
+** Set default values, and select the PHY to use
+*/
+
+#define CONFIG_IPADDR       		192.168.1.2
+#define CONFIG_SERVERIP     		192.168.1.1
+//#define CONFIG_ETHADDR      		00:03:7f:ff:ff:fe
+//#define CFG_FAULT_ECHO_LINK_DOWN    1
+#define CONFIG_PHY_GIGE       		1              /* GbE speed/duplex detect */
+
+#define CFG_ATHRS16_PHY  			1
+#define CFG_AG7100_NMACS 			2
+//#define CFG_ATHRHDR_REG 			1
+//#define CFG_SWITCH_FREQ				1
+
+//#define CFG_ATHRHDR_EN 				1
+//#define ATHRHDR_LEN   				2
+//#define ATHRHDR_MAX_DATA  			10
+
+#define CFG_PHY_ADDR				0  /* Port 4 */
+#define CFG_GMII 1
+#define CFG_MII0_RGMII 0
+#define CFG_AG7100_GE0_RGMII 1
+#define CFG_AG7100_GE1_RGMII 1
+
+/*
+** Configure Parser
+*/
+
+#define CFG_BOOTM_LEN   (16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+#include <cmd_confdefs.h>
+
+#endif  /* __CONFIG_H */
diff --git a/include/configs/pb47.h b/include/configs/pb47.h
new file mode 100644
index 0000000..ec1b249
--- /dev/null
+++ b/include/configs/pb47.h
@@ -0,0 +1,160 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7100.h>
+
+#define CFG_BOARD_PB47 1
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1       /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+#define CFG_FLASH_ADDR0         (0x5555)        
+#define CFG_FLASH_ADDR1         (0x2AAA)
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE          0xbf000000
+
+#undef CONFIG_ROOTFS_RD
+#undef CONFIG_ROOTFS_FLASH
+#undef CONFIG_BOOTARGS_FL
+#undef CONFIG_BOOTARGS_RD
+#undef CONFIG_BOOTARGS
+#undef  MTDPARTS_DEFAULT
+#undef  MTDIDS_DEFAULT
+
+#define CONFIG_ROOTFS_FLASH
+#define CONFIG_BOOTARGS CONFIG_BOOTARGS_FL
+
+/* XXX - putting rootfs in last partition results in jffs errors */
+
+#define CONFIG_BOOTARGS_FL     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mem=64M "MTDPARTS_DEFAULT
+
+#define MTDPARTS_DEFAULT    "mtdparts=ar7100-nor0:192k(u-boot),64k(env),6144k(rootfs),1728k(uImage),64k(caldata)"
+#define MTDIDS_DEFAULT      "nor0=ar7100-nor0"
+#define CONFIG_EXTRA_ENV_SETTINGS \
+"loadUboot=tftpboot 0x80010000 u-boot.bin;erase 0xbf000000 +0x30000;cp.b 0x80010000 0xbf000000 0x30000\0" \
+"loadLinux=tftpboot 0x80010000 vmlinux.gz.uImage;erase 0xbf640000 +0x120000;cp.b 0x80010000 0xbf640000 0x120000\0" \
+"loadFiles=tftpboot 0x80010000 pb47-jffs2;erase 0xbf040000 +0x600000;cp.b 0x80010000 0xbf040000 0x600000\0" \
+"loadAll=run loadUboot;run loadLinux;run loadFiles\0"
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define CFG_MONITOR_BASE    TEXT_BASE
+#define CFG_MONITOR_LEN     (192 << 10)
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+
+#define CFG_HZ	(680000000/2)
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT    (2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT    (2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET  0x1000
+
+#define CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector   */
+#define CFG_ENV_ADDR        0xbf030000
+#define CFG_ENV_SIZE        0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0xbf640000"
+
+#define CONFIG_NR_DRAM_BANKS    		2
+
+#define ATHEROS_PRODUCT_ID	136
+/* The calibration sector is used to store MAC addresses and CPU PLL setting */
+#define BOARDCAL                        0xbfff0000
+#define CAL_SECTOR                      127
+
+/*
+** Configure the CPU clock settings
+*/
+
+#define CFG_PLL_FREQ	CFG_PLL_680_340_170
+/*
+** These values for DDR configuration came from the
+** BDM configuration script
+*/
+
+#define CFG_DDR_REFRESH_VAL     		0x461b
+#define CFG_DDR_CONFIG_VAL      		0x77b8884e
+#define CFG_DDR_CONFIG2_VAL             	0x812cd6a8
+#define CFG_DDR_MODE_VAL_INIT   		0x131
+#define CFG_DDR_EXT_MODE_VAL    		0x0
+#define CFG_DDR_MODE_VAL        		0x33
+#define CFG_DDR_TRTW_VAL        		0x1f
+#define CFG_DDR_TWTR_VAL        		0x1e
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  	0xff
+
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL        | CFG_CMD_MII   | CFG_CMD_PING  \
+   | CFG_CMD_NET | CFG_CMD_PCI     | CFG_CMD_ENV | CFG_CMD_FLASH | CFG_CMD_LOADS \
+   | CFG_CMD_RUN | CFG_CMD_LOADB   | CFG_CMD_ELF | CFG_CMD_BSP ))
+
+/*
+** Ethernet Configuration
+** Set default values, and select the PHY to use
+*/
+
+#define CONFIG_IPADDR       		192.168.1.2
+#define CONFIG_SERVERIP     		192.168.1.1
+//#define CONFIG_ETHADDR      		00:03:7f:ff:ff:fe
+#define CONFIG_PHY_GIGE       		1              /* GbE speed/duplex detect */
+
+#define CFG_ATHRF1_PHY  			1
+#define CFG_AG7100_NMACS 			2
+
+#define CFG_PHY_ADDR				0 
+#define CFG_AG7100_GE0_RGMII 1 /* XXX: on pb47, GE0 can be RGMII or GMII depending magpie's interface */
+#define CFG_AG7100_GE1_RGMII 1
+
+/*
+** Configure Parser
+*/
+
+#define CFG_BOOTM_LEN   (16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+#include <cmd_confdefs.h>
+
+#endif  /* __CONFIG_H */
diff --git a/include/configs/pb90.h b/include/configs/pb90.h
new file mode 100644
index 0000000..9d1a2d0
--- /dev/null
+++ b/include/configs/pb90.h
@@ -0,0 +1,167 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ  CFG_PLL_350_350_175
+
+#undef CFG_HZ
+
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0x7fbc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x2
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 	0x99d0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV |	\
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF ))
+
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.27
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0xbfff1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/pb92.h b/include/configs/pb92.h
new file mode 100644
index 0000000..a340038
--- /dev/null
+++ b/include/configs/pb92.h
@@ -0,0 +1,330 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#if (FLASH_SIZE == 16)
+#undef COMPRESSED_UBOOT
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_SUPPORT_AR7241 1
+
+#define CONFIG_AR7242_S16_PHY
+#define CONFIG_AG7240_GE0_IS_CONNECTED
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define UBOOT_FLASH_SIZE          (64 * 1024)
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),256k(u-boot-env),3072k(rootfs),1024k(uImage),3072k(spare-rootfs),1024k(spare-uImage),64k(mib0),64k(mib1),4096k(ct),3392k(var),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),256k(u-boot-env),5120k(rootfs),1024k(uImage)"
+#else /* FLASH_SIZE=4M */
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),3136k(rootfs),768k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),3136k(rootfs),768k(uImage),64k(mib0),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#endif
+#endif
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241
+#define CFG_AR7241_PLL_FREQ     CFG_PLL_400_400_200
+//#define CFG_AR7241_PLL_FREQ	CFG_PLL_400_200_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		CFG_FLASH_BASE+UBOOT_FLASH_SIZE
+#define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+
+#if (FLASH_SIZE == 16)
+#define CFG_KERNEL_ADDR 0x9f550000
+#else
+#ifdef COMPRESSED_UBOOT
+#define CFG_KERNEL_ADDR 0x9f300000
+#else
+#define CFG_KERNEL_ADDR 0x9f320000
+#endif
+#endif
+#define CFG_MIB0_ADDR		0x9f3e0000
+
+#define CONFIG_BOOTCOMMAND "bootm ${KERNELADDR}"
+
+#ifndef CFG_LOAD_ADDR
+#define CFG_LOAD_ADDR		0x80060000
+#endif
+#ifndef COMPRESSED_UBOOT
+#define CFG_FS_ADDR			0x9f050000//(CFG_ENV_ADDR+CFG_ENV_SIZE)
+#else
+#define CFG_FS_ADDR			0x9f010000//(CFG_FLASH_BASE+UBOOT_FLASH_SIZE)
+#endif /* COMPRESSED_UBOOT */
+#define ENV_FS_ADDR			"FSADDR=" MK_STR(CFG_FS_ADDR) "\0"
+
+#define ENV_UBOOT_ADDR		"UBOOTADDR=" MK_STR(CFG_FLASH_BASE) "\0"
+#define ENV_KERNEL_ADDR		"KERNELADDR=" MK_STR(CFG_KERNEL_ADDR) "\0"
+#define ENV_MIB0_ADDR		"MIB0ADDR=" MK_STR(CFG_MIB0_ADDR) "\0"
+
+#define ENV_UPDATE \
+    "update=tftpboot " MK_STR(CFG_LOAD_ADDR) " ${filename} && "	\
+            "erase ${loadaddr} +${filesize} && "				\
+            "cp.b ${fileaddr} ${loadaddr} ${filesize}\0"
+
+#define ENV_UPDATE_KERNEL \
+    "updk=loadaddr=${KERNELADDR} && filename=zImage.uImage && " \
+    "run update\0"
+
+#define ENV_UPDATE_FS \
+    "updfs=loadaddr=${FSADDR} && filename=rootfs-squashfs && " \
+    "run update\0"
+
+#ifdef COMPRESSED_UBOOT
+#define UBOOT_FILENAME "tuboot.bin"
+#else
+#define UBOOT_FILENAME "u-boot.bin"
+#endif
+
+#define ENV_UPDATE_UBOOT \
+    "updub=loadaddr=${UBOOTADDR} && filename=" UBOOT_FILENAME " && " \
+    "run update\0"
+
+#define ENV_UPDATE_ALL \
+	"updall=run updub && run updfs && run updk\0"
+
+#define ENV_ERASE_MIB0 \
+	"erasemib0=erase ${MIB0ADDR} +0x10000"
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+		ENV_UBOOT_ADDR \
+		ENV_FS_ADDR \
+		ENV_KERNEL_ADDR \
+		ENV_MIB0_ADDR \
+		ENV_UPDATE \
+		ENV_UPDATE_KERNEL \
+		ENV_UPDATE_FS \
+		ENV_UPDATE_UBOOT \
+		ENV_UPDATE_ALL \
+		ENV_ERASE_MIB0 \
+		""
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0x7fbc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x2
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 	0x99d0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR values to support AR7241 */
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+//#define CFG_7241_DDR1_CONFIG_VAL      0x6fbc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+//#define CFG_7241_DDR1_MODE_VAL        0x23
+#define CFG_7241_DDR1_CONFIG2_VAL	0x9dd0e6a8
+
+#define CFG_7241_DDR2_CONFIG_VAL        0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT     0x133 
+#define CFG_7241_DDR2_EXT_MODE_VAL      0x402
+#define CFG_7241_DDR2_MODE_VAL          0x33
+#define CFG_7241_DDR2_CONFIG2_VAL       0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_PCI 1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+#else
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+#define CFG_ATHRS26_PHY  1
+#define CONFIG_IPADDR   192.168.1.1
+#define CONFIG_SERVERIP 192.168.1.10
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                        0xbfff1000
+#define BOARDCAL                       0xbfff0000
+#define ATHEROS_PRODUCT_ID             137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/pb93.h b/include/configs/pb93.h
new file mode 100644
index 0000000..6e8b3c2
--- /dev/null
+++ b/include/configs/pb93.h
@@ -0,0 +1,229 @@
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#define ENABLE_DYNAMIC_CONF 1
+#define CONFIG_SUPPORT_AR7241 1
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CONFIG_SUPPORT_AR7241 1
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#endif
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+#if (FLASH_SIZE == 8)
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),896k(uImage),64k(NVRAM),1792k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#endif
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241
+#define CFG_AR7241_PLL_FREQ     CFG_PLL_400_400_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE            CFG_FLASH_SECTOR_SIZE 
+
+#if (FLASH_SIZE == 8)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#endif
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0x7fbc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x2
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 	0x99d0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR values to support AR7241 */
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+#define CFG_7241_DDR1_CONFIG2_VAL       0x9dd0e6a8 
+
+#define CFG_7241_DDR2_CONFIG_VAL        0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT     0x133 
+#define CFG_7241_DDR2_EXT_MODE_VAL      0x402
+#define CFG_7241_DDR2_MODE_VAL          0x33
+#define CFG_7241_DDR2_CONFIG2_VAL       0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F   *(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL | \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.27
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0xbfff1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/pb9x-2.6.31.h b/include/configs/pb9x-2.6.31.h
new file mode 100644
index 0000000..47330f3
--- /dev/null
+++ b/include/configs/pb9x-2.6.31.h
@@ -0,0 +1,286 @@
+/*
+ * Copyright (c) 2009, Atheros Communications Inc.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * 
+ */
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#define ENABLE_DYNAMIC_CONF 1
+#define CONFIG_SUPPORT_AR7241 1
+
+#define CONFIG_AR7242_S16_PHY
+#define CONFIG_AG7240_GE0_IS_CONNECTED
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CONFIG_SUPPORT_AR7241 1
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#endif
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+
+#ifndef ROOTFS
+#define ROOTFS 1
+#endif
+
+#ifdef COMPRESSED_UBOOT
+#if (FLASH_SIZE == 8)
+#if (ROOTFS == 2) /* make squashfs as rootfs type */
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),896k(uImage),64k(NVRAM),1792k(ART) REVISIONID"
+#else
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),896k(uImage),64k(NVRAM),1792k(ART) REVISIONID"
+#endif /* #if ROOTFS == 2 */
+#else /* #else of FLASH_SIZE == 8 */
+#if (FLASH_SIZE == 4)
+#if (ROOTFS == 2) /* make squashfs as rootfs type */
+#define CONFIG_BOOTARGS "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),3008k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+#else
+#define CONFIG_BOOTARGS "console=ttyS0,115200 root=31:01 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),3008k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+#endif /* #if ROOTFS == 2 */
+#else
+#if (ROOTFS == 2) /* make squashfs as rootfs type */
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+#endif /* #if ROOTFS == 2 */
+#endif /* FLASH_SIZE == 4 */
+#endif
+#endif /* #ifdef COMPRESSED_UBOOT */
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241
+#define CFG_AR7241_PLL_FREQ     CFG_PLL_400_400_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE            CFG_FLASH_SECTOR_SIZE 
+
+#if (FLASH_SIZE == 8)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#endif
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0x7fbc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x2
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 	0x99d0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR values to support AR7241 */
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+#define CFG_7241_DDR1_CONFIG2_VAL       0x9dd0e6a8 
+
+#define CFG_7241_DDR2_CONFIG_VAL        0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT     0x133 
+#define CFG_7241_DDR2_EXT_MODE_VAL      0x402
+#define CFG_7241_DDR2_MODE_VAL          0x33
+#define CFG_7241_DDR2_CONFIG2_VAL       0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F   *(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_PCI 1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL | \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+#else
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.27
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0xbfff1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/pb9x-2x8.h b/include/configs/pb9x-2x8.h
new file mode 100644
index 0000000..31b2efb
--- /dev/null
+++ b/include/configs/pb9x-2x8.h
@@ -0,0 +1,212 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ *-----------------------------------------------------------------------
+ */
+#ifndef COMPRESSED_UBOOT
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#else
+/* For 2 MB flash */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      32     /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00200000 /* Total flash size */
+#endif  /* #ifndef COMPRESSED_UBOOT */
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),1280k(rootfs),576k(uImage),64k(NVRAM),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:64k(u-boot),1280k(rootfs),576k(uImage),64k(NVRAM),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+#endif /* #ifdef COMPRESSED_UBOOT */
+
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ	CFG_PLL_350_350_175
+
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#	define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#	define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#	define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#	define CFG_HZ          (420000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE		0x10000
+
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else 
+#define CONFIG_BOOTCOMMAND "bootm 0x9f150000"
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#ifdef LOW_DRIVE_STRENGTH
+#	define CFG_DDR_EXT_MODE_VAL    0x2
+#else
+#	define CFG_DDR_EXT_MODE_VAL    0x0
+#endif
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_PCI 1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV |	\
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_ETHREG ))
+#else
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CONFIG_IPADDR   192.168.1.2
+#define CONFIG_SERVERIP 192.168.1.1
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                        0xbfff1000
+#define BOARDCAL                       0xbfff0000
+#define ATHEROS_PRODUCT_ID             138
+#define CAL_SECTOR                     (CFG_MAX_FLASH_SECT - 1)
+
+/* For Kite, only PCI-e interface is valid */
+#define AR7240_ART_PCICFG_OFFSET        3
+
+
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/pb9x.h b/include/configs/pb9x.h
new file mode 100644
index 0000000..656e6af
--- /dev/null
+++ b/include/configs/pb9x.h
@@ -0,0 +1,282 @@
+/*
+ * Copyright (c) 2009, Atheros Communications Inc.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * 
+ */
+/*
+ * This file contains the configuration parameters for the pb93 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#define ENABLE_DYNAMIC_CONF 1
+#define CONFIG_SUPPORT_AR7241 1
+
+#define CONFIG_AR7242_S16_PHY
+#define CONFIG_AG7240_GE0_IS_CONNECTED
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CONFIG_SUPPORT_AR7241 1
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#endif
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+
+#ifndef ROOTFS
+#define ROOTFS 1
+#endif
+
+#ifdef COMPRESSED_UBOOT
+#if (FLASH_SIZE == 8)
+#if (ROOTFS == 2) /* make squashfs as rootfs type */
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),896k(uImage),64k(NVRAM),1792k(ART) REVISIONID"
+#else
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),896k(uImage),64k(NVRAM),1792k(ART) REVISIONID"
+#endif /* #if ROOTFS == 2 */
+#else /* #else of FLASH_SIZE == 8 */
+#if (FLASH_SIZE == 4)
+#define CONFIG_BOOTARGS "console=ttyS0,115200 root=31:01 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:64k(u-boot),3008k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+#else
+#if (ROOTFS == 2) /* make squashfs as rootfs type */
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=squashfs init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART) REVISIONID"
+#endif /* #if ROOTFS == 2 */
+#endif /* FLASH_SIZE == 4 */
+#endif
+#endif /* #ifdef COMPRESSED_UBOOT */
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+#undef CFG_PLL_FREQ
+
+#ifdef CONFIG_SUPPORT_AR7241
+#define CFG_AR7241_PLL_FREQ     CFG_PLL_400_400_200
+#endif
+
+#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+
+#undef CFG_HZ
+
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0x9f040000
+#define CFG_ENV_SIZE            CFG_FLASH_SECTOR_SIZE 
+
+#if (FLASH_SIZE == 8)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#endif
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0x7fbc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x2
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 	0x99d0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+/* DDR values to support AR7241 */
+#ifdef CONFIG_SUPPORT_AR7241 
+#define CFG_7241_DDR1_CONFIG_VAL      0xc7bc8cd0
+#define CFG_7241_DDR1_MODE_VAL_INIT   0x133
+#define CFG_7241_DDR1_EXT_MODE_VAL    0x0
+#define CFG_7241_DDR1_MODE_VAL        0x33
+#define CFG_7241_DDR1_CONFIG2_VAL       0x9dd0e6a8 
+
+#define CFG_7241_DDR2_CONFIG_VAL        0xc7bc8cd0
+#define CFG_7241_DDR2_MODE_VAL_INIT     0x133 
+#define CFG_7241_DDR2_EXT_MODE_VAL      0x402
+#define CFG_7241_DDR2_MODE_VAL          0x33
+#define CFG_7241_DDR2_CONFIG2_VAL       0x9dd0e6a8
+#endif /* _SUPPORT_AR7241 */
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F   *(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_PCI 1
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL | \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+#else
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.27
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0xbfff1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/reh132.h b/include/configs/reh132.h
new file mode 100644
index 0000000..1f51c6f
--- /dev/null
+++ b/include/configs/reh132.h
@@ -0,0 +1,424 @@
+/*
+ * This file contains the configuration parameters for the db120 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#if !defined(CONFIG_ATH_NAND_FL)
+#define FLASH_SIZE 16
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000    /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_WASP_SUPPORT 1
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+// Set this to zero, for 16bit ddr2
+#define DDR2_32BIT_SUPPORT 	1
+
+/* S16 specific defines */
+
+#define CONFIG_AG7240_GE0_IS_CONNECTED 1
+
+/* Assuming nand flash wouldn't use compressed u-boot */
+#ifdef CONFIG_ATH_NAND_FL
+#	define CFG_FLASH_BASE			0
+#else
+	/*
+	 * We boot from this flash
+	 */
+#	define CFG_FLASH_BASE			0x9f000000
+#endif
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+/* Address and size of Primary Environment Sector   */
+#define CFG_ENV_ADDR        (CFG_FLASH_BASE+UBOOT_FLASH_SIZE)
+#define CFG_ENV_SIZE        CFG_FLASH_SECTOR_SIZE
+
+
+#undef CONFIG_BOOTARGS
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),8192k(reserve),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:256k(u-boot),256k(u-boot-env),5120k(rootfs),1024k(uImage)"
+#else /* FLASH_SIZE=8M */
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=jffs2 init=/sbin/init mtdparts=ath-nor0:64k(u-boot),6592k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:64k(u-boot),6592k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#endif
+#endif
+
+#if (FLASH_SIZE == 16)
+#define CFG_KERNEL_ADDR 0x9f680000
+#else
+#define CFG_KERNEL_ADDR 0x9f680000
+#endif
+#define CFG_MIB0_ADDR		0x9ffe0000
+
+#define CONFIG_BOOTCOMMAND "bootm ${KERNELADDR}"
+
+#ifndef CFG_LOAD_ADDR
+#define CFG_LOAD_ADDR		0x80060000
+#endif
+#ifndef COMPRESSED_UBOOT
+#define CFG_FS_ADDR			0x9f050000//(CFG_ENV_ADDR+CFG_ENV_SIZE)
+#else
+#define CFG_FS_ADDR			0x9f010000//(CFG_FLASH_BASE+UBOOT_FLASH_SIZE)
+#endif /* COMPRESSED_UBOOT */
+#define ENV_FS_ADDR			"FSADDR=" MK_STR(CFG_FS_ADDR) "\0"
+
+#define ENV_UBOOT_ADDR		"UBOOTADDR=" MK_STR(CFG_FLASH_BASE) "\0"
+#define ENV_KERNEL_ADDR		"KERNELADDR=" MK_STR(CFG_KERNEL_ADDR) "\0"
+#define ENV_MIB0_ADDR		"MIB0ADDR=" MK_STR(CFG_MIB0_ADDR) "\0"
+
+#define ENV_UPDATE \
+    "update=tftpboot " MK_STR(CFG_LOAD_ADDR) " ${filename} && "	\
+            "erase ${loadaddr} +${filesize} && "				\
+            "cp.b ${fileaddr} ${loadaddr} ${filesize}\0"
+
+#define ENV_UPDATE_KERNEL \
+    "updk=loadaddr=${KERNELADDR} && filename=zImage.uImage && " \
+    "run update\0"
+
+#define ENV_UPDATE_FS \
+    "updfs=loadaddr=${FSADDR} && filename=rootfs-jffs2 && " \
+    "run update\0"
+
+#ifdef COMPRESSED_UBOOT
+#define UBOOT_FILENAME "tuboot.bin"
+#else
+#define UBOOT_FILENAME "u-boot.bin"
+#endif
+
+#define ENV_UPDATE_UBOOT \
+    "updub=loadaddr=${UBOOTADDR} && filename=" UBOOT_FILENAME " && " \
+    "run update\0"
+
+#define ENV_UPDATE_ALL \
+	"updall=run updub && run updfs && run updk\0"
+
+#define ENV_ERASE_MIB0 \
+	"erasemib0=erase ${MIB0ADDR} +0x10000"
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+		ENV_UBOOT_ADDR \
+		ENV_FS_ADDR \
+		ENV_KERNEL_ADDR \
+		ENV_MIB0_ADDR \
+		ENV_UPDATE \
+		ENV_UPDATE_KERNEL \
+		ENV_UPDATE_FS \
+		ENV_UPDATE_UBOOT \
+		ENV_UPDATE_ALL \
+		ENV_ERASE_MIB0 \
+		""
+
+#undef CFG_PLL_FREQ
+
+//#define CFG_PLL_FREQ	CFG_PLL_600_266_133
+//#define CFG_PLL_FREQ	CFG_PLL_600_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_566_550_275
+//#define CFG_PLL_FREQ	CFG_PLL_566_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_600_332_166
+//#define CFG_PLL_FREQ	CFG_PLL_566_475_237
+//#define CFG_PLL_FREQ	CFG_PLL_600_575_287
+//#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_533_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_450_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_500_1G_250
+//#define CFG_PLL_FREQ	CFG_PLL_600_550_1_1G_275
+//#define CFG_PLL_FREQ	CFG_PLL_600_350_175
+//#define CFG_PLL_FREQ	CFG_PLL_600_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_600_1_2G_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_300_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_500_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_400_200_200
+#if !defined(CONFIG_AP123) && !defined(CONFIG_MI124)
+#define CFG_PLL_FREQ    CFG_PLL_560_480_240
+#else
+#define CFG_PLL_FREQ    CFG_PLL_533_400_200
+#endif
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_500_400_200)
+#   define CFG_HZ          (500000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_400_200) || (CFG_PLL_FREQ == CFG_PLL_600_450_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_600_300) || (CFG_PLL_FREQ == CFG_PLL_600_550_275) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_332_166) || (CFG_PLL_FREQ == CFG_PLL_600_575_287) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_525_262) || (CFG_PLL_FREQ == CFG_PLL_600_332_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_266_133) || (CFG_PLL_FREQ == CFG_PLL_600_266_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_650_325) ||  (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_1G_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_550_1_1G_275)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_350_175)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_300_150)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_533_400_200) || (CFG_PLL_FREQ == CFG_PLL_533_500_250)
+#   define CFG_HZ          (533000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_700_400_200)
+#   define CFG_HZ          (700000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_650_600_300)
+#   define CFG_HZ          (650000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_560_480_240)
+#   define CFG_HZ          (560000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_566_475_237) || (CFG_PLL_FREQ == CFG_PLL_566_450_225) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_550_275) || (CFG_PLL_FREQ == CFG_PLL_566_525_262) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_400_200) || (CFG_PLL_FREQ == CFG_PLL_566_500_250)
+#   define CFG_HZ          (566000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+#define CFG_INIT_SRAM_SP_OFFSET 0xbd007000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif
+
+#if 0
+#ifdef CONFIG_ATH_NAND_FL
+#define CONFIG_BOOTCOMMAND "bootm 0x80000"
+#define CFG_ENV_ADDR		0x00040000
+#else  /* CONFIG_ATH_NAND_FL */
+#define CFG_ENV_ADDR		0x9f040000
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else  /* FLASH_SIZE == 16 */
+#ifdef COMPRESSED_UBOOT
+#if (FLASH_SIZE == 4)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else  /* FLASH_SIZE == 4 */
+#define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#endif  /* FLASH_SIZE == 4 */
+#else /* COMPRESSED_UBOOT */
+#if defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f680000"
+#endif
+#endif  /* COMPRESSED_UBOOT */
+#endif  /* FLASH_SIZE == 16 */
+#endif  /* CONFIG_ATH_NAND_FL */
+#endif
+
+
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR settings for WASP */
+
+#define CFG_DDR_REFRESH_VAL     0x4270
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL     0x9dd0e6a8
+
+
+
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32	0xff
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16	0xffff
+
+#if DDR2_32BIT_SUPPORT
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32
+#else
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16
+#endif
+
+#define CFG_DDR1_RD_DATA_THIS_CYCLE_VAL		0xffff
+#define CFG_SDRAM_RD_DATA_THIS_CYCLE_VAL	0xffffffff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+#define CONFIG_SHUTDOWN_PCIE_USB 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+#else
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CONFIG_IPADDR   192.168.1.1
+#define CONFIG_SERVERIP 192.168.1.10
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_WAH132 1 
+
+#define CFG_PHY_ADDR 0 
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0x9fff1000
+#define BOARDCAL                        0x9fff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/scoemu.h b/include/configs/scoemu.h
new file mode 100644
index 0000000..6159793
--- /dev/null
+++ b/include/configs/scoemu.h
@@ -0,0 +1,439 @@
+#ifndef __SCOEMU_H
+#define __SCOEMU_H
+
+#include <config.h>
+
+#undef MTDPARTS_DEFAULT
+
+#undef CFG_HZ
+
+#include <atheros.h>
+
+#ifndef FLASH_SIZE
+#define FLASH_SIZE 8
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS	1	/* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT	256	/* max number of sectors on one chip */
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT	128	/* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT	64	/* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE	(64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE		0x01000000	/* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE		0x00800000	/* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE		0x00400000	/* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF	1
+#endif
+
+//#define CONFIG_WASP_SUPPORT	1
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE	unsigned short
+
+// Set this to zero, for 16bit ddr2
+#define DDR2_32BIT_SUPPORT 		1
+
+/* S16 specific defines */
+
+#define CONFIG_AG7240_GE0_IS_CONNECTED	1
+
+/* NOR Flash start address */
+#define CFG_FLASH_BASE			0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE		CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE	BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE		(256 * 1024)
+#define UBOOT_ENV_SEC_START		(CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC			0xaabacada
+#define CFG_FLASH_MAGIC_F		(UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F		*(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F		*(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F		(CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F		CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F		CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/*
+ * The following #defines are needed to get flash environment right
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#if CONFIG_MI124
+#define BC "bc=mi124_f1e\0"
+#endif
+#if CONFIG_AP123
+#define BC "bc=ap123\0"
+#endif
+
+#define __gen_cmd(n, a, f, ec, cc, el)		\
+	#n "=tftp 0x80060000 ${dir}" #f "&&"	\
+	#ec " " #a " " #el "&&"			\
+	#cc " $fileaddr " #a " $filesize\0"
+
+#define gen_cmd(n, a, f)			\
+	__gen_cmd(n, a, f, erase, cp.b, +$filesize)
+
+#define gen_cmd_el(n, a, f, el)			\
+	__gen_cmd(n, a, f, erase, cp.b, +el)
+
+#define nand_gen_cmd(n, a, f, s)		\
+	__gen_cmd(n, a, f, nand erase, nand write, s)
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR	// nand boot rom
+#		define ATH_U_CMD	nand_gen_cmd(lu, 0x0, 2fw.bin, 0x40000)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		define ATH_ROOT_DEV	"31:03"
+#		define CFG_ENV_ADDR	0x00040000
+#	else	//dual flash
+#		define ATH_U_CMD	gen_cmd(lu, 0x9f000000, u-boot.bin)
+#	define MTDPARTS_DEFAULT 	"mtdparts=ath-nor0:320k(u-boot-and-env),6336k(free);ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		define ATH_ROOT_DEV	"31:05"
+#		define CFG_ENV_ADDR	0x9f040000
+#	endif
+#	define ATH_F_FILE		db12x${bc}-nand-jffs2
+#	define ATH_F_LEN		0x700000
+#	define ATH_F_ADDR		0x1c0000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x80000
+#	define ATH_F_CMD		nand_gen_cmd(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#	define ATH_K_CMD		nand_gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE, 0x140000)
+#	define ATH_EXTRA_ENV		"bootdevice=0\0"
+#	define CONFIG_BOOTCOMMAND	"nboot 0x81000000 0 0x80000"
+#elif defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#		ifdef COMPRESSED_UBOOT
+#		define ATH_U_FILE	tuboot.bin
+#		define ATH_F_FILE	${bc}-jffs2
+#		define ATH_F_LEN	$filesize
+#		define ATH_F_ADDR	0x9f010000
+#		define ATH_K_FILE	vmlinux_${bc}.lzma.uImage
+#		define ATH_K_ADDR	0x9f300000
+			/*
+			 * For compressed uboot, environment sector is not used.
+			 * Hence the mtd partition indices get reduced by 1.
+			 * This conflicts with
+			 *	- minor no. for /dev/caldata in
+			 *		build/scripts/{board}/dev.txt
+			 *	- root=<rooot dev> kernel cmdline parameter
+			 * Hence, doing a dummy split of the u-boot partition
+			 * to maintain the same minor no. as in the normal u-boot.
+			 */
+#			define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:32k(u-boot1),32k(u-boot2),3008k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#		else /* COMPRESSED_UBOOT */
+#		define ATH_U_FILE	u-boot.bin
+#		define ATH_F_FILE	${bc}-jffs2
+#		define ATH_F_LEN	$filesize
+#		define ATH_F_ADDR	0x9f050000
+#		define ATH_K_FILE	vmlinux_${bc}.lzma.uImage
+#		define ATH_K_ADDR	0x9f300000
+#			define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#		endif /* COMPRESSED_UBOOT */
+#elif defined(CONFIG_DB12X_P2P)
+#	define ATH_U_FILE		u-boot.bin
+#	define ATH_F_FILE		db12x-p2p${bc}-jffs2
+#	define ATH_F_LEN		0x630000
+#	define ATH_F_ADDR		0x9f050000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x9f680000
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#else
+#	define ATH_U_FILE		u-boot.bin
+#	define ATH_F_FILE		db12x${bc}-jffs2
+#	define ATH_F_LEN		0x630000
+#	define ATH_F_ADDR		0x9f050000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x9f680000
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#endif /*CONFIG_MI124*/
+
+#ifndef ATH_ROOT_DEV
+#	define ATH_ROOT_DEV	"31:02"
+#endif
+
+#ifndef ATH_EXTRA_ENV
+#	define ATH_EXTRA_ENV
+#endif
+
+#ifndef ATH_U_CMD
+#	define ATH_U_CMD	gen_cmd(lu, 0x9f000000, ATH_U_FILE)
+#endif
+
+#ifndef ATH_F_CMD
+#	define ATH_F_CMD	gen_cmd_el(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#endif
+
+#ifndef ATH_K_CMD
+#	define ATH_K_CMD	gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE)
+#endif
+
+#define CONFIG_EXTRA_ENV_SETTINGS	\
+	"dir=\0" ATH_U_CMD ATH_F_CMD ATH_K_CMD ""
+
+#define	CONFIG_BOOTARGS		"console=ttyS0,115200 root=" ATH_ROOT_DEV " rootfstype=jffs2 init=/sbin/init " MTDPARTS_DEFAULT
+
+#undef CFG_PLL_FREQ
+
+//#define CFG_PLL_FREQ	CFG_PLL_600_266_133
+//#define CFG_PLL_FREQ	CFG_PLL_600_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_566_550_275
+//#define CFG_PLL_FREQ	CFG_PLL_566_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_600_332_166
+//#define CFG_PLL_FREQ	CFG_PLL_566_475_237
+//#define CFG_PLL_FREQ	CFG_PLL_600_575_287
+//#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_533_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_450_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_500_1G_250
+//#define CFG_PLL_FREQ	CFG_PLL_600_550_1_1G_275
+//#define CFG_PLL_FREQ	CFG_PLL_600_350_175
+//#define CFG_PLL_FREQ	CFG_PLL_600_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_600_1_2G_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_300_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_500_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_400_200_200
+#if !defined(CONFIG_AP123) && !defined(CONFIG_MI124)
+#define CFG_PLL_FREQ    CFG_PLL_560_480_240
+#else
+#define CFG_PLL_FREQ    CFG_PLL_533_400_200
+#endif
+
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline. The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#ifdef CONFIG_ATH_EMULATION
+#	define CFG_HZ	(80000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ	(200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ	(300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#	define CFG_HZ	(350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ	(333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ	(266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ	(400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#	define CFG_HZ	(320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#	define CFG_HZ	(410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#	define CFG_HZ	(420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#	define CFG_HZ	(240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#	define CFG_HZ	(160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_500_400_200)
+#	define CFG_HZ	(500000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_400_200) || (CFG_PLL_FREQ == CFG_PLL_600_450_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_600_300) || (CFG_PLL_FREQ == CFG_PLL_600_550_275) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_332_166) || (CFG_PLL_FREQ == CFG_PLL_600_575_287) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_525_262) || (CFG_PLL_FREQ == CFG_PLL_600_332_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_266_133) || (CFG_PLL_FREQ == CFG_PLL_600_266_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_650_325) ||  (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_1G_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_550_1_1G_275)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_350_175)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_300_150)
+#	define CFG_HZ	(600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_533_400_200) || (CFG_PLL_FREQ == CFG_PLL_533_500_250)
+#	define CFG_HZ	(533000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_700_400_200)
+#	define CFG_HZ	(700000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_650_600_300)
+#	define CFG_HZ	(650000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_560_480_240)
+#	define CFG_HZ	(560000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_566_475_237) || (CFG_PLL_FREQ == CFG_PLL_566_450_225) || \
+	(CFG_PLL_FREQ == CFG_PLL_566_550_275) || (CFG_PLL_FREQ == CFG_PLL_566_525_262) || \
+	(CFG_PLL_FREQ == CFG_PLL_566_400_200) || (CFG_PLL_FREQ == CFG_PLL_566_500_250)
+#	define CFG_HZ	(566000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef CONFIG_ATH_NAND_SUPPORT
+#	define CFG_ENV_ADDR		0x9f040000
+#	if (FLASH_SIZE == 16)
+#		define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#	else	/* FLASH_SIZE == 16 */
+#		ifdef COMPRESSED_UBOOT
+#			if (FLASH_SIZE == 4)
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#			else	/* FLASH_SIZE == 4 */
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#			endif	/* FLASH_SIZE == 4 */
+#		else /* COMPRESSED_UBOOT */
+#			if defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#			else
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f680000"
+#			endif
+#		endif	/* COMPRESSED_UBOOT */
+#	endif	/* FLASH_SIZE == 16 */
+#endif
+
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC		0xaabacada
+#define CFG_DDR_MAGIC_F		(UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define ATH_CFG_COMMANDS	((			\
+				CONFIG_CMD_DFL	|	\
+				CFG_CMD_DHCP	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_PCI	|	\
+				CFG_CMD_FLS	|	\
+				CFG_CMD_MII	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET	|	\
+				CFG_CMD_ENV	|	\
+				CFG_CMD_PLL	|	\
+				CFG_CMD_FLASH	|	\
+				CFG_CMD_RUN	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_DDR	|	\
+				CFG_CMD_ETHREG		\
+				) & ~(			\
+				CFG_CMD_IMLS	|	\
+				CFG_CMD_FLASH		\
+				))
+#else
+#define ATH_CFG_COMMANDS	(CONFIG_CMD_DFL	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET)
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR
+#		define CFG_ENV_IS_IN_NAND	1
+#		define CFG_ENV_OFFSET		0x40000u
+#		define CFG_ENV_SIZE		0x40000u
+#		define ATH_EXTRA_CMD		CFG_CMD_NAND
+#	else
+#		define CFG_ENV_IS_IN_FLASH	1
+#		define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+#		define ATH_EXTRA_CMD		(CFG_CMD_NAND | CFG_CMD_FLASH)
+#	endif
+#	define NAND_MAX_CHIPS			1
+#	define CFG_MAX_NAND_DEVICE		1
+#else
+#	define ATH_EXTRA_CMD			CFG_CMD_FLASH
+#	define CFG_ENV_IS_IN_FLASH		1
+#	define CFG_ENV_SIZE			CFG_FLASH_SECTOR_SIZE
+#endif
+
+#define DEBUG
+
+#ifdef COMPRESSED_UBOOT
+#undef  CFG_ENV_IS_IN_FLASH
+#undef  CFG_ENV_IS_IN_NAND
+#define CFG_ENV_IS_NOWHERE		1
+#endif
+
+#define CONFIG_COMMANDS			(ATH_CFG_COMMANDS | ATH_EXTRA_CMD)
+
+#define CONFIG_IPADDR			192.168.1.1
+#define CONFIG_SERVERIP			192.168.1.10
+#define CONFIG_ETHADDR			0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN	1
+
+#define CFG_PHY_ADDR			0
+#define CFG_GMII			0
+#define CFG_MII0_RMII			1
+#define CFG_AG7100_GE0_RMII		1
+
+#define CFG_BOOTM_LEN			(16 << 20) /* 16 MB */
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2		"hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL				0x9fff1000
+#define BOARDCAL			0x9fff0000
+#define ATHEROS_PRODUCT_ID		137
+#define CAL_SECTOR			(CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define ATH_ART_PCICFG_OFFSET		12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __SCOEMU_H */
diff --git a/include/configs/tb225.h b/include/configs/tb225.h
new file mode 100644
index 0000000..816c8a0
--- /dev/null
+++ b/include/configs/tb225.h
@@ -0,0 +1,84 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7100.h>
+
+/*
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS	     1	     /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT	    (128)	 /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+/* 
+ * We boot from this flash, selected with dip switch 
+ */
+#define CFG_FLASH_BASE		    0xbfc00000
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	    TEXT_BASE
+#define	CFG_MONITOR_LEN		    (192 << 10)
+
+/*
+ * cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	    0x1000
+
+
+/* timeout values are in ticks */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+//#define	CFG_ENV_IS_IN_FLASH    1
+#define CFG_ENV_IS_NOWHERE  1
+
+/* Address and size of Primary Environment Sector	*/
+//#define CFG_ENV_ADDR		0xbfc30000
+#define CFG_ENV_SIZE		0x10000
+
+//#define CONFIG_FLASH_16BIT
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+#define CFG_HZ          40000000
+
+#define CFG_DDR_REFRESH_VAL 0x4139
+#define CFG_DDR_TRTW_VAL    0x12
+#define CFG_DDR_TWTR_VAL    0x12
+
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | \
+            CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET |\
+   CFG_CMD_ENV | CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB \
+   | CFG_CMD_ELF ) & ~CFG_CMD_ENV)
+
+#define CFG_PHY_ADDR    0x18
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.11
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+//#define CFG_VSC8201_PHY             1
+#define CFG_IP175B_PHY             1
+
+#define CFG_MII0_RGMII             0
+
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/tb243.h b/include/configs/tb243.h
new file mode 100644
index 0000000..ff19bc8
--- /dev/null
+++ b/include/configs/tb243.h
@@ -0,0 +1,124 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7100.h>
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#//define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+//#define CFG_FLASH_SIZE          0x00800000    /* max number of sectors on one chip */
+#define CFG_FLASH_SIZE          0x00800000    /* max number of sectors on one chip */
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+#define CFG_FLASH_ADDR0         (0x5555)  		
+#define CFG_FLASH_ADDR1         (0x2AAA)
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0xbf000000
+//#define CFG_FLASH_BASE		    0xbfc00000 /* Temp WAR as remap is not on by default */
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CFG_HZ
+
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          200000000
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          200000000
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          222000000
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          266000000
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          266000000
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200)
+#	define CFG_HZ          400000000
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0xbf040000
+#define CFG_ENV_SIZE		0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0xbf550000"
+//#define CONFIG_FLASH_16BIT
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+#define CFG_DDR_REFRESH_VAL     0x4c00
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | \
+            CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET |\
+   CFG_CMD_ENV | CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB \
+   | CFG_CMD_ELF ))
+
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.11
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+#define CONFIG_ADMTEK_PHY 
+#define CFG_PHY_ADDR 0x14  /* Port 4 */
+
+#define CFG_GMII     0
+#define CFG_MII0_MII             0
+
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+#include <cmd_confdefs.h>
+
+/* Ported from
+ * redboot/ecos/packages/hal/mips/pb42/current/cdl/hal_mips_pb42.cdl
+ */
+
+#define CFG_DDR_CONFIG_VAL              0x67bc8cd0
+#define CFG_DDR_CONFIG2_VAL			    0x83d1f6a2
+#define CFG_DDR_MODE_VAL			    0x61
+#define CFG_DDR_MODE_VAL_INIT		    0x161
+#define CFG_DDR_EXT_MODE_VAL            0x2
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0xffff
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/tb327.h b/include/configs/tb327.h
new file mode 100644
index 0000000..0e057ce
--- /dev/null
+++ b/include/configs/tb327.h
@@ -0,0 +1,156 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00800000 /* Total flash size */
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0xbf000000
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2688k(rootfs),1024k(uImage)"
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),1024k(uImage)"
+
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ	CFG_PLL_300_300_150
+
+/* Atheros Header configuration */
+
+#define CFG_ATHRS26_PHY  1
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0xbf040000
+#define CFG_ENV_SIZE		0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0xbf2f0000"
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0x7fbc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x2
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 0x99d0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI |	\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV |	\
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF ))
+
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.27
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                        0xbfff1000
+#define BOARDCAL                       0xbfff0000
+#define ATHEROS_PRODUCT_ID             136
+#define CAL_SECTOR                     63
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/tb6xx.h b/include/configs/tb6xx.h
new file mode 100644
index 0000000..430c1f1
--- /dev/null
+++ b/include/configs/tb6xx.h
@@ -0,0 +1,342 @@
+#ifndef __TB6XX_H
+#define __TB6XX_H
+
+#include <config.h>
+
+#undef MTDPARTS_DEFAULT
+
+#undef CFG_HZ
+
+#include <atheros.h>
+
+#ifndef FLASH_SIZE
+#define FLASH_SIZE 8
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS	1	/* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT	256	/* max number of sectors on one chip */
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT	128	/* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT	64	/* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE	(64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE		0x01000000	/* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE		0x00800000	/* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE		0x00400000	/* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF	1
+#endif
+
+//#define CONFIG_WASP_SUPPORT	1
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE	unsigned short
+
+// Set this to zero, for 16bit ddr2
+#define DDR2_32BIT_SUPPORT 		1
+
+/* S16 specific defines */
+
+#define CONFIG_AG7240_GE0_IS_CONNECTED	1
+
+/* NOR Flash start address */
+#define CFG_FLASH_BASE			0x9f000000
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE		CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE	BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE		(256 * 1024)
+#define UBOOT_ENV_SEC_START		(CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC			0xaabacada
+#define CFG_FLASH_MAGIC_F		(UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F		*(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F		*(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F		(CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F		CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F		CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+#define CFG_DDR_REFRESH_VAL			0x412c
+
+/*
+ * The following #defines are needed to get flash environment right
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+
+#if CONFIG_MI124
+#define BC "bc=mi124_f1e\0"
+#endif
+#if CONFIG_AP123
+#define BC "bc=ap123\0"
+#endif
+
+#define __gen_cmd(n, a, f, ec, cc, el)		\
+	#n "=tftp 0x80060000 ${dir}" #f "&&"	\
+	#ec " " #a " " #el "&&"			\
+	#cc " $fileaddr " #a " $filesize\0"
+
+#define gen_cmd(n, a, f)			\
+	__gen_cmd(n, a, f, erase, cp.b, +$filesize)
+
+#define gen_cmd_el(n, a, f, el)			\
+	__gen_cmd(n, a, f, erase, cp.b, +el)
+
+#define nand_gen_cmd(n, a, f, s)		\
+	__gen_cmd(n, a, f, nand erase, nand write, s)
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR	// nand boot rom
+#		define ATH_U_CMD	nand_gen_cmd(lu, 0x0, 2fw.bin, 0x40000)
+#		define MTDPARTS_DEFAULT "mtdparts=ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		define ATH_ROOT_DEV	"31:03"
+#		define CFG_ENV_ADDR	0x00040000
+#	else	//dual flash
+#		define ATH_U_CMD	gen_cmd(lu, 0x9f000000, u-boot.bin)
+#	define MTDPARTS_DEFAULT 	"mtdparts=ath-nor0:320k(u-boot-and-env),6336k(free);ath-nand:256k(u-boot),256k(u-boot-env),1280k(uImage),7m(rootfs),128k(dummy),128k(caldata)"
+#		define ATH_ROOT_DEV	"31:05"
+#		define CFG_ENV_ADDR	0x9f040000
+#	endif
+#	define ATH_F_FILE		tb6xx${bc}-nand-jffs2
+#	define ATH_F_LEN		0x700000
+#	define ATH_F_ADDR		0x1c0000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x80000
+#	define ATH_F_CMD		nand_gen_cmd(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#	define ATH_K_CMD		nand_gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE, 0x140000)
+#	define ATH_EXTRA_ENV		"bootdevice=0\0"
+#	define CONFIG_BOOTCOMMAND	"nboot 0x81000000 0 0x80000"
+#elif defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#		ifdef COMPRESSED_UBOOT
+#		define ATH_U_FILE	tuboot.bin
+#		define ATH_F_FILE	${bc}-jffs2
+#		define ATH_F_LEN	$filesize
+#		define ATH_F_ADDR	0x9f010000
+#		define ATH_K_FILE	vmlinux_${bc}.lzma.uImage
+#		define ATH_K_ADDR	0x9f300000
+			/*
+			 * For compressed uboot, environment sector is not used.
+			 * Hence the mtd partition indices get reduced by 1.
+			 * This conflicts with
+			 *	- minor no. for /dev/caldata in
+			 *		build/scripts/{board}/dev.txt
+			 *	- root=<rooot dev> kernel cmdline parameter
+			 * Hence, doing a dummy split of the u-boot partition
+			 * to maintain the same minor no. as in the normal u-boot.
+			 */
+#			define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:32k(u-boot1),32k(u-boot2),3008k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#		else /* COMPRESSED_UBOOT */
+#		define ATH_U_FILE	u-boot.bin
+#		define ATH_F_FILE	${bc}-jffs2
+#		define ATH_F_LEN	$filesize
+#		define ATH_F_ADDR	0x9f050000
+#		define ATH_K_FILE	vmlinux_${bc}.lzma.uImage
+#		define ATH_K_ADDR	0x9f300000
+#			define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(mib0),64k(ART)"
+#		endif /* COMPRESSED_UBOOT */
+#elif defined(CONFIG_TB6XX_P2P)
+#	define ATH_U_FILE		u-boot.bin
+#	define ATH_F_FILE		tb6xx-p2p${bc}-jffs2
+#	define ATH_F_LEN		0x630000
+#	define ATH_F_ADDR		0x9f050000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x9f680000
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#else
+#	define ATH_U_FILE		u-boot.bin
+#	define ATH_F_FILE		tb6xx${bc}-jffs2
+#	define ATH_F_LEN		0x630000
+#	define ATH_F_ADDR		0x9f050000
+#	define ATH_K_FILE		vmlinux${bc}.lzma.uImage
+#	define ATH_K_ADDR		0x9f680000
+#	define MTDPARTS_DEFAULT		"mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#endif /*CONFIG_MI124*/
+
+#ifndef ATH_ROOT_DEV
+#	define ATH_ROOT_DEV	"31:02"
+#endif
+
+#ifndef ATH_EXTRA_ENV
+#	define ATH_EXTRA_ENV
+#endif
+
+#ifndef ATH_U_CMD
+#	define ATH_U_CMD	gen_cmd(lu, 0x9f000000, ATH_U_FILE)
+#endif
+
+#ifndef ATH_F_CMD
+#	define ATH_F_CMD	gen_cmd_el(lf, ATH_F_ADDR, ATH_F_FILE, ATH_F_LEN)
+#endif
+
+#ifndef ATH_K_CMD
+#	define ATH_K_CMD	gen_cmd(lk, ATH_K_ADDR, ATH_K_FILE)
+#endif
+
+#define CONFIG_EXTRA_ENV_SETTINGS	\
+	"dir=\0" ATH_U_CMD ATH_F_CMD ATH_K_CMD ""
+
+#define	CONFIG_BOOTARGS		"console=ttyS0,115200 root=" ATH_ROOT_DEV " rootfstype=jffs2 init=/sbin/init " MTDPARTS_DEFAULT
+
+//#define CFG_PLL_FREQ    CFG_PLL_720_600_200
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef CONFIG_ATH_NAND_SUPPORT
+#	define CFG_ENV_ADDR		0x9f040000
+#	if (FLASH_SIZE == 16)
+#		define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#	else	/* FLASH_SIZE == 16 */
+#		ifdef COMPRESSED_UBOOT
+#			if (FLASH_SIZE == 4)
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#			else	/* FLASH_SIZE == 4 */
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#			endif	/* FLASH_SIZE == 4 */
+#		else /* COMPRESSED_UBOOT */
+#			if defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#			else
+#				define CONFIG_BOOTCOMMAND "bootm 0x9f680000"
+#			endif
+#		endif	/* COMPRESSED_UBOOT */
+#	endif	/* FLASH_SIZE == 16 */
+#endif
+
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC		0xaabacada
+#define CFG_DDR_MAGIC_F		(UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define ATH_CFG_COMMANDS	((			\
+				CONFIG_CMD_DFL	|	\
+				CFG_CMD_DHCP	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_PCI	|	\
+				CFG_CMD_FLS	|	\
+				CFG_CMD_MII	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET	|	\
+				CFG_CMD_ENV	|	\
+				CFG_CMD_PLL	|	\
+				CFG_CMD_FLASH	|	\
+				CFG_CMD_RUN	|	\
+				CFG_CMD_ELF	|	\
+				CFG_CMD_DDR	|	\
+				CFG_CMD_ETHREG		\
+				) & ~(			\
+				CFG_CMD_IMLS	|	\
+				CFG_CMD_FLASH		\
+				))
+#else
+#define ATH_CFG_COMMANDS	(CONFIG_CMD_DFL	|	\
+				CFG_CMD_PING	|	\
+				CFG_CMD_NET)
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#ifdef CONFIG_ATH_NAND_SUPPORT
+#	ifdef CONFIG_ATH_NAND_BR
+#		define CFG_ENV_IS_IN_NAND	1
+#		define CFG_ENV_OFFSET		0x40000u
+#		define CFG_ENV_SIZE		0x40000u
+#		define ATH_EXTRA_CMD		CFG_CMD_NAND
+#	else
+#		define CFG_ENV_IS_IN_FLASH	1
+#		define CFG_ENV_SIZE		CFG_FLASH_SECTOR_SIZE
+#		define ATH_EXTRA_CMD		(CFG_CMD_NAND | CFG_CMD_FLASH)
+#	endif
+#	define NAND_MAX_CHIPS			1
+#	define CFG_MAX_NAND_DEVICE		1
+#else
+#	define ATH_EXTRA_CMD			CFG_CMD_FLASH
+#	define CFG_ENV_IS_IN_FLASH		1
+#	define CFG_ENV_SIZE			CFG_FLASH_SECTOR_SIZE
+#endif
+
+#define DEBUG
+
+#ifdef COMPRESSED_UBOOT
+#undef  CFG_ENV_IS_IN_FLASH
+#undef  CFG_ENV_IS_IN_NAND
+#define CFG_ENV_IS_NOWHERE		1
+#endif
+
+#define CONFIG_COMMANDS			(ATH_CFG_COMMANDS | ATH_EXTRA_CMD)
+
+#define CONFIG_IPADDR			192.168.1.1
+#define CONFIG_SERVERIP			192.168.1.10
+#define CONFIG_ETHADDR			0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN	1
+
+#define CFG_PHY_ADDR			0
+#define CFG_GMII			0
+#define CFG_MII0_RMII			1
+#define CFG_AG7100_GE0_RMII		1
+
+#define CFG_BOOTM_LEN			(16 << 20) /* 16 MB */
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2		"hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL				0x9fff1000
+#define BOARDCAL			0x9fff0000
+#define ATHEROS_PRODUCT_ID		137
+#define CAL_SECTOR			(CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define ATH_ART_PCICFG_OFFSET		12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __TB6XX_H */
diff --git a/include/configs/wah132.h b/include/configs/wah132.h
new file mode 100644
index 0000000..7b744e3
--- /dev/null
+++ b/include/configs/wah132.h
@@ -0,0 +1,422 @@
+/*
+ * This file contains the configuration parameters for the db120 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#if !defined(CONFIG_ATH_NAND_FL)
+#define FLASH_SIZE 16
+#endif
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#if (FLASH_SIZE == 16)
+#define CFG_MAX_FLASH_SECT      256    /* max number of sectors on one chip */
+#elif (FLASH_SIZE == 8)
+#define CFG_MAX_FLASH_SECT      128    /* max number of sectors on one chip */
+#else
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#endif
+
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#if (FLASH_SIZE == 16)
+#define CFG_FLASH_SIZE          0x01000000 /* Total flash size */
+#elif (FLASH_SIZE == 8)
+#define CFG_FLASH_SIZE          0x00800000    /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+#endif
+
+#ifndef COMPRESSED_UBOOT
+#define ENABLE_DYNAMIC_CONF 1
+#endif
+
+#define CONFIG_WASP_SUPPORT 1
+#undef CFG_ATHRS26_PHY
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+// Set this to zero, for 16bit ddr2
+#define DDR2_32BIT_SUPPORT 	1
+
+/* S16 specific defines */
+
+#define CONFIG_AG7240_GE0_IS_CONNECTED 1
+
+/* Assuming nand flash wouldn't use compressed u-boot */
+#ifdef CONFIG_ATH_NAND_FL
+#	define CFG_FLASH_BASE			0
+#else
+	/*
+	 * We boot from this flash
+	 */
+#	define CFG_FLASH_BASE			0x9f000000
+#endif
+
+#ifdef COMPRESSED_UBOOT
+#define BOOTSTRAP_TEXT_BASE         CFG_FLASH_BASE
+#define BOOTSTRAP_CFG_MONITOR_BASE  BOOTSTRAP_TEXT_BASE
+#endif
+
+/*
+ * Defines to change flash size on reboot
+ */
+#ifdef ENABLE_DYNAMIC_CONF
+#define UBOOT_FLASH_SIZE          (256 * 1024)
+#define UBOOT_ENV_SEC_START        (CFG_FLASH_BASE + UBOOT_FLASH_SIZE)
+
+#define CFG_FLASH_MAGIC           0xaabacada  
+#define CFG_FLASH_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x20)
+#define CFG_FLASH_SECTOR_SIZE_F   *(volatile int *)(CFG_FLASH_MAGIC_F + 0x4)
+#define CFG_FLASH_SIZE_F          *(volatile int *)(CFG_FLASH_MAGIC_F + 0x8) /* Total flash size */
+#define CFG_MAX_FLASH_SECT_F      (CFG_FLASH_SIZE / CFG_FLASH_SECTOR_SIZE) /* max number of sectors on one chip */
+#else
+#define CFG_FLASH_SIZE_F          CFG_FLASH_SIZE
+#define CFG_FLASH_SECTOR_SIZE_F   CFG_FLASH_SECTOR_SIZE
+#endif
+
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+/* Address and size of Primary Environment Sector   */
+#define CFG_ENV_ADDR        (CFG_FLASH_BASE+UBOOT_FLASH_SIZE)
+#define CFG_ENV_SIZE        CFG_FLASH_SECTOR_SIZE
+
+
+#undef CONFIG_BOOTARGS
+
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),8192k(reserve),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:256k(u-boot),256k(u-boot-env),5120k(rootfs),1024k(uImage)"
+#else /* FLASH_SIZE=8M */
+#ifdef COMPRESSED_UBOOT
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:01 rootfstype=jffs2 init=/sbin/init mtdparts=ath-nor0:64k(u-boot),6592k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:64k(u-boot),6592k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#else
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+/* default mtd partition table */
+#define MTDPARTS_DEFAULT    "mtdparts=ath-nor0:256k(u-boot),64k(u-boot-env),6336k(rootfs),1408k(uImage),64k(mib0),64k(ART)"
+#endif
+#endif
+
+#if (FLASH_SIZE == 16)
+#define CFG_KERNEL_ADDR 0x9f680000
+#else
+#define CFG_KERNEL_ADDR 0x9f680000
+#endif
+#define CFG_MIB0_ADDR		0x9ffe0000
+
+#define CONFIG_BOOTCOMMAND "bootm ${KERNELADDR}"
+
+#ifndef CFG_LOAD_ADDR
+#define CFG_LOAD_ADDR		0x80060000
+#endif
+#ifndef COMPRESSED_UBOOT
+#define CFG_FS_ADDR			0x9f050000//(CFG_ENV_ADDR+CFG_ENV_SIZE)
+#else
+#define CFG_FS_ADDR			0x9f010000//(CFG_FLASH_BASE+UBOOT_FLASH_SIZE)
+#endif /* COMPRESSED_UBOOT */
+#define ENV_FS_ADDR			"FSADDR=" MK_STR(CFG_FS_ADDR) "\0"
+
+#define ENV_UBOOT_ADDR		"UBOOTADDR=" MK_STR(CFG_FLASH_BASE) "\0"
+#define ENV_KERNEL_ADDR		"KERNELADDR=" MK_STR(CFG_KERNEL_ADDR) "\0"
+#define ENV_MIB0_ADDR		"MIB0ADDR=" MK_STR(CFG_MIB0_ADDR) "\0"
+
+#define ENV_UPDATE \
+    "update=tftpboot " MK_STR(CFG_LOAD_ADDR) " ${filename} && "	\
+            "erase ${loadaddr} +${filesize} && "				\
+            "cp.b ${fileaddr} ${loadaddr} ${filesize}\0"
+
+#define ENV_UPDATE_KERNEL \
+    "updk=loadaddr=${KERNELADDR} && filename=zImage.uImage && " \
+    "run update\0"
+
+#define ENV_UPDATE_FS \
+    "updfs=loadaddr=${FSADDR} && filename=rootfs-jffs2 && " \
+    "run update\0"
+
+#ifdef COMPRESSED_UBOOT
+#define UBOOT_FILENAME "tuboot.bin"
+#else
+#define UBOOT_FILENAME "u-boot.bin"
+#endif
+
+#define ENV_UPDATE_UBOOT \
+    "updub=loadaddr=${UBOOTADDR} && filename=" UBOOT_FILENAME " && " \
+    "run update\0"
+
+#define ENV_UPDATE_ALL \
+	"updall=run updub && run updfs && run updk\0"
+
+#define ENV_ERASE_MIB0 \
+	"erasemib0=erase ${MIB0ADDR} +0x10000"
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+		ENV_UBOOT_ADDR \
+		ENV_FS_ADDR \
+		ENV_KERNEL_ADDR \
+		ENV_MIB0_ADDR \
+		ENV_UPDATE \
+		ENV_UPDATE_KERNEL \
+		ENV_UPDATE_FS \
+		ENV_UPDATE_UBOOT \
+		ENV_UPDATE_ALL \
+		ENV_ERASE_MIB0 \
+		""
+
+#undef CFG_PLL_FREQ
+
+//#define CFG_PLL_FREQ	CFG_PLL_600_266_133
+//#define CFG_PLL_FREQ	CFG_PLL_600_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_566_550_275
+//#define CFG_PLL_FREQ	CFG_PLL_566_525_262
+//#define CFG_PLL_FREQ	CFG_PLL_600_332_166
+//#define CFG_PLL_FREQ	CFG_PLL_566_475_237
+//#define CFG_PLL_FREQ	CFG_PLL_600_575_287
+//#define CFG_PLL_FREQ	CFG_PLL_400_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_533_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_450_200
+//#define CFG_PLL_FREQ	CFG_PLL_600_500_1G_250
+//#define CFG_PLL_FREQ	CFG_PLL_600_550_1_1G_275
+//#define CFG_PLL_FREQ	CFG_PLL_600_350_175
+//#define CFG_PLL_FREQ	CFG_PLL_600_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_600_1_2G_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_300_300_150
+//#define CFG_PLL_FREQ	CFG_PLL_500_400_200
+//#define CFG_PLL_FREQ	CFG_PLL_400_200_200
+#if !defined(CONFIG_AP123) && !defined(CONFIG_MI124)
+#define CFG_PLL_FREQ    CFG_PLL_560_480_240
+#else
+#define CFG_PLL_FREQ    CFG_PLL_533_400_200
+#endif
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#   define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#   define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#   define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#   define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#   define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#   define CFG_HZ          (320000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_410_400_200)
+#   define CFG_HZ          (410000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_420_400_200)
+#   define CFG_HZ          (420000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_240_240_120)
+#   define CFG_HZ          (240000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_160_160_80)
+#   define CFG_HZ          (160000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_200_200)
+#   define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_500_400_200)
+#   define CFG_HZ          (500000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_400_200) || (CFG_PLL_FREQ == CFG_PLL_600_450_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_600_300) || (CFG_PLL_FREQ == CFG_PLL_600_550_275) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_332_166) || (CFG_PLL_FREQ == CFG_PLL_600_575_287) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_525_262) || (CFG_PLL_FREQ == CFG_PLL_600_332_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_266_133) || (CFG_PLL_FREQ == CFG_PLL_600_266_200) || \
+      (CFG_PLL_FREQ == CFG_PLL_600_650_325) ||  (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_1_2G_400_200)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_1G_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_550_1_1G_275)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_500_250)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_350_175)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_600_300_150)
+#   define CFG_HZ          (600000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_533_400_200) || (CFG_PLL_FREQ == CFG_PLL_533_500_250)
+#   define CFG_HZ          (533000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_700_400_200)
+#   define CFG_HZ          (700000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_650_600_300)
+#   define CFG_HZ          (650000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_560_480_240)
+#   define CFG_HZ          (560000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_566_475_237) || (CFG_PLL_FREQ == CFG_PLL_566_450_225) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_550_275) || (CFG_PLL_FREQ == CFG_PLL_566_525_262) || \
+      (CFG_PLL_FREQ == CFG_PLL_566_400_200) || (CFG_PLL_FREQ == CFG_PLL_566_500_250)
+#   define CFG_HZ          (566000000/2)
+#endif
+
+/*
+ * timeout values are in ticks
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#ifndef COMPRESSED_UBOOT
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE
+#else
+#undef  CFG_ENV_IS_IN_FLASH
+#define CFG_ENV_IS_NOWHERE  1
+#endif
+
+#if 0
+#ifdef CONFIG_ATH_NAND_FL
+#define CONFIG_BOOTCOMMAND "bootm 0x80000"
+#define CFG_ENV_ADDR		0x00040000
+#else  /* CONFIG_ATH_NAND_FL */
+#define CFG_ENV_ADDR		0x9f040000
+#if (FLASH_SIZE == 16)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f550000"
+#else  /* FLASH_SIZE == 16 */
+#ifdef COMPRESSED_UBOOT
+#if (FLASH_SIZE == 4)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else  /* FLASH_SIZE == 4 */
+#define CONFIG_BOOTCOMMAND "bootm 0x9f320000"
+#endif  /* FLASH_SIZE == 4 */
+#else /* COMPRESSED_UBOOT */
+#if defined(CONFIG_MI124) || defined(CONFIG_AP123)
+#define CONFIG_BOOTCOMMAND "bootm 0x9f300000"
+#else
+#define CONFIG_BOOTCOMMAND "bootm 0x9f680000"
+#endif
+#endif  /* COMPRESSED_UBOOT */
+#endif  /* FLASH_SIZE == 16 */
+#endif  /* CONFIG_ATH_NAND_FL */
+#endif
+
+
+
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* DDR settings for WASP */
+
+#define CFG_DDR_REFRESH_VAL     0x4270
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL     0x9dd0e6a8
+
+
+
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32	0xff
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16	0xffff
+
+#if DDR2_32BIT_SUPPORT
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_32
+#else
+#define CFG_DDR2_RD_DATA_THIS_CYCLE_VAL		CFG_DDR2_RD_DATA_THIS_CYCLE_VAL_16
+#endif
+
+#define CFG_DDR1_RD_DATA_THIS_CYCLE_VAL		0xffff
+#define CFG_SDRAM_RD_DATA_THIS_CYCLE_VAL	0xffffffff
+
+/* DDR2 Init values */
+#define CFG_DDR2_EXT_MODE_VAL    0x402
+
+
+#ifdef ENABLE_DYNAMIC_CONF
+#define CFG_DDR_MAGIC           0xaabacada
+#define CFG_DDR_MAGIC_F         (UBOOT_ENV_SEC_START + CFG_FLASH_SECTOR_SIZE - 0x30)
+#define CFG_DDR_CONFIG_VAL_F    *(volatile int *)(CFG_DDR_MAGIC_F + 4)
+#define CFG_DDR_CONFIG2_VAL_F	*(volatile int *)(CFG_DDR_MAGIC_F + 8)
+#define CFG_DDR_EXT_MODE_VAL_F  *(volatile int *)(CFG_DDR_MAGIC_F + 12)
+#endif
+
+#define CONFIG_NET_MULTI
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI 1
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#ifndef COMPRESSED_UBOOT
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | CFG_CMD_PCI | CFG_CMD_FLS |\
+	CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET | CFG_CMD_ENV | CFG_CMD_PLL| \
+	CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB | CFG_CMD_ELF | CFG_CMD_DDR | CFG_CMD_ETHREG))
+#else
+#define CONFIG_COMMANDS (( CONFIG_CMD_DFL | CFG_CMD_PING | CFG_CMD_NET))
+#endif /* #ifndef COMPRESSED_UBOOT */
+
+#define CONFIG_IPADDR   192.168.1.1
+#define CONFIG_SERVERIP 192.168.1.10
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_WAH132 1 
+
+#define CFG_PHY_ADDR 0 
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0x9fff1000
+#define BOARDCAL                        0x9fff0000
+#define ATHEROS_PRODUCT_ID              137
+#define CAL_SECTOR                      (CFG_MAX_FLASH_SECT - 1)
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/wasp_emu.h b/include/configs/wasp_emu.h
new file mode 100644
index 0000000..b443030
--- /dev/null
+++ b/include/configs/wasp_emu.h
@@ -0,0 +1,179 @@
+/*
+ * This file contains the configuration parameters for the dbau1x00 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+
+#define CONFIG_AR7240_EMU 1
+#define CONFIG_WASP_EMU 1
+#define CONFIG_WASP_SUPPORT 1
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      64    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00400000 /* Total flash size */
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0xbf000000
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define	CONFIG_BOOTARGS     "console=ttyS0,9600 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),1024k(uImage)"
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),1024k(uImage)"
+
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ	CFG_PLL_400_400_100
+
+/* Atheros Header configuration */
+
+#define CFG_ATHRS27_PHY  1
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0xbf040000
+#define CFG_ENV_SIZE		0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0xbf550000"
+//#define CONFIG_FLASH_16BIT
+
+#define CONFIG_NR_DRAM_BANKS	2
+#if 0
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#define CFG_DDR_REFRESH_VAL     0x4c00
+#define CFG_DDR_CONFIG_VAL      0x67bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x161
+#define CFG_DDR_EXT_MODE_VAL    0x2
+#define CFG_DDR_MODE_VAL        0x61
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#define CFG_DDR_REFRESH_VAL     0x5f00
+#define CFG_DDR_CONFIG_VAL      0x77bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x131
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x31
+#endif
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL			    0x83d1f6a2
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0xffff
+
+#endif
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0x6fbc8890
+#define CFG_DDR_MODE_VAL_INIT   0x123
+#define CFG_DDR_EXT_MODE_VAL    0x1
+#define CFG_DDR_MODE_VAL        0x23
+
+#define CFG_DDR_CONFIG2_VAL     0x91d0e6a8	
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_DHCP | CFG_CMD_ELF | \
+            CFG_CMD_MII | CFG_CMD_PING | CFG_CMD_NET |\
+   CFG_CMD_ENV | CFG_CMD_FLASH | CFG_CMD_LOADS | CFG_CMD_RUN | CFG_CMD_LOADB \
+   | CFG_CMD_ELF ))
+
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.27
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the two Merlin devices.
+** NOTE: **This will change with different flash configurations**
+*/
+
+#define WLANCAL                         0xbfff1000
+#define BOARDCAL                        0xbfff0000
+#define ATHEROS_PRODUCT_ID              136
+#define CAL_SECTOR                      63
+
+/* For Merlin, both PCI, PCI-E interfaces are valid */
+#define AR7240_ART_PCICFG_OFFSET        12
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/wrt54g.h b/include/configs/wrt54g.h
new file mode 100644
index 0000000..82b7305
--- /dev/null
+++ b/include/configs/wrt54g.h
@@ -0,0 +1,173 @@
+/*****************************************************************************/
+/* \file wrt54g.h
+** \brief wrt54g configuration file
+**
+**  This file contains all of the specific definitions for the WRT54G project
+**  in u-boot.
+**
+**  Copyright (c) 2009 Atheros Communications Inc.  All rights reserved.
+** 
+**  This file is proprietary to Atheros Communications, Inc.'s and licensed only
+**  according to a Technology License Agreement approved and executed by Atheros,
+**  or sublicensed by an authorized sublicensor.
+*/
+
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/ar7240.h>
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CFG_MAX_FLASH_BANKS     1	    /* max number of memory banks */
+#define CFG_MAX_FLASH_SECT      32    /* max number of sectors on one chip */
+#define CFG_FLASH_SECTOR_SIZE   (64*1024)
+#define CFG_FLASH_SIZE          0x00200000 /* Total flash size */
+
+#if (CFG_MAX_FLASH_SECT * CFG_FLASH_SECTOR_SIZE) != CFG_FLASH_SIZE
+#	error "Invalid flash configuration"
+#endif
+
+#define CFG_FLASH_WORD_SIZE     unsigned short 
+
+/* 
+ * We boot from this flash
+ */
+#define CFG_FLASH_BASE		    0xbf000000
+
+/* 
+ * The following #defines are needed to get flash environment right 
+ */
+#define	CFG_MONITOR_BASE	TEXT_BASE
+#define	CFG_MONITOR_LEN		(192 << 10)
+
+#undef CONFIG_BOOTARGS
+/* XXX - putting rootfs in last partition results in jffs errors */
+#define	CONFIG_BOOTARGS     "console=ttyS0,115200 root=31:02 rootfstype=jffs2 init=/sbin/init mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),2752k(rootfs),896k(uImage),64k(NVRAM),64k(ART)"
+
+/* default mtd partition table */
+#undef MTDPARTS_DEFAULT
+#define MTDPARTS_DEFAULT    "mtdparts=ar7240-nor0:256k(u-boot),64k(u-boot-env),5120k(rootfs),1024k(uImage)"
+
+#undef CFG_PLL_FREQ
+#define CFG_PLL_FREQ	CFG_PLL_350_350_175
+
+
+#undef CFG_HZ
+/*
+ * MIPS32 24K Processor Core Family Software User's Manual
+ *
+ * 6.2.9 Count Register (CP0 Register 9, Select 0)
+ * The Count register acts as a timer, incrementing at a constant
+ * rate, whether or not an instruction is executed, retired, or
+ * any forward progress is made through the pipeline.  The counter
+ * increments every other clock, if the DC bit in the Cause register
+ * is 0.
+ */
+/* Since the count is incremented every other tick, divide by 2 */
+/* XXX derive this from CFG_PLL_FREQ */
+#if (CFG_PLL_FREQ == CFG_PLL_200_200_100)
+#	define CFG_HZ          (200000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_300_300_150)
+#	define CFG_HZ          (300000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_350_350_175)
+#	define CFG_HZ          (350000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_333_333_166)
+#	define CFG_HZ          (333000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_133)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_266_266_66)
+#	define CFG_HZ          (266000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_400_400_200) || (CFG_PLL_FREQ == CFG_PLL_400_400_100)
+#	define CFG_HZ          (400000000/2)
+#elif (CFG_PLL_FREQ == CFG_PLL_320_320_80) || (CFG_PLL_FREQ == CFG_PLL_320_320_160)
+#	define CFG_HZ          (400000000/2)
+#endif
+
+
+/* 
+ * timeout values are in ticks 
+ */
+#define CFG_FLASH_ERASE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Erase */
+#define CFG_FLASH_WRITE_TOUT	(2 * CFG_HZ) /* Timeout for Flash Write */
+
+/*
+ * Cache lock for stack
+ */
+#define CFG_INIT_SP_OFFSET	0x1000
+
+#define	CFG_ENV_IS_IN_FLASH    1
+#undef CFG_ENV_IS_NOWHERE  
+
+/* Address and size of Primary Environment Sector	*/
+#define CFG_ENV_ADDR		0xbf030000
+#define CFG_ENV_SIZE		0x10000
+
+#define CONFIG_BOOTCOMMAND "bootm 0x9f050000"
+//#define CONFIG_FLASH_16BIT
+
+/* DDR init values */
+
+#define CONFIG_NR_DRAM_BANKS	2
+#define CFG_DDR_REFRESH_VAL     0x4f10
+#define CFG_DDR_CONFIG_VAL      0xc7bc8cd0
+#define CFG_DDR_MODE_VAL_INIT   0x133
+#define CFG_DDR_EXT_MODE_VAL    0x0
+#define CFG_DDR_MODE_VAL        0x33
+
+#define CFG_DDR_TRTW_VAL        0x1f
+#define CFG_DDR_TWTR_VAL        0x1e
+
+#define CFG_DDR_CONFIG2_VAL	 0x9dd0e6a8
+#define CFG_DDR_RD_DATA_THIS_CYCLE_VAL  0x00ff
+
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_MEMSIZE_IN_BYTES
+#define CONFIG_PCI
+
+/*-----------------------------------------------------------------------
+ * Cache Configuration
+ */
+#define CONFIG_COMMANDS	(( CONFIG_CMD_DFL | CFG_CMD_PCI   | CFG_CMD_MII | CFG_CMD_PING | \
+			               CFG_CMD_NET    | CFG_CMD_ENV   |	CMD_FLASH   | CFG_CMD_ELF  | \
+			               CFG_CMD_RUN    | CFG_CMD_ETHREG ))
+
+
+#define CONFIG_IPADDR   192.168.1.10
+#define CONFIG_SERVERIP 192.168.1.27
+#define CONFIG_ETHADDR 0x00:0xaa:0xbb:0xcc:0xdd:0xee
+#define CFG_FAULT_ECHO_LINK_DOWN    1
+
+
+#define CFG_PHY_ADDR 0 
+#define CFG_AG7240_NMACS 2
+#define CFG_GMII     0
+#define CFG_MII0_RMII             1
+#define CFG_AG7100_GE0_RMII             1
+
+#define CFG_BOOTM_LEN	(16 << 20) /* 16 MB */
+#define DEBUG
+/*
+#define CFG_HUSH_PARSER
+#define CFG_PROMPT_HUSH_PS2 "hush>"
+*/
+
+/*
+** Parameters defining the location of the calibration/initialization
+** information for the radio.
+*/
+
+#define WLANCAL                        0xbfff1000
+#define BOARDCAL                       0xbfff0000
+#define ATHEROS_PRODUCT_ID             140
+#define CAL_SECTOR                     (CFG_MAX_FLASH_SECT - 1)
+
+/* For Kite, only PCI-e interface is valid */
+#define AR7240_ART_PCICFG_OFFSET        3
+
+#include <cmd_confdefs.h>
+
+#endif	/* __CONFIG_H */
-- 
2.17.1


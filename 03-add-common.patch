From d14dc596e3d0ef3ecd26b392349c3fef39430892 Mon Sep 17 00:00:00 2001
From: Mike Banon <mikebdp2@gmail.com>
Date: Fri, 29 Nov 2019 17:41:43 +0000
Subject: [PATCH] Add ./common/ Atheros files from WR841N(D)v9 u-boot

---
 common/cmd_bdr.c    | 427 ++++++++++++++++++++++++++++++++++++++++++++
 common/cmd_ddr.c    | 117 ++++++++++++
 common/cmd_ethreg.c | 197 ++++++++++++++++++++
 common/cmd_pll.c    | 309 ++++++++++++++++++++++++++++++++
 4 files changed, 1050 insertions(+)
 create mode 100644 common/cmd_bdr.c
 create mode 100644 common/cmd_ddr.c
 create mode 100644 common/cmd_ethreg.c
 create mode 100644 common/cmd_pll.c

diff --git a/common/cmd_bdr.c b/common/cmd_bdr.c
new file mode 100644
index 0000000..c673a71
--- /dev/null
+++ b/common/cmd_bdr.c
@@ -0,0 +1,427 @@
+/*     The module is designed to support a BDR with the highest sequence number in the flash.
+ *	If it is successfule, bootloader will choose the BDR to startup.
+ *  
+ *	Author Tos Xu		April 22, 2009
+ *
+ */
+
+#include <common.h>
+#include <command.h>
+#include <flash.h>
+#include <malloc.h>
+#include <configs/ap93-hgw.h>
+
+#define TOTALFLASHSIZE 		CFG_FLASH_SIZE
+#define FLASHSTARTADDRESS 	CFG_FLASH_BASE
+#define FLASH_BLOCK_SIZE	CFG_FLASH_SECTOR_SIZE
+/*
+* Boot description record definitions
+*/
+#define BDRWordSize 4
+
+#define BDRHeaderNWords 4
+#define BDRHeaderNBytes (BDRHeaderNWords * BDRWordSize)
+#define BDRHeader_OffsetMagic 0      /* bytes */
+#define BDRHeader_OffsetSize 4      /* bytes */
+#define BDRHeader_OffsetChecksum 8      /* bytes */
+#define BDRHeader_OffsetSequence 12      /* bytes */
+#define BDR_BeginMagic 0xFEEDCAFE
+
+#define BDRTailerNWords 4
+#define BDRTailerNBytes (BDRTailerNWords * BDRWordSize)
+#define BDRTailer_OffsetMagic 4      /* bytes before end */
+#define BDRTailer_OffsetSize 8      /* bytes before end */
+#define BDR_EndMagic   0xFEEDFADE
+
+#define TagWordToSelf(TagWord) (((TagWord)>>24)&0xff)
+#define TagWordToTag(TagWord) (((TagWord)>>16)&0xff)
+#define TagWordToNWords(TagWord) ((TagWord)&0x3fff)
+
+#define BDRTag_STOP 1
+#define BDRTag_BOOTADDR 2
+#define BDRTag_BOOTARGS 3
+#define BDRTag_REQUESTNUMBER 4
+
+#define BDR_SIZE	256
+
+unsigned int bdr_bootaddr = 0;
+unsigned int bdr_seq = 0; 
+char bdr_bootarg[512];
+
+extern flash_info_t flash_info[];
+/*
+* Boot description records can be written at begin and/or end of each
+*       64KB block of flash (regardless of erase block size)
+*/
+#define BDRBlockSize 0x10000
+
+#define flashaddr(x)	(char *)((volatile char *)0xbf000000+(x))
+
+
+/* big endian -- extract big endian integer from byte stream
+*/
+static inline unsigned big_endian(unsigned char *p)
+{
+    return ((p[0]<<24) | (p[1]<<16) | (p[2]<<8) | p[3]);
+}	
+
+/*
+ * fix endian
+ */
+static inline unsigned fix_endian(unsigned word)
+{
+	return word;
+}
+
+/*
+ * Big endian in the flash.
+ * 0:OK,-1:parameters error,-2: NO STOP tag.
+ */
+int parse_tag(int * bdrp,int size){
+
+	int tags = 0,tagname = 0,tagsize = 0,tagno = 0;
+	int i = 0;
+	unsigned data;
+
+	// Reset the value to prevent the failure of parsing the bdr.	
+	bdr_bootaddr = 0;
+	memset(bdr_bootarg,0,sizeof(bdr_bootarg));
+
+	for(i = 0;i<size;i++)
+	{
+		data = big_endian((char *)bdrp);
+		printf(" -Tag 0x%x.\n",*bdrp);
+		tagname = (data>>16)&0xff;
+		tagno = (data>>24)&0xff;
+		tagsize = (data & 0xffff) - 1;
+
+		if((tags != tagno)||(tagsize<0)) return -1;
+
+		switch(tagname)
+		{
+			case BDRTag_STOP:
+				if(tagsize==0) return 0;
+				else return -1;
+
+			case BDRTag_BOOTADDR:
+				bdrp++;
+				if(tagsize==1){
+					bdr_bootaddr = big_endian((char *)bdrp);
+					printf("  --Boot address:0x%x at sequence 0x%x.\n",bdr_bootaddr,bdr_seq);
+					bdrp++;
+					break;
+				}else return -1;
+
+			case BDRTag_BOOTARGS:
+				bdrp++;
+				if(tagsize < 130){
+					memcpy(bdr_bootarg,(char *)bdrp,tagsize * BDRWordSize);
+					bdrp += tagsize;
+					break;
+				}else return -1;
+
+			case BDRTag_REQUESTNUMBER:
+				bdrp += tagsize +1;
+				break;
+
+			default:
+				bdrp += tagsize + 1;
+				break;
+		}
+			
+		tags++;
+	}
+
+	return -2;
+}
+
+/* findBDRstart -- look for BDR at the beginning of 64KB of flash,
+*       return sequence no.
+*       Return 0 if not found (which is not a valid sequence number).
+*
+*       This is used for searching for existing sequence number so we
+*       can be sure to have a larger one.
+*       Sequence numbers are in BDRs (Boot Description Records) which
+*       can be at the begin or end of any 64KB section of flash
+*       (regardless of the erase block size).
+*/
+
+unsigned findBDRstart(int offset)
+{
+    unsigned magic1;
+    unsigned magic2;
+    unsigned size;
+    unsigned sequence;
+    unsigned char bottom[BDRHeaderNBytes];
+    unsigned char top[BDRTailerNBytes];
+    unsigned topoffset;
+    unsigned bdrblock[BDR_SIZE];
+
+    memcpy(bottom, flashaddr(offset),sizeof(bottom));
+    memcpy(bdrblock,flashaddr(offset),sizeof(bdrblock));
+    magic1 = big_endian(bottom + BDRHeader_OffsetMagic);
+
+    if (magic1 != BDR_BeginMagic)
+        return 0;
+
+    size = BDRWordSize*big_endian( bottom + BDRHeader_OffsetSize);
+
+    if (size <= BDRHeaderNBytes+BDRTailerNBytes)
+        return 0;
+
+    if (size >= BDRBlockSize)
+        return 0;
+
+    topoffset = offset + size;
+
+    memcpy(top, flashaddr(topoffset-sizeof(top)),sizeof(top));
+
+    magic2 = big_endian(top + sizeof(top)-BDRTailer_OffsetMagic);
+    if (magic2 != BDR_EndMagic)
+        return 0;
+
+    if (BDRWordSize*big_endian(
+                top+sizeof(top)-BDRTailer_OffsetSize) != size)
+        return 0;
+
+    sequence = big_endian(bottom + BDRHeader_OffsetSequence);
+
+    if (sequence == 0 || sequence == 0xffffffff)
+        return 0;       /* invalid */
+
+    printf("Found starting sequence: 0x%x in offset 0x%x.\n",sequence,offset);
+    if(sequence > bdr_seq){
+	bdr_seq = sequence;
+	parse_tag(bdrblock + BDRHeaderNWords,BDR_SIZE);
+    }
+
+    return sequence;
+}
+
+unsigned findBDRend(int offset) /* offset of begin of 64KB section */
+{
+    unsigned magic1;
+    unsigned magic2;
+    unsigned size;
+    unsigned sequence;
+    unsigned char bottom[BDRHeaderNBytes];
+    unsigned char top[BDRTailerNBytes];
+    unsigned topoffset;
+    unsigned bottomoffset;
+    unsigned bdrblock[BDR_SIZE];
+
+    topoffset = offset + BDRBlockSize;
+
+    memcpy(top, flashaddr(topoffset-sizeof(top)),sizeof(top));
+    memcpy(bdrblock, flashaddr(topoffset-sizeof(bdrblock)),sizeof(bdrblock));
+
+    magic2 = big_endian(top + sizeof(top)-BDRTailer_OffsetMagic);
+
+    if (magic2 != BDR_EndMagic)
+        return 0;
+
+    size = BDRWordSize*big_endian(top+sizeof(top)-BDRTailer_OffsetSize);
+
+    if (size <= BDRHeaderNBytes+BDRTailerNBytes)
+        return 0;
+
+    if (size >= BDRBlockSize)
+        return 0;
+
+    bottomoffset = topoffset - size;
+
+    memcpy(bottom, flashaddr(bottomoffset),sizeof(bottom));
+
+    magic1 = big_endian(bottom + BDRHeader_OffsetMagic);
+
+    if (magic1 != BDR_BeginMagic)
+        return 0;
+
+    if (BDRWordSize*big_endian(bottom + BDRHeader_OffsetSize) != size)
+        return 0;
+
+    sequence = big_endian(bottom+BDRHeader_OffsetSequence);
+
+    if (sequence == 0 || sequence == 0xffffffff)
+        return 0;       /* invalid */
+
+    printf("Found end sequence: 0x%x in offset 0x%x.\n",sequence,offset);
+    if(sequence > bdr_seq){
+	bdr_seq = sequence;
+	parse_tag(bdrblock + BDRTailerNWords,BDR_SIZE);
+    }
+	
+    return sequence;
+}
+
+
+/* return  0: no existing valid Boot Description Recorder
+ *         1: Found a valid DBR and set bootm and bootarg.
+ */
+unsigned findbdr(unsigned int flashaddr){
+	int offset = 0;
+	char buf[64];
+
+	if(flashaddr >= FLASHSTARTADDRESS) flashaddr -= FLASHSTARTADDRESS;
+
+	printf("findbdr flashaddr 0x%x.\n",flashaddr);
+	bdr_seq = 0;
+	bdr_bootaddr = 0xffffffff;
+	memset(bdr_bootarg,0,sizeof(bdr_bootarg));
+
+	for(offset =flashaddr;offset < TOTALFLASHSIZE;offset += BDRBlockSize)
+	{
+		findBDRstart(offset);
+		findBDRend(offset);		
+	}
+
+	// if bootaddr is equal to 0xffffffff or 0x0, it is not valid.
+	if(bdr_seq == 0||bdr_bootaddr==0xffffffff||bdr_bootaddr==0x0){
+		printf("Failed to find a good BDR at seq 0x%x.\n",bdr_seq);
+		return 0;
+	}
+	
+	if(bdr_bootaddr < TOTALFLASHSIZE) bdr_bootaddr |= FLASHSTARTADDRESS;
+	sprintf(buf,"%s 0x%x","bootm",bdr_bootaddr);
+	setenv("bootcmd",buf);
+	setenv("bootargs",bdr_bootarg);
+	printf("Got a good Boot Descriptor Record.\n  -Sequence:0x%x.\n",bdr_seq);
+	printf("  -Boot address: 0x%x.\n",bdr_bootaddr);
+	if(strlen(bdr_bootarg) < 512)	
+		printf("  -Boot arguments: %s.\n",bdr_bootarg);
+	return 1;
+
+}
+
+
+int do_findbdr (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
+{
+	int err = 0;
+
+	unsigned int addr;
+
+	if(argc < 2)
+		err = findbdr(0);
+	else{
+		addr = simple_strtoul(argv[1], NULL, 16);
+		err = findbdr(addr);
+	}
+	
+	return err;
+}
+/*
+ * flashaddr is the aboslute address.(0xbf.....)
+ */
+static unsigned writebdr(unsigned int flashaddr,unsigned bootaddr,char * cmdline){
+	unsigned bdrblock[BDR_SIZE];
+	unsigned * bdrp =  bdrblock;
+	unsigned flash_offset = flashaddr - FLASHSTARTADDRESS;
+	int err;
+	unsigned seq;
+	unsigned tags;
+	char * p;
+	char buffer[64];
+	
+	//Make sure the flashaddr is located at X*1024.
+	if(flashaddr &0x3ff) return 1;
+	
+	err = findbdr(0);
+	seq = bdr_seq + 1;
+
+	bdrp[0]	= fix_endian(BDR_BeginMagic);
+	bdrp[BDR_SIZE-1] = fix_endian(BDR_EndMagic);
+	bdrp[1] = bdrp[BDR_SIZE-2] = fix_endian(BDR_SIZE);
+	bdrp[2] = 0;
+	bdrp[3] = seq;
+	
+	bdrp += 4;
+	tags = 0;
+
+	*bdrp++ = fix_endian(tags++<<24| BDRTag_REQUESTNUMBER<<16|2);
+	*bdrp++ = fix_endian(0);//request number.
+
+	*bdrp++ = fix_endian(tags++<<24| BDRTag_BOOTADDR <<16|2);
+	*bdrp++ = fix_endian(bootaddr);//bootaddr.
+
+
+	*bdrp++ = fix_endian(tags++<<24| BDRTag_BOOTARGS <<16|(1+sizeof(bdr_bootarg)/sizeof(int)));
+	memcpy(bdrp,cmdline,sizeof(bdr_bootarg));
+	bdrp += sizeof(bdr_bootarg)/sizeof(int);//bootarg.	
+
+	*bdrp++ = fix_endian(tags++<<24| BDRTag_STOP<<16|1);//STOP tag
+	p = (char *)malloc(FLASH_BLOCK_SIZE);
+
+	memcpy(p,(char *)(((unsigned int )flashaddr/FLASH_BLOCK_SIZE )* FLASH_BLOCK_SIZE),FLASH_BLOCK_SIZE);
+	memcpy(p + ((unsigned int )flashaddr%FLASH_BLOCK_SIZE), bdrblock,BDR_SIZE * 4);
+
+	flash_erase(&flash_info[0],flash_offset/FLASH_BLOCK_SIZE,flash_offset/FLASH_BLOCK_SIZE);
+	err = flash_write(p,((unsigned int )flashaddr/FLASH_BLOCK_SIZE )* FLASH_BLOCK_SIZE, FLASH_BLOCK_SIZE);
+
+	free(p);
+
+	if(err){
+		flash_perror(err);
+		return 1;
+	}
+
+	if(memcmp((char *)flashaddr,bdrblock,BDR_SIZE * 4)){
+		printf("Error when writing bdr into flash.\n");
+		return 1;
+	}
+	
+	printf("BDR has been successfully written.\n");
+	printf("BDR boot address: 0x%x.\n",bootaddr);
+	printf("BDR boot arg: %s.\n",cmdline);
+
+	sprintf(buffer,"%s 0x%x","bootm",bootaddr);
+	setenv("bootcmd",buffer);
+	setenv("bootargs",cmdline);
+
+	return 0;
+}
+
+int do_writebdr (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
+{
+	int err = 0;
+
+	unsigned int flashaddr;
+	unsigned int bootaddr;
+	char cmd[512];
+
+	char * s = getenv("bootargs");
+	
+	printf("do_writebdr :: size %d bootargs = %s .\n",sizeof(s),s);
+	if(argc < 2)
+		return 1;
+	else{
+		flashaddr = simple_strtoul(argv[1], NULL, 16);
+		if(argc == 3 ) bootaddr = simple_strtoul(argv[2], NULL, 16);
+
+		if(flashaddr < TOTALFLASHSIZE) flashaddr |= FLASHSTARTADDRESS;
+		if(flashaddr < (FLASHSTARTADDRESS|0x80000)) return 1;
+		memset(cmd,0,sizeof(cmd));
+		memcpy(cmd,s,sizeof(cmd));
+		//printf("do_writebdr :: bdr_bootargs = %s size %d.\n",bdr_bootarg,sizeof(bdr_bootarg));		
+		err = writebdr(flashaddr,bootaddr,cmd);
+	}
+	
+	return err;
+}
+
+U_BOOT_CMD(
+ 	writebdr,	CFG_MAXARGS,	1,	do_writebdr,
+ 	"writebdr- write a valid bdr in the flash based on existing sequences\n",
+ 	"[writebdr [arg ...]]\n  write a valid bdr based on existing sequences at the designed address  - \n"
+ 	"\tpassing arguments 'flash_offset, bootaddr'; you may assign the flash address,\n"
+ 	"\t'bootaddr' can be ignored or set it.\n"
+);
+
+U_BOOT_CMD(
+ 	findbdr,	CFG_MAXARGS,	1,	do_findbdr,
+ 	"findbdr - find a valid bdr with the highest sequence in the flash\n",
+ 	"[findbdr [arg ...]]\n  find a valid bdr with the highest sequence in the flash from the starting address  - \n"
+ 	"\tpassing arguments 'arg ...'; you may assign the address or not,\n"
+ 	"\t'arg' can be the starting address of search.\n"
+);
+
+
diff --git a/common/cmd_ddr.c b/common/cmd_ddr.c
new file mode 100644
index 0000000..a050c6a
--- /dev/null
+++ b/common/cmd_ddr.c
@@ -0,0 +1,117 @@
+/*
+ * (C) Copyright 2002
+ * Gerald Van Baren, Custom IDEAS, vanbaren@cideas.com
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/*
+ * SPI Read/Write Utilities
+ */
+
+#include <common.h>
+#include <command.h>
+#include <malloc.h>
+#include <config.h>
+#include <ar7240_soc.h>
+
+#if (CONFIG_COMMANDS & CFG_CMD_DDR)
+
+/*-----------------------------------------------------------------------
+ * Definitions
+ */
+
+static void prepare_flash(char **buff_ptr,long **val) 
+{
+	if((long)*buff_ptr % 4)
+		*buff_ptr = *buff_ptr + ((long)*buff_ptr % 4);
+        memcpy(*buff_ptr,(void *)((long)UBOOT_ENV_SEC_START),CFG_FLASH_SECTOR_SIZE);
+	flash_sect_erase(UBOOT_ENV_SEC_START,UBOOT_ENV_SEC_START + (CFG_FLASH_SECTOR_SIZE - 1));
+	*val = (long *)(*buff_ptr + CFG_FLASH_SECTOR_SIZE - 0x30);
+}
+
+int do_ddr (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
+{
+	char  *buff,*buff_ptr = NULL;
+	int ddr_config,ddr_config2,ext_mod;
+	long *val;
+
+	/*
+	 * We use the last specified parameters, unless new ones are
+	 * entered.
+	 */
+
+	/* last sector of uboot 0xbf040000 - 0xbf050000
+	 * write MAGIC at 0xbf04ffe0 
+	 * write sector at 0xbf04ffe4
+	 * write size at   0xbf04ffe8
+         */
+
+	if ((flag & CMD_FLAG_REPEAT) == 0)
+	{
+		if (argc == 2) {
+			ddr_config = simple_strtoul(argv[1], NULL, 10);
+			ddr_config2 = CFG_DDR_CONFIG2_VAL;
+			ext_mod = CFG_DDR_EXT_MODE_VAL;
+		}
+		else if (argc == 3) {
+			ddr_config = simple_strtoul(argv[1], NULL, 10);
+			ddr_config2 = simple_strtoul(argv[2], NULL, 10);
+			ext_mod = CFG_DDR_EXT_MODE_VAL;
+		}
+		else if (argc == 4) {
+			ddr_config = simple_strtoul(argv[1], NULL, 10);
+			ddr_config2 = simple_strtoul(argv[2], NULL, 10);
+			ext_mod = simple_strtoul(argv[3], NULL, 10);
+		}
+		else {
+			printf("Invalid number of arguments:%d\n",argc);
+			return -1;
+		}
+	}
+
+	buff = (char *) malloc(CFG_FLASH_SECTOR_SIZE + 4);
+	buff_ptr = buff;
+
+	prepare_flash(&buff_ptr,&val);
+	*val++ = (long)CFG_DDR_MAGIC;
+	*val++ = ddr_config;
+	*val++ = ddr_config2;
+	*val   = ext_mod;
+
+        flash_write(buff_ptr,(long)(UBOOT_ENV_SEC_START),CFG_FLASH_SECTOR_SIZE);
+
+	printf("Programed values ext_mod:0x%0.8x ",*val--);
+	printf(" ddr_config2:0x%0.8x ddr_config:0x%0.8x \n",*val--,*val);
+	free(buff);
+
+	return 0;
+}
+
+/***************************************************/
+
+U_BOOT_CMD(
+	ddr,	6,	1,	do_ddr,
+	"fls    - Set to change DDR settings on reboot\n",
+	"<value>  - DDR CONFIG\n"
+	"<value>  - DDR CONFIG2\n"
+	"<value>  - EXT MOD\n"
+);
+
+#endif	/* CFG_CMD_SPI */
diff --git a/common/cmd_ethreg.c b/common/cmd_ethreg.c
new file mode 100644
index 0000000..6bda1fe
--- /dev/null
+++ b/common/cmd_ethreg.c
@@ -0,0 +1,197 @@
+/*
+ * (C) Copyright 2002
+ * Gerald Van Baren, Custom IDEAS, vanbaren@cideas.com
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/*
+ * SPI Read/Write Utilities
+ */
+
+#include <common.h>
+#include <command.h>
+
+#if (CONFIG_COMMANDS & CFG_CMD_ETHREG)
+
+/*-----------------------------------------------------------------------
+ * Definitions
+ */
+#ifdef CFG_ATHRS26_PHY
+extern unsigned int s26_rd_phy(unsigned int phy_addr, unsigned int reg_addr);
+extern void s26_wr_phy(unsigned int phy_addr, unsigned int reg_addr, unsigned int write_data);
+extern uint32_t athrs26_reg_read(uint32_t reg_addr);
+extern void athrs26_reg_write(uint32_t reg_addr, uint32_t reg_val);
+#endif
+
+#ifdef CFG_ATHRS27_PHY
+extern unsigned int s27_rd_phy(unsigned int phy_addr, unsigned int reg_addr);
+extern void s27_wr_phy(unsigned int phy_addr, unsigned int reg_addr, unsigned int write_data);
+extern uint32_t athrs27_reg_read(uint32_t reg_addr);
+extern void athrs27_reg_write(uint32_t reg_addr, uint32_t reg_val);
+#endif
+
+#ifdef CONFIG_AR7242_S16_PHY
+extern uint32_t athrs16_reg_read(uint32_t reg_addr);
+extern void athrs16_reg_write(uint32_t reg_addr, uint32_t reg_val);
+extern int  ag7240_miiphy_read(char *devname, uint32_t phaddr,
+                uint8_t reg);
+extern int  ag7240_miiphy_write(char *devname, uint32_t phaddr,
+                uint8_t reg, uint16_t data);
+#endif
+
+
+#define READ_MAC  0x01
+#define WRITE_MAC 0x02
+#define READ_PHY  0x10
+#define WRITE_PHY 0x20
+
+/*
+ * Values from last command.
+ */
+static int   reg;
+static int   val,rd_value;
+static int phyaddr;
+static int portnum;
+
+int do_ethreg (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
+{
+	int   rcode = 0;
+
+	/*
+	 * We use the last specified parameters, unless new ones are
+	 * entered.
+	 */
+
+	if ((flag & CMD_FLAG_REPEAT) == 0)
+	{
+		if (argc == 2) {
+			reg = simple_strtoul(argv[1], NULL, 10);
+			rcode = READ_MAC;
+		}
+		if (argc == 3) {
+			reg = simple_strtoul(argv[1], NULL, 10);
+			val = simple_strtoul(argv[2],NULL,10);
+			rcode = WRITE_MAC;
+		}
+		if (argc == 4) {
+    	                if(*argv[1] == 'p') {
+				portnum = simple_strtoul(argv[2], NULL, 10);
+				reg = simple_strtoul(argv[3],NULL,10);
+				rcode = READ_PHY; 
+			}
+			else
+			    return 1;
+		}
+        	if (argc == 5) {
+    	                if(*argv[1] == 'p') {
+				portnum = simple_strtoul(argv[2], NULL, 10);
+				reg = simple_strtoul(argv[3],NULL,10);
+				val = simple_strtoul(argv[4],NULL,10);
+				rcode = WRITE_PHY; 
+			}
+			else
+			    return 1;
+		}
+
+		if ((argc > 4) && (argc < 2))
+			return 1;
+	}
+#ifdef CONFIG_AR7242_S16_PHY
+   if(rcode == READ_PHY) {
+   	rd_value = ag7240_miiphy_read("eth0",portnum,reg);
+        printf("Read Reg: 0x%08x = 0x%08x\n",reg,rd_value);
+   }
+   else if(rcode == READ_MAC) {
+        rd_value = athrs16_reg_read(reg);
+        printf("Read Reg: 0x%08x = 0x%08x\n",reg,rd_value);
+   }
+   else if(rcode  == WRITE_PHY) {
+   	rd_value = ag7240_miiphy_read("eth0",portnum,reg);
+        ag7240_miiphy_write("eth0",portnum,reg,val);
+        printf("Write Reg: 0x%08x: Oldval = 0x%08x Newval = 0x%08x\n", reg, rd_value, val);
+   }
+   else if(rcode == WRITE_MAC) {
+        rd_value = athrs16_reg_read(reg);
+        athrs16_reg_write(reg,val);
+        printf("Write Reg: 0x%08x: Oldval = 0x%08x Newval = 0x%08x\n", reg, rd_value, val);
+   }
+   else
+	return 1;
+#endif
+#ifdef CFG_ATHRS26_PHY        
+   if(rcode == READ_PHY) {
+   	rd_value = s26_rd_phy(portnum,reg);
+        printf("Read Reg: 0x%08x = 0x%08x\n",reg,rd_value);
+   }
+   else if(rcode == READ_MAC) {
+        rd_value = athrs26_reg_read(reg);
+        printf("Read Reg: 0x%08x = 0x%08x\n",reg,rd_value);
+   }
+   else if(rcode  == WRITE_PHY) {
+   	rd_value = s26_rd_phy(portnum,reg);
+        s26_wr_phy(portnum,reg,val);
+        printf("Write Reg: 0x%08x: Oldval = 0x%08x Newval = 0x%08x\n", reg, rd_value, val);
+   }
+   else if(rcode == WRITE_MAC) {
+        rd_value = athrs26_reg_read(reg);
+        athrs26_reg_write(reg,val);
+        printf("Write Reg: 0x%08x: Oldval = 0x%08x Newval = 0x%08x\n", reg, rd_value, val);
+   }
+   else
+	return 1;
+#endif
+#ifdef CFG_ATHRS27_PHY        
+   if(rcode == READ_PHY) {
+   	rd_value = s27_rd_phy(portnum,reg);
+        printf("Read Reg: 0x%08x = 0x%08x\n",reg,rd_value);
+   }
+   else if(rcode == READ_MAC) {
+        rd_value = athrs27_reg_read(reg);
+        printf("Read Reg: 0x%08x = 0x%08x\n",reg,rd_value);
+   }
+   else if(rcode  == WRITE_PHY) {
+   	rd_value = s27_rd_phy(portnum,reg);
+        s27_wr_phy(portnum,reg,val);
+        printf("Write Reg: 0x%08x: Oldval = 0x%08x Newval = 0x%08x\n", reg, rd_value, val);
+   }
+   else if(rcode == WRITE_MAC) {
+        rd_value = athrs27_reg_read(reg);
+        athrs27_reg_write(reg,val);
+        printf("Write Reg: 0x%08x: Oldval = 0x%08x Newval = 0x%08x\n", reg, rd_value, val);
+   }
+   else
+	return 1;
+#endif
+   return 0;
+}
+
+/***************************************************/
+
+U_BOOT_CMD(
+	ethreg,	6,	1,	do_ethreg,
+	"ethreg    - S26 PHY Reg rd/wr  utility\n",
+	"<p> <phyaddr> <reg> <value> - Send <bit_len> bits from <dout> out the SPI\n"
+	"<p>  - operates on the phy; by default is rd/wr s26 mac registers\n"
+	"<phyaddr> - Address of the phy\n"
+	"<reg>    - Register offset\n"
+	"<value>  - value to write\n"
+);
+
+#endif	/* CFG_CMD_SPI */
diff --git a/common/cmd_pll.c b/common/cmd_pll.c
new file mode 100644
index 0000000..72724b2
--- /dev/null
+++ b/common/cmd_pll.c
@@ -0,0 +1,309 @@
+/*
+ * (C) Copyright 2002
+ * Gerald Van Baren, Custom IDEAS, vanbaren@cideas.com
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+#include <environment.h>
+#include <command.h>
+#include <config.h>
+#ifndef CONFIG_ATHEROS
+#include <ar7240_soc.h>
+#endif
+
+#ifndef CONFIG_ATH_EMULATION
+#if (CONFIG_COMMANDS & CFG_CMD_PLL)
+#if defined(CONFIG_MACH_QCA955x) || defined(CONFIG_MACH_QCA953x)
+int do_pll (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
+{
+	extern env_t	*env_ptr;
+	extern int saveenv(void);
+	extern void env_crc_update (void);
+
+	unsigned	*val;
+
+	if (argc != 2 && argc != 5) {
+		printf(cmdtp->usage);
+		return -1;
+	}
+
+	val = (unsigned *)env_ptr->data +
+		(sizeof(env_ptr->data) / sizeof(*val)) - (32 / sizeof(*val));
+
+	if (strcmp(argv[1], "erase") == 0) {
+		printf("Erasing flash setting\n");
+		val[0] = val[1] =
+		val[2] = val[3] =
+		val[4] = val[5] = 0xffffffffu;
+	} else if (strcmp(argv[1], "get") == 0) {
+		printf("pll 0x%x 0x%x 0x%x 0x%x\n", val[1], val[2], val[3], val[4]);
+		return 0;
+	} else if (argc > 2) {
+		val[0] = PLL_MAGIC;
+
+		val[1] = simple_strtoul(argv[1], NULL, 16);
+		val[2] = simple_strtoul(argv[2], NULL, 16);
+		val[3] = simple_strtoul(argv[3], NULL, 16);
+		val[4] = simple_strtoul(argv[4], NULL, 16);
+		printf("Setting 0x%x 0x%x 0x%x 0x%x\n", val[1], val[2], val[3], val[4]);
+	} else {
+		printf(cmdtp->usage);
+		return -1;
+	}
+
+	env_crc_update();
+	saveenv();
+
+	return 0;
+
+}
+
+U_BOOT_CMD(
+	pll,	5,	0,	do_pll,
+#ifdef COMPRESSED_UBOOT
+	NULL, NULL
+#else
+	"pll cpu-pll dither ddr-pll dither - Set to change CPU & DDR speed\npll erase\npll get\n", NULL
+#endif
+);
+
+#elif defined(CONFIG_WASP_SUPPORT)
+#include <asm/addrspace.h>
+
+int do_srifpll (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
+{
+	extern env_t	*env_ptr;
+	extern int saveenv(void);
+	extern void env_crc_update (void);
+
+	unsigned	*val;
+
+	if (argc != 2 && argc != 3) {
+		printf(cmdtp->usage);
+		return -1;
+	}
+
+	val = env_ptr->data + sizeof(env_ptr->data) - 0x20 - 0xc;
+
+	if (strcmp(argv[1], "erase") == 0) {
+		printf("Erasing flash setting\n");
+		val[0] = val[1] = val[2] = 0xffffffffu;
+	} else if (strcmp(argv[1], "get") == 0) {
+		printf("srifpll 0x%x 0x%x\n", val[1], val[2]);
+		return 0;
+	} else if (argc > 2) {
+		val[0] = SRIF_PLL_MAGIC;
+
+		val[1] = simple_strtoul(argv[1], NULL, 16);
+		val[2] = simple_strtoul(argv[2], NULL, 16);
+		printf("Setting 0x%x 0x%x\n", val[1], val[2]);
+	} else {
+		printf(cmdtp->usage);
+		return -1;
+	}
+
+	env_crc_update();
+	saveenv();
+
+	return 0;
+
+}
+
+int do_pll (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
+{
+	extern env_t	*env_ptr;
+	extern int saveenv(void);
+	extern void env_crc_update (void);
+
+	unsigned	*val;
+
+	if (argc != 2 && argc != 6) {
+		printf(cmdtp->usage);
+		return -1;
+	}
+
+	val = (unsigned *)env_ptr->data +
+		(sizeof(env_ptr->data) / sizeof(*val)) - (32 / sizeof(*val));
+
+	if (strcmp(argv[1], "erase") == 0) {
+		printf("Erasing flash setting\n");
+		val[0] = val[1] =
+		val[2] = val[3] =
+		val[4] = val[5] = 0xffffffffu;
+	} else if (strcmp(argv[1], "get") == 0) {
+		printf("pll 0x%x 0x%x 0x%x 0x%x 0x%x\n", val[1], val[2], val[3], val[4], val[5]);
+		return 0;
+	} else if (argc > 2) {
+		val[0] = PLL_MAGIC;
+
+		val[1] = simple_strtoul(argv[1], NULL, 16);
+		val[2] = simple_strtoul(argv[2], NULL, 16);
+		val[3] = simple_strtoul(argv[3], NULL, 16);
+		val[4] = simple_strtoul(argv[4], NULL, 16);
+		val[5] = simple_strtoul(argv[5], NULL, 16);
+		printf("Setting 0x%x 0x%x 0x%x 0x%x 0x%x\n", val[1], val[2], val[3], val[4], val[5]);
+	} else {
+		printf(cmdtp->usage);
+		return -1;
+	}
+
+	env_crc_update();
+	saveenv();
+
+	return 0;
+
+}
+
+U_BOOT_CMD(
+	pll,	6,	0,	do_pll,
+#ifdef COMPRESSED_UBOOT
+	NULL, NULL
+#else
+	"pll cpu-pll dither ddr-pll dither - Set to change CPU & DDR speed\npll erase\npll get\n", NULL
+#endif
+);
+
+U_BOOT_CMD(
+	srifpll,	3,	0,	do_srifpll,
+#ifdef COMPRESSED_UBOOT
+	NULL, NULL
+#else
+	"srifpll cpu-pll ddr-pll - To change CPU & DDR speed through srif\nsrifpll erase\nsrifpll get\n", NULL
+#endif
+);
+#else	/* CONFIG_WASP_SUPPORT */
+typedef struct {
+	char		*freq;
+	unsigned	ddr,
+			ahb,
+			pll,
+			ref;
+} plldef_t;
+
+static plldef_t plldef[] = {
+	{ "400_400_200", 0x0u, 0x0u, 0x28u, 0x2u },
+	{ "400_400_100", 0x0u, 0x1u, 0x28u, 0x2u },
+	{ "360_360_180", 0x0u, 0x0u, 0x24u, 0x2u },
+	{ "350_350_175", 0x0u, 0x0u, 0x23u, 0x2u },
+	{ "340_340_170", 0x0u, 0x0u, 0x22u, 0x2u },
+	{ "320_320_160", 0x0u, 0x0u, 0x20u, 0x2u },
+	{ "320_320_80",  0x0u, 0x1u, 0x20u, 0x2u },
+	{ "300_300_150", 0x0u, 0x0u, 0x1eu, 0x2u },
+	{ "300_300_75",  0x0u, 0x1u, 0x1eu, 0x2u },
+	{ "200_200_100", 0x0u, 0x0u, 0x14u, 0x2u },
+	{ "370_370_185", 0x0u, 0x0u, 0x25u, 0x2u },
+	{ "380_380_190", 0x0u, 0x0u, 0x26u, 0x2u },
+	{ "390_390_195", 0x0u, 0x0u, 0x27u, 0x2u },
+	{ "410_410_205", 0x0u, 0x0u, 0x29u, 0x2u },
+	{ "420_420_210", 0x0u, 0x0u, 0x2au, 0x2u },
+	{ "430_430_215", 0x0u, 0x0u, 0x2bu, 0x2u },
+	{ NULL, 0x0u, 0x0u, 0x0u, 0x0u }	/* Terminator */
+};
+
+int do_pll (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
+{
+	extern env_t	*env_ptr;
+	extern int saveenv(void);
+	extern void env_crc_update (void);
+
+	plldef_t	*p;
+	unsigned	*val;
+
+#ifndef COMPRESSED_UBOOT
+	if (argc == 1) {
+		/* list known frequencies */
+		printf("List of known frequencies:\n");
+		for (p = plldef; p->freq; p ++) {
+			printf("\t%s\n", p->freq);
+		}
+		return 0;
+	}
+#endif
+
+	if (argc != 2) {
+		printf(cmdtp->usage);
+		return -1;
+	}
+
+	val = (unsigned *)env_ptr->data;
+
+	/*
+	 * We use the last 16 bytes of envmt data.
+	 * Position the pointer appropriately.
+	 */
+	val += (sizeof(env_ptr->data) / sizeof(*val))
+		- (16 / sizeof(*val));
+
+	val[0] = PLL_MAGIC;
+
+	/*
+	 * XXX XXX XXX WARNING XXX XXX XXX
+	 * Doesn't detect arguments like aaa_bbb_ccc that
+	 * are not present in the above table. They will
+	 * get processed in strtoul, and an incorrect
+	 * value will be set, instead of flagging an error
+	 *
+	 * This does not take care of redefining CFG_HZ
+	 */
+	for (p = plldef; p->freq; p ++) {
+		if (strcmp(argv[1], p->freq) == 0) {
+			val[1] = (unsigned)(
+					(p->ddr << PLL_CONFIG_DDR_DIV_SHIFT) |
+					(p->ahb << PLL_CONFIG_AHB_DIV_SHIFT) |
+					(p->pll << PLL_CONFIG_PLL_DIV_SHIFT) |
+					(p->ref << PLL_CONFIG_PLL_REF_DIV_SHIFT));
+			break;
+		}
+	}
+	if (!p->freq) {
+		if (strcmp(argv[1], "erase") == 0) {
+			val[0] = 0xffffffffu;
+			val[1] = 0xffffffffu;
+		} else {
+			val[1] = simple_strtoul(argv[1], NULL, 10);
+		}
+	}
+
+#ifndef COMPRESSED_UBOOT
+	printf("magic: 0x%08x	value: 0x%08x\n", val[0], val[1]);
+#endif
+
+	env_crc_update();
+	saveenv();
+
+	return 0;
+}
+
+/***************************************************/
+
+U_BOOT_CMD(
+	pll,	2,	0,	do_pll,
+#ifdef COMPRESSED_UBOOT
+	NULL, NULL
+#else
+	"pll [<val>] - Set to change CPU/AHB/DDR speeds\n",
+	"<val> - 300_300_150\n"
+#endif
+);
+#endif /* CONFIG_WASP_SUPPORT */
+
+#endif	/* CFG_CMD_SPI */
+#endif // CONFIG_ATH_EMULATION
-- 
2.17.1

